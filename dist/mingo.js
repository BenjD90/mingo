//! mingo.js 3.0.0
//! Copyright (c) 2020 Francis Asante
//! MIT

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.mingo = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  function cov_1j45dhj34n() {
    var path = "/Users/francis/workspace/mingo/lib/constants.js";
    var hash = "37771397593e45d5f449e09a893efd788c841af9";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/constants.js",
      statementMap: {
        "0": {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 2,
            column: 28
          }
        },
        "1": {
          start: {
            line: 3,
            column: 27
          },
          end: {
            line: 3,
            column: 38
          }
        },
        "2": {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 28
          }
        },
        "3": {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 34
          }
        },
        "4": {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 6,
            column: 32
          }
        },
        "5": {
          start: {
            line: 7,
            column: 24
          },
          end: {
            line: 7,
            column: 32
          }
        },
        "6": {
          start: {
            line: 8,
            column: 22
          },
          end: {
            line: 8,
            column: 28
          }
        },
        "7": {
          start: {
            line: 9,
            column: 23
          },
          end: {
            line: 9,
            column: 30
          }
        },
        "8": {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 10,
            column: 32
          }
        },
        "9": {
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 30
          }
        },
        "10": {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 32
          }
        },
        "11": {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 36
          }
        },
        "12": {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 101
          }
        },
        "13": {
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 17,
            column: 41
          }
        },
        "14": {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 18,
            column: 31
          }
        },
        "15": {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 19,
            column: 37
          }
        },
        "16": {
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 20,
            column: 41
          }
        },
        "17": {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 31
          }
        },
        "18": {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 22,
            column: 32
          }
        },
        "19": {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 23,
            column: 33
          }
        },
        "20": {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 24,
            column: 34
          }
        },
        "21": {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 47
          }
        },
        "22": {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 47
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 22,
              column: 23
            },
            end: {
              line: 22,
              column: 24
            }
          },
          loc: {
            start: {
              line: 22,
              column: 29
            },
            end: {
              line: 22,
              column: 32
            }
          },
          line: 22
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "37771397593e45d5f449e09a893efd788c841af9"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1j45dhj34n = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1j45dhj34n();
  // Javascript native types
  var T_NULL = (cov_1j45dhj34n().s[0]++, 'null');
  var T_UNDEFINED = (cov_1j45dhj34n().s[1]++, 'undefined');
  var T_BOOL = (cov_1j45dhj34n().s[2]++, 'bool');
  var T_BOOLEAN = (cov_1j45dhj34n().s[3]++, 'boolean');
  var T_NUMBER = (cov_1j45dhj34n().s[4]++, 'number');
  var T_STRING = (cov_1j45dhj34n().s[5]++, 'string');
  var T_DATE = (cov_1j45dhj34n().s[6]++, 'date');
  var T_REGEX = (cov_1j45dhj34n().s[7]++, 'regex');
  var T_REGEXP = (cov_1j45dhj34n().s[8]++, 'regexp');
  var T_ARRAY = (cov_1j45dhj34n().s[9]++, 'array');
  var T_OBJECT = (cov_1j45dhj34n().s[10]++, 'object');
  var T_FUNCTION = (cov_1j45dhj34n().s[11]++, 'function'); // no array, object, or function types

  var JS_SIMPLE_TYPES = (cov_1j45dhj34n().s[12]++, [T_NULL, T_UNDEFINED, T_BOOLEAN, T_NUMBER, T_STRING, T_DATE, T_REGEXP]); // operator classes

  var OP_EXPRESSION = (cov_1j45dhj34n().s[13]++, 'expression');
  var OP_GROUP = (cov_1j45dhj34n().s[14]++, 'group');
  var OP_PIPELINE = (cov_1j45dhj34n().s[15]++, 'pipeline');
  var OP_PROJECTION = (cov_1j45dhj34n().s[16]++, 'projection');
  var OP_QUERY = (cov_1j45dhj34n().s[17]++, 'query');
  cov_1j45dhj34n().s[18]++;
  var MISSING = function MISSING() {
    cov_1j45dhj34n().f[0]++;
  };
  var MAX_INT = (cov_1j45dhj34n().s[19]++, 2147483647);
  var MIN_INT = (cov_1j45dhj34n().s[20]++, -2147483648);
  var MAX_LONG = (cov_1j45dhj34n().s[21]++, Number.MAX_SAFE_INTEGER);
  var MIN_LONG = (cov_1j45dhj34n().s[22]++, Number.MIN_SAFE_INTEGER);

  function cov_e6xla2q3n() {
    var path = "/Users/francis/workspace/mingo/lib/util.js";
    var hash = "47a8d0ac5ded6b0b61a22b7dce31f1de7368dfda";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/util.js",
      statementMap: {
        "0": {
          start: {
            line: 6,
            column: 0
          },
          end: {
            line: 46,
            column: 1
          }
        },
        "1": {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 45,
            column: 7
          }
        },
        "2": {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 11,
            column: 13
          }
        },
        "3": {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 69
          }
        },
        "4": {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 32
          }
        },
        "5": {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 36
          }
        },
        "6": {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        },
        "7": {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 29
          }
        },
        "8": {
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 22,
            column: 33
          }
        },
        "9": {
          start: {
            line: 28,
            column: 20
          },
          end: {
            line: 28,
            column: 63
          }
        },
        "10": {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 107
          }
        },
        "11": {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        "12": {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 38,
            column: 17
          }
        },
        "13": {
          start: {
            line: 37,
            column: 20
          },
          end: {
            line: 37,
            column: 32
          }
        },
        "14": {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 20
          }
        },
        "15": {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 25
          }
        },
        "16": {
          start: {
            line: 47,
            column: 18
          },
          end: {
            line: 47,
            column: 38
          }
        },
        "17": {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 50,
            column: 21
          }
        },
        "18": {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 21
          }
        },
        "19": {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        "20": {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 48
          }
        },
        "21": {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 56
          }
        },
        "22": {
          start: {
            line: 61,
            column: 17
          },
          end: {
            line: 61,
            column: 28
          }
        },
        "23": {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 69,
            column: 29
          }
        },
        "24": {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 29
          }
        },
        "25": {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 71,
            column: 38
          }
        },
        "26": {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 38
          }
        },
        "27": {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 15
          }
        },
        "28": {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 76,
            column: 22
          }
        },
        "29": {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 76,
            column: 22
          }
        },
        "30": {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 78,
            column: 27
          }
        },
        "31": {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 27
          }
        },
        "32": {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 30
          }
        },
        "33": {
          start: {
            line: 81,
            column: 28
          },
          end: {
            line: 81,
            column: 60
          }
        },
        "34": {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 82,
            column: 61
          }
        },
        "35": {
          start: {
            line: 83,
            column: 30
          },
          end: {
            line: 83,
            column: 59
          }
        },
        "36": {
          start: {
            line: 84,
            column: 30
          },
          end: {
            line: 84,
            column: 72
          }
        },
        "37": {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 65
          }
        },
        "38": {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 64
          }
        },
        "39": {
          start: {
            line: 86,
            column: 30
          },
          end: {
            line: 86,
            column: 69
          }
        },
        "40": {
          start: {
            line: 87,
            column: 34
          },
          end: {
            line: 87,
            column: 57
          }
        },
        "41": {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 88,
            column: 56
          }
        },
        "42": {
          start: {
            line: 89,
            column: 30
          },
          end: {
            line: 89,
            column: 60
          }
        },
        "43": {
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 63
          }
        },
        "44": {
          start: {
            line: 91,
            column: 27
          },
          end: {
            line: 91,
            column: 64
          }
        },
        "45": {
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 92,
            column: 46
          }
        },
        "46": {
          start: {
            line: 93,
            column: 33
          },
          end: {
            line: 93,
            column: 56
          }
        },
        "47": {
          start: {
            line: 94,
            column: 37
          },
          end: {
            line: 94,
            column: 63
          }
        },
        "48": {
          start: {
            line: 95,
            column: 40
          },
          end: {
            line: 95,
            column: 67
          }
        },
        "49": {
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 96,
            column: 43
          }
        },
        "50": {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 100,
            column: 50
          }
        },
        "51": {
          start: {
            line: 103,
            column: 33
          },
          end: {
            line: 103,
            column: 69
          }
        },
        "52": {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 104,
            column: 65
          }
        },
        "53": {
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 44
          }
        },
        "54": {
          start: {
            line: 106,
            column: 20
          },
          end: {
            line: 106,
            column: 31
          }
        },
        "55": {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        "56": {
          start: {
            line: 117,
            column: 18
          },
          end: {
            line: 117,
            column: 21
          }
        },
        "57": {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        "58": {
          start: {
            line: 118,
            column: 21
          },
          end: {
            line: 118,
            column: 22
          }
        },
        "59": {
          start: {
            line: 118,
            column: 30
          },
          end: {
            line: 118,
            column: 40
          }
        },
        "60": {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 120,
            column: 22
          }
        },
        "61": {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 22
          }
        },
        "62": {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        "63": {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        "64": {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 127,
            column: 26
          }
        },
        "65": {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 26
          }
        },
        "66": {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 14
          }
        },
        "67": {
          start: {
            line: 141,
            column: 18
          },
          end: {
            line: 141,
            column: 27
          }
        },
        "68": {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        "69": {
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 142,
            column: 18
          }
        },
        "70": {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 143,
            column: 26
          }
        },
        "71": {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 29
          }
        },
        "72": {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 13
          }
        },
        "73": {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 159,
            column: 19
          }
        },
        "74": {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 19
          }
        },
        "75": {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 161,
            column: 22
          }
        },
        "76": {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 161,
            column: 22
          }
        },
        "77": {
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 32
          }
        },
        "78": {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        "79": {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 164,
            column: 70
          }
        },
        "80": {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 47
          }
        },
        "81": {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        "82": {
          start: {
            line: 169,
            column: 21
          },
          end: {
            line: 169,
            column: 27
          }
        },
        "83": {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 170,
            column: 23
          }
        },
        "84": {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        "85": {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        },
        "86": {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        },
        "87": {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        "88": {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 175,
            column: 68
          }
        },
        "89": {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        "90": {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 178,
            column: 38
          }
        },
        "91": {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 43
          }
        },
        "92": {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 193,
            column: 11
          }
        },
        "93": {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        "94": {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 188,
            column: 62
          }
        },
        "95": {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 191,
            column: 35
          }
        },
        "96": {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 18
          }
        },
        "97": {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        "98": {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 206,
            column: 50
          }
        },
        "99": {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 80
          }
        },
        "100": {
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 78
          }
        },
        "101": {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 23
          }
        },
        "102": {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 220,
            column: 33
          }
        },
        "103": {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 56
          }
        },
        "104": {
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 54
          }
        },
        "105": {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 68
          }
        },
        "106": {
          start: {
            line: 240,
            column: 14
          },
          end: {
            line: 240,
            column: 16
          }
        },
        "107": {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        "108": {
          start: {
            line: 242,
            column: 21
          },
          end: {
            line: 242,
            column: 22
          }
        },
        "109": {
          start: {
            line: 242,
            column: 30
          },
          end: {
            line: 242,
            column: 39
          }
        },
        "110": {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        "111": {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 56
          }
        },
        "112": {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 247,
            column: 32
          }
        },
        "113": {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 24
          }
        },
        "114": {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 15
          }
        },
        "115": {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 261,
            column: 19
          }
        },
        "116": {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 261,
            column: 19
          }
        },
        "117": {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 263,
            column: 21
          }
        },
        "118": {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 263,
            column: 21
          }
        },
        "119": {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 15
          }
        },
        "120": {
          start: {
            line: 274,
            column: 14
          },
          end: {
            line: 274,
            column: 17
          }
        },
        "121": {
          start: {
            line: 275,
            column: 14
          },
          end: {
            line: 275,
            column: 17
          }
        },
        "122": {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        "123": {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 277,
            column: 22
          }
        },
        "124": {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 22
          }
        },
        "125": {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 281,
            column: 21
          }
        },
        "126": {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 21
          }
        },
        "127": {
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 283,
            column: 28
          }
        },
        "128": {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 285,
            column: 25
          }
        },
        "129": {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 285,
            column: 25
          }
        },
        "130": {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        "131": {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 288,
            column: 29
          }
        },
        "132": {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 288,
            column: 29
          }
        },
        "133": {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 25
          }
        },
        "134": {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 25
          }
        },
        "135": {
          start: {
            line: 292,
            column: 13
          },
          end: {
            line: 319,
            column: 9
          }
        },
        "136": {
          start: {
            line: 294,
            column: 21
          },
          end: {
            line: 294,
            column: 28
          }
        },
        "137": {
          start: {
            line: 295,
            column: 21
          },
          end: {
            line: 295,
            column: 28
          }
        },
        "138": {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 298,
            column: 29
          }
        },
        "139": {
          start: {
            line: 298,
            column: 16
          },
          end: {
            line: 298,
            column: 29
          }
        },
        "140": {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 22
          }
        },
        "141": {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 301,
            column: 22
          }
        },
        "142": {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        "143": {
          start: {
            line: 303,
            column: 25
          },
          end: {
            line: 303,
            column: 26
          }
        },
        "144": {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 303,
            column: 43
          }
        },
        "145": {
          start: {
            line: 304,
            column: 33
          },
          end: {
            line: 304,
            column: 38
          }
        },
        "146": {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        "147": {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 306,
            column: 33
          }
        },
        "148": {
          start: {
            line: 310,
            column: 20
          },
          end: {
            line: 310,
            column: 44
          }
        },
        "149": {
          start: {
            line: 311,
            column: 20
          },
          end: {
            line: 311,
            column: 44
          }
        },
        "150": {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 318,
            column: 29
          }
        },
        "151": {
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 318,
            column: 29
          }
        },
        "152": {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 28
          }
        },
        "153": {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 14
          }
        },
        "154": {
          start: {
            line: 363,
            column: 14
          },
          end: {
            line: 363,
            column: 16
          }
        },
        "155": {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 370,
            column: 7
          }
        },
        "156": {
          start: {
            line: 365,
            column: 16
          },
          end: {
            line: 365,
            column: 30
          }
        },
        "157": {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        "158": {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 367,
            column: 27
          }
        },
        "159": {
          start: {
            line: 368,
            column: 12
          },
          end: {
            line: 368,
            column: 21
          }
        },
        "160": {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 15
          }
        },
        "161": {
          start: {
            line: 380,
            column: 15
          },
          end: {
            line: 380,
            column: 28
          }
        },
        "162": {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        "163": {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 385,
            column: 36
          }
        },
        "164": {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 387,
            column: 41
          }
        },
        "165": {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 389,
            column: 39
          }
        },
        "166": {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 24
          }
        },
        "167": {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 394,
            column: 49
          }
        },
        "168": {
          start: {
            line: 396,
            column: 25
          },
          end: {
            line: 396,
            column: 71
          }
        },
        "169": {
          start: {
            line: 397,
            column: 26
          },
          end: {
            line: 397,
            column: 37
          }
        },
        "170": {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 398,
            column: 27
          }
        },
        "171": {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 399,
            column: 93
          }
        },
        "172": {
          start: {
            line: 399,
            column: 51
          },
          end: {
            line: 399,
            column: 85
          }
        },
        "173": {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 412,
            column: 20
          }
        },
        "174": {
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 412,
            column: 20
          }
        },
        "175": {
          start: {
            line: 413,
            column: 15
          },
          end: {
            line: 413,
            column: 16
          }
        },
        "176": {
          start: {
            line: 414,
            column: 12
          },
          end: {
            line: 414,
            column: 25
          }
        },
        "177": {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 20
          }
        },
        "178": {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 417,
            column: 56
          }
        },
        "179": {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 417,
            column: 56
          }
        },
        "180": {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 22
          }
        },
        "181": {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 427,
            column: 18
          }
        },
        "182": {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 427,
            column: 18
          }
        },
        "183": {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 429,
            column: 17
          }
        },
        "184": {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 429,
            column: 17
          }
        },
        "185": {
          start: {
            line: 430,
            column: 4
          },
          end: {
            line: 430,
            column: 13
          }
        },
        "186": {
          start: {
            line: 443,
            column: 17
          },
          end: {
            line: 443,
            column: 19
          }
        },
        "187": {
          start: {
            line: 444,
            column: 17
          },
          end: {
            line: 444,
            column: 19
          }
        },
        "188": {
          start: {
            line: 445,
            column: 15
          },
          end: {
            line: 445,
            column: 25
          }
        },
        "189": {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 25
          }
        },
        "190": {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 448,
            column: 26
          }
        },
        "191": {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 448,
            column: 26
          }
        },
        "192": {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        "193": {
          start: {
            line: 449,
            column: 17
          },
          end: {
            line: 449,
            column: 18
          }
        },
        "194": {
          start: {
            line: 450,
            column: 18
          },
          end: {
            line: 450,
            column: 31
          }
        },
        "195": {
          start: {
            line: 451,
            column: 18
          },
          end: {
            line: 451,
            column: 28
          }
        },
        "196": {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 464,
            column: 9
          }
        },
        "197": {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 454,
            column: 29
          }
        },
        "198": {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        },
        "199": {
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 36
          }
        },
        "200": {
          start: {
            line: 461,
            column: 16
          },
          end: {
            line: 461,
            column: 34
          }
        },
        "201": {
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 463,
            column: 29
          }
        },
        "202": {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 21
          }
        },
        "203": {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        "204": {
          start: {
            line: 468,
            column: 17
          },
          end: {
            line: 468,
            column: 18
          }
        },
        "205": {
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 469,
            column: 38
          }
        },
        "206": {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 18
          }
        },
        "207": {
          start: {
            line: 481,
            column: 17
          },
          end: {
            line: 484,
            column: 5
          }
        },
        "208": {
          start: {
            line: 485,
            column: 17
          },
          end: {
            line: 485,
            column: 19
          }
        },
        "209": {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 498,
            column: 7
          }
        },
        "210": {
          start: {
            line: 487,
            column: 18
          },
          end: {
            line: 487,
            column: 25
          }
        },
        "211": {
          start: {
            line: 488,
            column: 19
          },
          end: {
            line: 488,
            column: 32
          }
        },
        "212": {
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 489,
            column: 22
          }
        },
        "213": {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 495,
            column: 9
          }
        },
        "214": {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 491,
            column: 39
          }
        },
        "215": {
          start: {
            line: 492,
            column: 12
          },
          end: {
            line: 492,
            column: 33
          }
        },
        "216": {
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 493,
            column: 34
          }
        },
        "217": {
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 494,
            column: 35
          }
        },
        "218": {
          start: {
            line: 496,
            column: 8
          },
          end: {
            line: 496,
            column: 29
          }
        },
        "219": {
          start: {
            line: 497,
            column: 8
          },
          end: {
            line: 497,
            column: 39
          }
        },
        "220": {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 18
          }
        },
        "221": {
          start: {
            line: 508,
            column: 4
          },
          end: {
            line: 508,
            column: 32
          }
        },
        "222": {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 18
          }
        },
        "223": {
          start: {
            line: 519,
            column: 13
          },
          end: {
            line: 519,
            column: 14
          }
        },
        "224": {
          start: {
            line: 520,
            column: 13
          },
          end: {
            line: 520,
            column: 29
          }
        },
        "225": {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        "226": {
          start: {
            line: 522,
            column: 18
          },
          end: {
            line: 522,
            column: 48
          }
        },
        "227": {
          start: {
            line: 523,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        },
        "228": {
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 524,
            column: 25
          }
        },
        "229": {
          start: {
            line: 526,
            column: 13
          },
          end: {
            line: 531,
            column: 9
          }
        },
        "230": {
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 527,
            column: 25
          }
        },
        "231": {
          start: {
            line: 530,
            column: 12
          },
          end: {
            line: 530,
            column: 23
          }
        },
        "232": {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 14
          }
        },
        "233": {
          start: {
            line: 544,
            column: 4
          },
          end: {
            line: 552,
            column: 25
          }
        },
        "234": {
          start: {
            line: 545,
            column: 8
          },
          end: {
            line: 551,
            column: 10
          }
        },
        "235": {
          start: {
            line: 546,
            column: 22
          },
          end: {
            line: 546,
            column: 36
          }
        },
        "236": {
          start: {
            line: 547,
            column: 12
          },
          end: {
            line: 549,
            column: 13
          }
        },
        "237": {
          start: {
            line: 548,
            column: 16
          },
          end: {
            line: 548,
            column: 49
          }
        },
        "238": {
          start: {
            line: 550,
            column: 12
          },
          end: {
            line: 550,
            column: 29
          }
        },
        "239": {
          start: {
            line: 563,
            column: 4
          },
          end: {
            line: 563,
            column: 54
          }
        },
        "240": {
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 572,
            column: 17
          }
        },
        "241": {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 576,
            column: 5
          }
        },
        "242": {
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 575,
            column: 46
          }
        },
        "243": {
          start: {
            line: 578,
            column: 20
          },
          end: {
            line: 578,
            column: 21
          }
        },
        "244": {
          start: {
            line: 579,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        },
        "245": {
          start: {
            line: 579,
            column: 21
          },
          end: {
            line: 579,
            column: 22
          }
        },
        "246": {
          start: {
            line: 580,
            column: 24
          },
          end: {
            line: 580,
            column: 31
          }
        },
        "247": {
          start: {
            line: 581,
            column: 25
          },
          end: {
            line: 581,
            column: 54
          }
        },
        "248": {
          start: {
            line: 582,
            column: 12
          },
          end: {
            line: 600,
            column: 13
          }
        },
        "249": {
          start: {
            line: 586,
            column: 16
          },
          end: {
            line: 587,
            column: 26
          }
        },
        "250": {
          start: {
            line: 587,
            column: 20
          },
          end: {
            line: 587,
            column: 26
          }
        },
        "251": {
          start: {
            line: 588,
            column: 16
          },
          end: {
            line: 588,
            column: 27
          }
        },
        "252": {
          start: {
            line: 589,
            column: 16
          },
          end: {
            line: 589,
            column: 37
          }
        },
        "253": {
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 595,
            column: 23
          }
        },
        "254": {
          start: {
            line: 591,
            column: 28
          },
          end: {
            line: 591,
            column: 48
          }
        },
        "255": {
          start: {
            line: 592,
            column: 20
          },
          end: {
            line: 593,
            column: 36
          }
        },
        "256": {
          start: {
            line: 593,
            column: 24
          },
          end: {
            line: 593,
            column: 36
          }
        },
        "257": {
          start: {
            line: 594,
            column: 20
          },
          end: {
            line: 594,
            column: 31
          }
        },
        "258": {
          start: {
            line: 596,
            column: 16
          },
          end: {
            line: 596,
            column: 22
          }
        },
        "259": {
          start: {
            line: 599,
            column: 16
          },
          end: {
            line: 599,
            column: 47
          }
        },
        "260": {
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 602,
            column: 22
          }
        },
        "261": {
          start: {
            line: 602,
            column: 16
          },
          end: {
            line: 602,
            column: 22
          }
        },
        "262": {
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 604,
            column: 21
          }
        },
        "263": {
          start: {
            line: 606,
            column: 4
          },
          end: {
            line: 606,
            column: 91
          }
        },
        "264": {
          start: {
            line: 607,
            column: 4
          },
          end: {
            line: 609,
            column: 14
          }
        },
        "265": {
          start: {
            line: 620,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        "266": {
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 621,
            column: 51
          }
        },
        "267": {
          start: {
            line: 623,
            column: 16
          },
          end: {
            line: 623,
            column: 35
          }
        },
        "268": {
          start: {
            line: 624,
            column: 14
          },
          end: {
            line: 624,
            column: 22
          }
        },
        "269": {
          start: {
            line: 626,
            column: 15
          },
          end: {
            line: 626,
            column: 39
          }
        },
        "270": {
          start: {
            line: 627,
            column: 18
          },
          end: {
            line: 627,
            column: 45
          }
        },
        "271": {
          start: {
            line: 628,
            column: 18
          },
          end: {
            line: 628,
            column: 34
          }
        },
        "272": {
          start: {
            line: 631,
            column: 4
          },
          end: {
            line: 664,
            column: 5
          }
        },
        "273": {
          start: {
            line: 632,
            column: 8
          },
          end: {
            line: 653,
            column: 9
          }
        },
        "274": {
          start: {
            line: 633,
            column: 12
          },
          end: {
            line: 633,
            column: 48
          }
        },
        "275": {
          start: {
            line: 634,
            column: 12
          },
          end: {
            line: 636,
            column: 13
          }
        },
        "276": {
          start: {
            line: 635,
            column: 16
          },
          end: {
            line: 635,
            column: 59
          }
        },
        "277": {
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 637,
            column: 30
          }
        },
        "278": {
          start: {
            line: 640,
            column: 12
          },
          end: {
            line: 640,
            column: 24
          }
        },
        "279": {
          start: {
            line: 641,
            column: 12
          },
          end: {
            line: 652,
            column: 15
          }
        },
        "280": {
          start: {
            line: 642,
            column: 16
          },
          end: {
            line: 642,
            column: 60
          }
        },
        "281": {
          start: {
            line: 643,
            column: 16
          },
          end: {
            line: 651,
            column: 17
          }
        },
        "282": {
          start: {
            line: 644,
            column: 20
          },
          end: {
            line: 646,
            column: 21
          }
        },
        "283": {
          start: {
            line: 645,
            column: 24
          },
          end: {
            line: 645,
            column: 40
          }
        },
        "284": {
          start: {
            line: 647,
            column: 20
          },
          end: {
            line: 647,
            column: 39
          }
        },
        "285": {
          start: {
            line: 649,
            column: 21
          },
          end: {
            line: 651,
            column: 17
          }
        },
        "286": {
          start: {
            line: 650,
            column: 20
          },
          end: {
            line: 650,
            column: 39
          }
        },
        "287": {
          start: {
            line: 656,
            column: 8
          },
          end: {
            line: 656,
            column: 35
          }
        },
        "288": {
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 659,
            column: 9
          }
        },
        "289": {
          start: {
            line: 658,
            column: 12
          },
          end: {
            line: 658,
            column: 53
          }
        },
        "290": {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 661,
            column: 29
          }
        },
        "291": {
          start: {
            line: 661,
            column: 12
          },
          end: {
            line: 661,
            column: 29
          }
        },
        "292": {
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 662,
            column: 20
          }
        },
        "293": {
          start: {
            line: 663,
            column: 8
          },
          end: {
            line: 663,
            column: 28
          }
        },
        "294": {
          start: {
            line: 665,
            column: 4
          },
          end: {
            line: 665,
            column: 18
          }
        },
        "295": {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 688,
            column: 5
          }
        },
        "296": {
          start: {
            line: 673,
            column: 8
          },
          end: {
            line: 680,
            column: 9
          }
        },
        "297": {
          start: {
            line: 673,
            column: 21
          },
          end: {
            line: 673,
            column: 35
          }
        },
        "298": {
          start: {
            line: 674,
            column: 12
          },
          end: {
            line: 679,
            column: 13
          }
        },
        "299": {
          start: {
            line: 675,
            column: 16
          },
          end: {
            line: 675,
            column: 33
          }
        },
        "300": {
          start: {
            line: 678,
            column: 16
          },
          end: {
            line: 678,
            column: 38
          }
        },
        "301": {
          start: {
            line: 682,
            column: 9
          },
          end: {
            line: 688,
            column: 5
          }
        },
        "302": {
          start: {
            line: 683,
            column: 8
          },
          end: {
            line: 687,
            column: 9
          }
        },
        "303": {
          start: {
            line: 684,
            column: 12
          },
          end: {
            line: 686,
            column: 13
          }
        },
        "304": {
          start: {
            line: 685,
            column: 16
          },
          end: {
            line: 685,
            column: 38
          }
        },
        "305": {
          start: {
            line: 689,
            column: 4
          },
          end: {
            line: 689,
            column: 15
          }
        },
        "306": {
          start: {
            line: 700,
            column: 16
          },
          end: {
            line: 700,
            column: 35
          }
        },
        "307": {
          start: {
            line: 701,
            column: 14
          },
          end: {
            line: 701,
            column: 22
          }
        },
        "308": {
          start: {
            line: 702,
            column: 15
          },
          end: {
            line: 702,
            column: 39
          }
        },
        "309": {
          start: {
            line: 703,
            column: 4
          },
          end: {
            line: 712,
            column: 5
          }
        },
        "310": {
          start: {
            line: 704,
            column: 8
          },
          end: {
            line: 704,
            column: 21
          }
        },
        "311": {
          start: {
            line: 708,
            column: 8
          },
          end: {
            line: 710,
            column: 9
          }
        },
        "312": {
          start: {
            line: 709,
            column: 12
          },
          end: {
            line: 709,
            column: 26
          }
        },
        "313": {
          start: {
            line: 711,
            column: 8
          },
          end: {
            line: 711,
            column: 44
          }
        },
        "314": {
          start: {
            line: 722,
            column: 4
          },
          end: {
            line: 724,
            column: 13
          }
        },
        "315": {
          start: {
            line: 723,
            column: 8
          },
          end: {
            line: 723,
            column: 26
          }
        },
        "316": {
          start: {
            line: 727,
            column: 4
          },
          end: {
            line: 734,
            column: 7
          }
        },
        "317": {
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 733,
            column: 9
          }
        },
        "318": {
          start: {
            line: 729,
            column: 12
          },
          end: {
            line: 729,
            column: 42
          }
        },
        "319": {
          start: {
            line: 731,
            column: 13
          },
          end: {
            line: 733,
            column: 9
          }
        },
        "320": {
          start: {
            line: 732,
            column: 12
          },
          end: {
            line: 732,
            column: 29
          }
        },
        "321": {
          start: {
            line: 742,
            column: 4
          },
          end: {
            line: 742,
            column: 37
          }
        },
        "322": {
          start: {
            line: 746,
            column: 4
          },
          end: {
            line: 746,
            column: 47
          }
        },
        "323": {
          start: {
            line: 747,
            column: 4
          },
          end: {
            line: 747,
            column: 46
          }
        },
        "324": {
          start: {
            line: 748,
            column: 4
          },
          end: {
            line: 748,
            column: 43
          }
        },
        "325": {
          start: {
            line: 749,
            column: 4
          },
          end: {
            line: 749,
            column: 21
          }
        },
        "326": {
          start: {
            line: 758,
            column: 4
          },
          end: {
            line: 760,
            column: 5
          }
        },
        "327": {
          start: {
            line: 759,
            column: 8
          },
          end: {
            line: 759,
            column: 69
          }
        },
        "328": {
          start: {
            line: 762,
            column: 4
          },
          end: {
            line: 788,
            column: 5
          }
        },
        "329": {
          start: {
            line: 763,
            column: 23
          },
          end: {
            line: 763,
            column: 33
          }
        },
        "330": {
          start: {
            line: 765,
            column: 8
          },
          end: {
            line: 767,
            column: 9
          }
        },
        "331": {
          start: {
            line: 766,
            column: 12
          },
          end: {
            line: 766,
            column: 35
          }
        },
        "332": {
          start: {
            line: 769,
            column: 8
          },
          end: {
            line: 787,
            column: 9
          }
        },
        "333": {
          start: {
            line: 770,
            column: 24
          },
          end: {
            line: 770,
            column: 50
          }
        },
        "334": {
          start: {
            line: 771,
            column: 26
          },
          end: {
            line: 771,
            column: 48
          }
        },
        "335": {
          start: {
            line: 774,
            column: 12
          },
          end: {
            line: 779,
            column: 13
          }
        },
        "336": {
          start: {
            line: 775,
            column: 16
          },
          end: {
            line: 775,
            column: 38
          }
        },
        "337": {
          start: {
            line: 778,
            column: 16
          },
          end: {
            line: 778,
            column: 31
          }
        },
        "338": {
          start: {
            line: 780,
            column: 12
          },
          end: {
            line: 784,
            column: 15
          }
        },
        "339": {
          start: {
            line: 785,
            column: 12
          },
          end: {
            line: 785,
            column: 57
          }
        },
        "340": {
          start: {
            line: 786,
            column: 12
          },
          end: {
            line: 786,
            column: 36
          }
        },
        "341": {
          start: {
            line: 789,
            column: 4
          },
          end: {
            line: 789,
            column: 16
          }
        },
        "342": {
          start: {
            line: 802,
            column: 4
          },
          end: {
            line: 818,
            column: 5
          }
        },
        "343": {
          start: {
            line: 803,
            column: 8
          },
          end: {
            line: 810,
            column: 9
          }
        },
        "344": {
          start: {
            line: 804,
            column: 12
          },
          end: {
            line: 804,
            column: 49
          }
        },
        "345": {
          start: {
            line: 805,
            column: 12
          },
          end: {
            line: 805,
            column: 41
          }
        },
        "346": {
          start: {
            line: 808,
            column: 12
          },
          end: {
            line: 808,
            column: 25
          }
        },
        "347": {
          start: {
            line: 809,
            column: 12
          },
          end: {
            line: 809,
            column: 21
          }
        },
        "348": {
          start: {
            line: 813,
            column: 8
          },
          end: {
            line: 815,
            column: 9
          }
        },
        "349": {
          start: {
            line: 814,
            column: 12
          },
          end: {
            line: 814,
            column: 49
          }
        },
        "350": {
          start: {
            line: 816,
            column: 8
          },
          end: {
            line: 816,
            column: 105
          }
        },
        "351": {
          start: {
            line: 817,
            column: 8
          },
          end: {
            line: 817,
            column: 22
          }
        },
        "352": {
          start: {
            line: 819,
            column: 4
          },
          end: {
            line: 819,
            column: 33
          }
        },
        "353": {
          start: {
            line: 828,
            column: 14
          },
          end: {
            line: 828,
            column: 50
          }
        },
        "354": {
          start: {
            line: 828,
            column: 39
          },
          end: {
            line: 828,
            column: 46
          }
        },
        "355": {
          start: {
            line: 829,
            column: 12
          },
          end: {
            line: 829,
            column: 28
          }
        },
        "356": {
          start: {
            line: 830,
            column: 21
          },
          end: {
            line: 830,
            column: 40
          }
        },
        "357": {
          start: {
            line: 831,
            column: 14
          },
          end: {
            line: 831,
            column: 21
          }
        },
        "358": {
          start: {
            line: 832,
            column: 4
          },
          end: {
            line: 832,
            column: 97
          }
        },
        "359": {
          start: {
            line: 832,
            column: 46
          },
          end: {
            line: 832,
            column: 72
          }
        },
        "360": {
          start: {
            line: 838,
            column: 4
          },
          end: {
            line: 865,
            column: 6
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 8,
              column: 15
            },
            end: {
              line: 8,
              column: 16
            }
          },
          loc: {
            start: {
              line: 8,
              column: 49
            },
            end: {
              line: 44,
              column: 9
            }
          },
          line: 8
        },
        "1": {
          name: "sameValueZero",
          decl: {
            start: {
              line: 29,
              column: 21
            },
            end: {
              line: 29,
              column: 34
            }
          },
          loc: {
            start: {
              line: 29,
              column: 41
            },
            end: {
              line: 31,
              column: 13
            }
          },
          line: 29
        },
        "2": {
          name: "assert",
          decl: {
            start: {
              line: 48,
              column: 16
            },
            end: {
              line: 48,
              column: 22
            }
          },
          loc: {
            start: {
              line: 48,
              column: 43
            },
            end: {
              line: 51,
              column: 1
            }
          },
          line: 48
        },
        "3": {
          name: "cloneDeep",
          decl: {
            start: {
              line: 55,
              column: 16
            },
            end: {
              line: 55,
              column: 25
            }
          },
          loc: {
            start: {
              line: 55,
              column: 31
            },
            end: {
              line: 63,
              column: 1
            }
          },
          line: 55
        },
        "4": {
          name: "clone",
          decl: {
            start: {
              line: 67,
              column: 16
            },
            end: {
              line: 67,
              column: 21
            }
          },
          loc: {
            start: {
              line: 67,
              column: 27
            },
            end: {
              line: 73,
              column: 1
            }
          },
          line: 67
        },
        "5": {
          name: "getType",
          decl: {
            start: {
              line: 74,
              column: 16
            },
            end: {
              line: 74,
              column: 23
            }
          },
          loc: {
            start: {
              line: 74,
              column: 27
            },
            end: {
              line: 80,
              column: 1
            }
          },
          line: 74
        },
        "6": {
          name: "jsType",
          decl: {
            start: {
              line: 81,
              column: 16
            },
            end: {
              line: 81,
              column: 22
            }
          },
          loc: {
            start: {
              line: 81,
              column: 26
            },
            end: {
              line: 81,
              column: 62
            }
          },
          line: 81
        },
        "7": {
          name: "isBoolean",
          decl: {
            start: {
              line: 82,
              column: 16
            },
            end: {
              line: 82,
              column: 25
            }
          },
          loc: {
            start: {
              line: 82,
              column: 29
            },
            end: {
              line: 82,
              column: 63
            }
          },
          line: 82
        },
        "8": {
          name: "isString",
          decl: {
            start: {
              line: 83,
              column: 16
            },
            end: {
              line: 83,
              column: 24
            }
          },
          loc: {
            start: {
              line: 83,
              column: 28
            },
            end: {
              line: 83,
              column: 61
            }
          },
          line: 83
        },
        "9": {
          name: "isNumber",
          decl: {
            start: {
              line: 84,
              column: 16
            },
            end: {
              line: 84,
              column: 24
            }
          },
          loc: {
            start: {
              line: 84,
              column: 28
            },
            end: {
              line: 84,
              column: 74
            }
          },
          line: 84
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 85,
              column: 41
            },
            end: {
              line: 85,
              column: 42
            }
          },
          loc: {
            start: {
              line: 85,
              column: 46
            },
            end: {
              line: 85,
              column: 64
            }
          },
          line: 85
        },
        "11": {
          name: "isObject",
          decl: {
            start: {
              line: 86,
              column: 16
            },
            end: {
              line: 86,
              column: 24
            }
          },
          loc: {
            start: {
              line: 86,
              column: 28
            },
            end: {
              line: 86,
              column: 71
            }
          },
          line: 86
        },
        "12": {
          name: "isObjectLike",
          decl: {
            start: {
              line: 87,
              column: 16
            },
            end: {
              line: 87,
              column: 28
            }
          },
          loc: {
            start: {
              line: 87,
              column: 32
            },
            end: {
              line: 87,
              column: 59
            }
          },
          line: 87
        },
        "13": {
          name: "isDate",
          decl: {
            start: {
              line: 88,
              column: 16
            },
            end: {
              line: 88,
              column: 22
            }
          },
          loc: {
            start: {
              line: 88,
              column: 26
            },
            end: {
              line: 88,
              column: 58
            }
          },
          line: 88
        },
        "14": {
          name: "isRegExp",
          decl: {
            start: {
              line: 89,
              column: 16
            },
            end: {
              line: 89,
              column: 24
            }
          },
          loc: {
            start: {
              line: 89,
              column: 28
            },
            end: {
              line: 89,
              column: 62
            }
          },
          line: 89
        },
        "15": {
          name: "isFunction",
          decl: {
            start: {
              line: 90,
              column: 16
            },
            end: {
              line: 90,
              column: 26
            }
          },
          loc: {
            start: {
              line: 90,
              column: 30
            },
            end: {
              line: 90,
              column: 65
            }
          },
          line: 90
        },
        "16": {
          name: "isNil",
          decl: {
            start: {
              line: 91,
              column: 16
            },
            end: {
              line: 91,
              column: 21
            }
          },
          loc: {
            start: {
              line: 91,
              column: 25
            },
            end: {
              line: 91,
              column: 66
            }
          },
          line: 91
        },
        "17": {
          name: "isNull",
          decl: {
            start: {
              line: 92,
              column: 16
            },
            end: {
              line: 92,
              column: 22
            }
          },
          loc: {
            start: {
              line: 92,
              column: 26
            },
            end: {
              line: 92,
              column: 48
            }
          },
          line: 92
        },
        "18": {
          name: "isUndefined",
          decl: {
            start: {
              line: 93,
              column: 16
            },
            end: {
              line: 93,
              column: 27
            }
          },
          loc: {
            start: {
              line: 93,
              column: 31
            },
            end: {
              line: 93,
              column: 58
            }
          },
          line: 93
        },
        "19": {
          name: "inArray",
          decl: {
            start: {
              line: 94,
              column: 16
            },
            end: {
              line: 94,
              column: 23
            }
          },
          loc: {
            start: {
              line: 94,
              column: 35
            },
            end: {
              line: 94,
              column: 65
            }
          },
          line: 94
        },
        "20": {
          name: "notInArray",
          decl: {
            start: {
              line: 95,
              column: 16
            },
            end: {
              line: 95,
              column: 26
            }
          },
          loc: {
            start: {
              line: 95,
              column: 38
            },
            end: {
              line: 95,
              column: 69
            }
          },
          line: 95
        },
        "21": {
          name: "truthy",
          decl: {
            start: {
              line: 96,
              column: 16
            },
            end: {
              line: 96,
              column: 22
            }
          },
          loc: {
            start: {
              line: 96,
              column: 28
            },
            end: {
              line: 96,
              column: 45
            }
          },
          line: 96
        },
        "22": {
          name: "isEmpty",
          decl: {
            start: {
              line: 97,
              column: 16
            },
            end: {
              line: 97,
              column: 23
            }
          },
          loc: {
            start: {
              line: 97,
              column: 27
            },
            end: {
              line: 101,
              column: 1
            }
          },
          line: 97
        },
        "23": {
          name: "ensureArray",
          decl: {
            start: {
              line: 103,
              column: 16
            },
            end: {
              line: 103,
              column: 27
            }
          },
          loc: {
            start: {
              line: 103,
              column: 31
            },
            end: {
              line: 103,
              column: 71
            }
          },
          line: 103
        },
        "24": {
          name: "has",
          decl: {
            start: {
              line: 104,
              column: 16
            },
            end: {
              line: 104,
              column: 19
            }
          },
          loc: {
            start: {
              line: 104,
              column: 31
            },
            end: {
              line: 104,
              column: 67
            }
          },
          line: 104
        },
        "25": {
          name: "err",
          decl: {
            start: {
              line: 105,
              column: 16
            },
            end: {
              line: 105,
              column: 19
            }
          },
          loc: {
            start: {
              line: 105,
              column: 23
            },
            end: {
              line: 105,
              column: 46
            }
          },
          line: 105
        },
        "26": {
          name: "each",
          decl: {
            start: {
              line: 115,
              column: 16
            },
            end: {
              line: 115,
              column: 20
            }
          },
          loc: {
            start: {
              line: 115,
              column: 30
            },
            end: {
              line: 131,
              column: 1
            }
          },
          line: 115
        },
        "27": {
          name: "objectMap",
          decl: {
            start: {
              line: 139,
              column: 16
            },
            end: {
              line: 139,
              column: 25
            }
          },
          loc: {
            start: {
              line: 139,
              column: 35
            },
            end: {
              line: 147,
              column: 1
            }
          },
          line: 139
        },
        "28": {
          name: "merge",
          decl: {
            start: {
              line: 156,
              column: 16
            },
            end: {
              line: 156,
              column: 21
            }
          },
          loc: {
            start: {
              line: 156,
              column: 44
            },
            end: {
              line: 196,
              column: 1
            }
          },
          line: 156
        },
        "29": {
          name: "(anonymous_29)",
          decl: {
            start: {
              line: 186,
              column: 33
            },
            end: {
              line: 186,
              column: 34
            }
          },
          loc: {
            start: {
              line: 186,
              column: 40
            },
            end: {
              line: 193,
              column: 9
            }
          },
          line: 186
        },
        "30": {
          name: "reduce",
          decl: {
            start: {
              line: 204,
              column: 16
            },
            end: {
              line: 204,
              column: 22
            }
          },
          loc: {
            start: {
              line: 204,
              column: 52
            },
            end: {
              line: 211,
              column: 1
            }
          },
          line: 204
        },
        "31": {
          name: "(anonymous_31)",
          decl: {
            start: {
              line: 209,
              column: 21
            },
            end: {
              line: 209,
              column: 22
            }
          },
          loc: {
            start: {
              line: 209,
              column: 31
            },
            end: {
              line: 209,
              column: 78
            }
          },
          line: 209
        },
        "32": {
          name: "intersection",
          decl: {
            start: {
              line: 219,
              column: 16
            },
            end: {
              line: 219,
              column: 28
            }
          },
          loc: {
            start: {
              line: 219,
              column: 37
            },
            end: {
              line: 222,
              column: 1
            }
          },
          line: 219
        },
        "33": {
          name: "(anonymous_33)",
          decl: {
            start: {
              line: 221,
              column: 21
            },
            end: {
              line: 221,
              column: 22
            }
          },
          loc: {
            start: {
              line: 221,
              column: 26
            },
            end: {
              line: 221,
              column: 54
            }
          },
          line: 221
        },
        "34": {
          name: "union",
          decl: {
            start: {
              line: 230,
              column: 16
            },
            end: {
              line: 230,
              column: 21
            }
          },
          loc: {
            start: {
              line: 230,
              column: 30
            },
            end: {
              line: 232,
              column: 1
            }
          },
          line: 230
        },
        "35": {
          name: "flatten",
          decl: {
            start: {
              line: 239,
              column: 16
            },
            end: {
              line: 239,
              column: 23
            }
          },
          loc: {
            start: {
              line: 239,
              column: 40
            },
            end: {
              line: 253,
              column: 1
            }
          },
          line: 239
        },
        "36": {
          name: "flatten2",
          decl: {
            start: {
              line: 241,
              column: 13
            },
            end: {
              line: 241,
              column: 21
            }
          },
          loc: {
            start: {
              line: 241,
              column: 32
            },
            end: {
              line: 250,
              column: 5
            }
          },
          line: 241
        },
        "37": {
          name: "unwrap",
          decl: {
            start: {
              line: 259,
              column: 16
            },
            end: {
              line: 259,
              column: 22
            }
          },
          loc: {
            start: {
              line: 259,
              column: 35
            },
            end: {
              line: 265,
              column: 1
            }
          },
          line: 259
        },
        "38": {
          name: "isEqual",
          decl: {
            start: {
              line: 273,
              column: 16
            },
            end: {
              line: 273,
              column: 23
            }
          },
          loc: {
            start: {
              line: 273,
              column: 30
            },
            end: {
              line: 355,
              column: 1
            }
          },
          line: 273
        },
        "39": {
          name: "unique",
          decl: {
            start: {
              line: 361,
              column: 16
            },
            end: {
              line: 361,
              column: 22
            }
          },
          loc: {
            start: {
              line: 361,
              column: 27
            },
            end: {
              line: 372,
              column: 1
            }
          },
          line: 361
        },
        "40": {
          name: "(anonymous_40)",
          decl: {
            start: {
              line: 364,
              column: 13
            },
            end: {
              line: 364,
              column: 14
            }
          },
          loc: {
            start: {
              line: 364,
              column: 21
            },
            end: {
              line: 370,
              column: 5
            }
          },
          line: 364
        },
        "41": {
          name: "encode",
          decl: {
            start: {
              line: 379,
              column: 16
            },
            end: {
              line: 379,
              column: 22
            }
          },
          loc: {
            start: {
              line: 379,
              column: 30
            },
            end: {
              line: 401,
              column: 1
            }
          },
          line: 379
        },
        "42": {
          name: "(anonymous_42)",
          decl: {
            start: {
              line: 399,
              column: 46
            },
            end: {
              line: 399,
              column: 47
            }
          },
          loc: {
            start: {
              line: 399,
              column: 51
            },
            end: {
              line: 399,
              column: 85
            }
          },
          line: 399
        },
        "43": {
          name: "hashCode",
          decl: {
            start: {
              line: 410,
              column: 16
            },
            end: {
              line: 410,
              column: 24
            }
          },
          loc: {
            start: {
              line: 410,
              column: 32
            },
            end: {
              line: 419,
              column: 1
            }
          },
          line: 410
        },
        "44": {
          name: "compare",
          decl: {
            start: {
              line: 425,
              column: 16
            },
            end: {
              line: 425,
              column: 23
            }
          },
          loc: {
            start: {
              line: 425,
              column: 30
            },
            end: {
              line: 431,
              column: 1
            }
          },
          line: 425
        },
        "45": {
          name: "sortBy",
          decl: {
            start: {
              line: 442,
              column: 16
            },
            end: {
              line: 442,
              column: 22
            }
          },
          loc: {
            start: {
              line: 442,
              column: 44
            },
            end: {
              line: 472,
              column: 1
            }
          },
          line: 442
        },
        "46": {
          name: "groupBy",
          decl: {
            start: {
              line: 480,
              column: 16
            },
            end: {
              line: 480,
              column: 23
            }
          },
          loc: {
            start: {
              line: 480,
              column: 40
            },
            end: {
              line: 500,
              column: 1
            }
          },
          line: 480
        },
        "47": {
          name: "(anonymous_47)",
          decl: {
            start: {
              line: 486,
              column: 21
            },
            end: {
              line: 486,
              column: 22
            }
          },
          loc: {
            start: {
              line: 486,
              column: 28
            },
            end: {
              line: 498,
              column: 5
            }
          },
          line: 486
        },
        "48": {
          name: "into",
          decl: {
            start: {
              line: 507,
              column: 16
            },
            end: {
              line: 507,
              column: 20
            }
          },
          loc: {
            start: {
              line: 507,
              column: 33
            },
            end: {
              line: 510,
              column: 1
            }
          },
          line: 507
        },
        "49": {
          name: "findInsertIndex",
          decl: {
            start: {
              line: 517,
              column: 16
            },
            end: {
              line: 517,
              column: 31
            }
          },
          loc: {
            start: {
              line: 517,
              column: 45
            },
            end: {
              line: 534,
              column: 1
            }
          },
          line: 517
        },
        "50": {
          name: "memoize",
          decl: {
            start: {
              line: 543,
              column: 16
            },
            end: {
              line: 543,
              column: 23
            }
          },
          loc: {
            start: {
              line: 543,
              column: 28
            },
            end: {
              line: 553,
              column: 1
            }
          },
          line: 543
        },
        "51": {
          name: "(anonymous_51)",
          decl: {
            start: {
              line: 544,
              column: 12
            },
            end: {
              line: 544,
              column: 13
            }
          },
          loc: {
            start: {
              line: 544,
              column: 22
            },
            end: {
              line: 552,
              column: 5
            }
          },
          line: 544
        },
        "52": {
          name: "(anonymous_52)",
          decl: {
            start: {
              line: 545,
              column: 15
            },
            end: {
              line: 545,
              column: 16
            }
          },
          loc: {
            start: {
              line: 545,
              column: 28
            },
            end: {
              line: 551,
              column: 9
            }
          },
          line: 545
        },
        "53": {
          name: "getValue",
          decl: {
            start: {
              line: 562,
              column: 16
            },
            end: {
              line: 562,
              column: 24
            }
          },
          loc: {
            start: {
              line: 562,
              column: 37
            },
            end: {
              line: 564,
              column: 1
            }
          },
          line: 562
        },
        "54": {
          name: "resolve",
          decl: {
            start: {
              line: 571,
              column: 16
            },
            end: {
              line: 571,
              column: 23
            }
          },
          loc: {
            start: {
              line: 571,
              column: 48
            },
            end: {
              line: 610,
              column: 1
            }
          },
          line: 571
        },
        "55": {
          name: "resolve2",
          decl: {
            start: {
              line: 577,
              column: 13
            },
            end: {
              line: 577,
              column: 21
            }
          },
          loc: {
            start: {
              line: 577,
              column: 31
            },
            end: {
              line: 605,
              column: 5
            }
          },
          line: 577
        },
        "56": {
          name: "(anonymous_56)",
          decl: {
            start: {
              line: 590,
              column: 38
            },
            end: {
              line: 590,
              column: 39
            }
          },
          loc: {
            start: {
              line: 590,
              column: 53
            },
            end: {
              line: 595,
              column: 17
            }
          },
          line: 590
        },
        "57": {
          name: "resolveObj",
          decl: {
            start: {
              line: 618,
              column: 16
            },
            end: {
              line: 618,
              column: 26
            }
          },
          loc: {
            start: {
              line: 618,
              column: 51
            },
            end: {
              line: 666,
              column: 1
            }
          },
          line: 618
        },
        "58": {
          name: "(anonymous_58)",
          decl: {
            start: {
              line: 641,
              column: 22
            },
            end: {
              line: 641,
              column: 23
            }
          },
          loc: {
            start: {
              line: 641,
              column: 30
            },
            end: {
              line: 652,
              column: 13
            }
          },
          line: 641
        },
        "59": {
          name: "filterMissing",
          decl: {
            start: {
              line: 671,
              column: 16
            },
            end: {
              line: 671,
              column: 29
            }
          },
          loc: {
            start: {
              line: 671,
              column: 35
            },
            end: {
              line: 690,
              column: 1
            }
          },
          line: 671
        },
        "60": {
          name: "traverse",
          decl: {
            start: {
              line: 699,
              column: 16
            },
            end: {
              line: 699,
              column: 24
            }
          },
          loc: {
            start: {
              line: 699,
              column: 51
            },
            end: {
              line: 713,
              column: 1
            }
          },
          line: 699
        },
        "61": {
          name: "setValue",
          decl: {
            start: {
              line: 721,
              column: 16
            },
            end: {
              line: 721,
              column: 24
            }
          },
          loc: {
            start: {
              line: 721,
              column: 47
            },
            end: {
              line: 725,
              column: 1
            }
          },
          line: 721
        },
        "62": {
          name: "(anonymous_62)",
          decl: {
            start: {
              line: 722,
              column: 28
            },
            end: {
              line: 722,
              column: 29
            }
          },
          loc: {
            start: {
              line: 722,
              column: 43
            },
            end: {
              line: 724,
              column: 5
            }
          },
          line: 722
        },
        "63": {
          name: "removeValue",
          decl: {
            start: {
              line: 726,
              column: 16
            },
            end: {
              line: 726,
              column: 27
            }
          },
          loc: {
            start: {
              line: 726,
              column: 43
            },
            end: {
              line: 735,
              column: 1
            }
          },
          line: 726
        },
        "64": {
          name: "(anonymous_64)",
          decl: {
            start: {
              line: 727,
              column: 28
            },
            end: {
              line: 727,
              column: 29
            }
          },
          loc: {
            start: {
              line: 727,
              column: 43
            },
            end: {
              line: 734,
              column: 5
            }
          },
          line: 727
        },
        "65": {
          name: "isOperator",
          decl: {
            start: {
              line: 741,
              column: 16
            },
            end: {
              line: 741,
              column: 26
            }
          },
          loc: {
            start: {
              line: 741,
              column: 33
            },
            end: {
              line: 743,
              column: 1
            }
          },
          line: 741
        },
        "66": {
          name: "regexOptions",
          decl: {
            start: {
              line: 744,
              column: 9
            },
            end: {
              line: 744,
              column: 21
            }
          },
          loc: {
            start: {
              line: 744,
              column: 31
            },
            end: {
              line: 750,
              column: 1
            }
          },
          line: 744
        },
        "67": {
          name: "normalize",
          decl: {
            start: {
              line: 756,
              column: 16
            },
            end: {
              line: 756,
              column: 25
            }
          },
          loc: {
            start: {
              line: 756,
              column: 32
            },
            end: {
              line: 790,
              column: 1
            }
          },
          line: 756
        },
        "68": {
          name: "slice",
          decl: {
            start: {
              line: 799,
              column: 16
            },
            end: {
              line: 799,
              column: 21
            }
          },
          loc: {
            start: {
              line: 799,
              column: 39
            },
            end: {
              line: 820,
              column: 1
            }
          },
          line: 799
        },
        "69": {
          name: "stddev",
          decl: {
            start: {
              line: 827,
              column: 16
            },
            end: {
              line: 827,
              column: 22
            }
          },
          loc: {
            start: {
              line: 827,
              column: 38
            },
            end: {
              line: 833,
              column: 1
            }
          },
          line: 827
        },
        "70": {
          name: "(anonymous_70)",
          decl: {
            start: {
              line: 828,
              column: 27
            },
            end: {
              line: 828,
              column: 28
            }
          },
          loc: {
            start: {
              line: 828,
              column: 39
            },
            end: {
              line: 828,
              column: 46
            }
          },
          line: 828
        },
        "71": {
          name: "(anonymous_71)",
          decl: {
            start: {
              line: 832,
              column: 34
            },
            end: {
              line: 832,
              column: 35
            }
          },
          loc: {
            start: {
              line: 832,
              column: 46
            },
            end: {
              line: 832,
              column: 72
            }
          },
          line: 832
        },
        "72": {
          name: "moduleApi",
          decl: {
            start: {
              line: 837,
              column: 16
            },
            end: {
              line: 837,
              column: 25
            }
          },
          loc: {
            start: {
              line: 837,
              column: 28
            },
            end: {
              line: 866,
              column: 1
            }
          },
          line: 837
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 6,
              column: 0
            },
            end: {
              line: 46,
              column: 1
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 6,
              column: 0
            },
            end: {
              line: 46,
              column: 1
            }
          }, {
            start: {
              line: 6,
              column: 0
            },
            end: {
              line: 46,
              column: 1
            }
          }],
          line: 6
        },
        "1": {
          loc: {
            start: {
              line: 9,
              column: 12
            },
            end: {
              line: 11,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 9,
              column: 12
            },
            end: {
              line: 11,
              column: 13
            }
          }, {
            start: {
              line: 9,
              column: 12
            },
            end: {
              line: 11,
              column: 13
            }
          }],
          line: 9
        },
        "2": {
          loc: {
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 19,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 19,
              column: 13
            }
          }, {
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 19,
              column: 13
            }
          }],
          line: 17
        },
        "3": {
          loc: {
            start: {
              line: 28,
              column: 29
            },
            end: {
              line: 28,
              column: 59
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 28,
              column: 38
            },
            end: {
              line: 28,
              column: 39
            }
          }, {
            start: {
              line: 28,
              column: 42
            },
            end: {
              line: 28,
              column: 59
            }
          }],
          line: 28
        },
        "4": {
          loc: {
            start: {
              line: 30,
              column: 23
            },
            end: {
              line: 30,
              column: 106
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 30,
              column: 23
            },
            end: {
              line: 30,
              column: 30
            }
          }, {
            start: {
              line: 30,
              column: 35
            },
            end: {
              line: 30,
              column: 56
            }
          }, {
            start: {
              line: 30,
              column: 60
            },
            end: {
              line: 30,
              column: 81
            }
          }, {
            start: {
              line: 30,
              column: 85
            },
            end: {
              line: 30,
              column: 93
            }
          }, {
            start: {
              line: 30,
              column: 97
            },
            end: {
              line: 30,
              column: 105
            }
          }],
          line: 30
        },
        "5": {
          loc: {
            start: {
              line: 36,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 36,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          }, {
            start: {
              line: 36,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          }],
          line: 36
        },
        "6": {
          loc: {
            start: {
              line: 49,
              column: 4
            },
            end: {
              line: 50,
              column: 21
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 49,
              column: 4
            },
            end: {
              line: 50,
              column: 21
            }
          }, {
            start: {
              line: 49,
              column: 4
            },
            end: {
              line: 50,
              column: 21
            }
          }],
          line: 49
        },
        "7": {
          loc: {
            start: {
              line: 58,
              column: 4
            },
            end: {
              line: 62,
              column: 5
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 59,
              column: 8
            },
            end: {
              line: 59,
              column: 48
            }
          }, {
            start: {
              line: 60,
              column: 8
            },
            end: {
              line: 60,
              column: 56
            }
          }, {
            start: {
              line: 61,
              column: 8
            },
            end: {
              line: 61,
              column: 28
            }
          }],
          line: 58
        },
        "8": {
          loc: {
            start: {
              line: 68,
              column: 4
            },
            end: {
              line: 69,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 68,
              column: 4
            },
            end: {
              line: 69,
              column: 29
            }
          }, {
            start: {
              line: 68,
              column: 4
            },
            end: {
              line: 69,
              column: 29
            }
          }],
          line: 68
        },
        "9": {
          loc: {
            start: {
              line: 70,
              column: 4
            },
            end: {
              line: 71,
              column: 38
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 70,
              column: 4
            },
            end: {
              line: 71,
              column: 38
            }
          }, {
            start: {
              line: 70,
              column: 4
            },
            end: {
              line: 71,
              column: 38
            }
          }],
          line: 70
        },
        "10": {
          loc: {
            start: {
              line: 75,
              column: 4
            },
            end: {
              line: 76,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 75,
              column: 4
            },
            end: {
              line: 76,
              column: 22
            }
          }, {
            start: {
              line: 75,
              column: 4
            },
            end: {
              line: 76,
              column: 22
            }
          }],
          line: 75
        },
        "11": {
          loc: {
            start: {
              line: 77,
              column: 4
            },
            end: {
              line: 78,
              column: 27
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 77,
              column: 4
            },
            end: {
              line: 78,
              column: 27
            }
          }, {
            start: {
              line: 77,
              column: 4
            },
            end: {
              line: 78,
              column: 27
            }
          }],
          line: 77
        },
        "12": {
          loc: {
            start: {
              line: 84,
              column: 37
            },
            end: {
              line: 84,
              column: 71
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 84,
              column: 37
            },
            end: {
              line: 84,
              column: 46
            }
          }, {
            start: {
              line: 84,
              column: 50
            },
            end: {
              line: 84,
              column: 71
            }
          }],
          line: 84
        },
        "13": {
          loc: {
            start: {
              line: 85,
              column: 23
            },
            end: {
              line: 85,
              column: 65
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 85,
              column: 23
            },
            end: {
              line: 85,
              column: 36
            }
          }, {
            start: {
              line: 85,
              column: 41
            },
            end: {
              line: 85,
              column: 64
            }
          }],
          line: 85
        },
        "14": {
          loc: {
            start: {
              line: 86,
              column: 37
            },
            end: {
              line: 86,
              column: 68
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 86,
              column: 37
            },
            end: {
              line: 86,
              column: 40
            }
          }, {
            start: {
              line: 86,
              column: 44
            },
            end: {
              line: 86,
              column: 68
            }
          }],
          line: 86
        },
        "15": {
          loc: {
            start: {
              line: 91,
              column: 34
            },
            end: {
              line: 91,
              column: 63
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 91,
              column: 34
            },
            end: {
              line: 91,
              column: 44
            }
          }, {
            start: {
              line: 91,
              column: 48
            },
            end: {
              line: 91,
              column: 63
            }
          }],
          line: 91
        },
        "16": {
          loc: {
            start: {
              line: 98,
              column: 11
            },
            end: {
              line: 100,
              column: 49
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 98,
              column: 11
            },
            end: {
              line: 98,
              column: 19
            }
          }, {
            start: {
              line: 99,
              column: 8
            },
            end: {
              line: 99,
              column: 18
            }
          }, {
            start: {
              line: 99,
              column: 22
            },
            end: {
              line: 99,
              column: 36
            }
          }, {
            start: {
              line: 100,
              column: 8
            },
            end: {
              line: 100,
              column: 19
            }
          }, {
            start: {
              line: 100,
              column: 23
            },
            end: {
              line: 100,
              column: 43
            }
          }, {
            start: {
              line: 100,
              column: 47
            },
            end: {
              line: 100,
              column: 49
            }
          }],
          line: 98
        },
        "17": {
          loc: {
            start: {
              line: 103,
              column: 40
            },
            end: {
              line: 103,
              column: 68
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 103,
              column: 61
            },
            end: {
              line: 103,
              column: 62
            }
          }, {
            start: {
              line: 103,
              column: 65
            },
            end: {
              line: 103,
              column: 68
            }
          }],
          line: 103
        },
        "18": {
          loc: {
            start: {
              line: 116,
              column: 4
            },
            end: {
              line: 130,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 116,
              column: 4
            },
            end: {
              line: 130,
              column: 5
            }
          }, {
            start: {
              line: 116,
              column: 4
            },
            end: {
              line: 130,
              column: 5
            }
          }],
          line: 116
        },
        "19": {
          loc: {
            start: {
              line: 119,
              column: 12
            },
            end: {
              line: 120,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 119,
              column: 12
            },
            end: {
              line: 120,
              column: 22
            }
          }, {
            start: {
              line: 119,
              column: 12
            },
            end: {
              line: 120,
              column: 22
            }
          }],
          line: 119
        },
        "20": {
          loc: {
            start: {
              line: 125,
              column: 12
            },
            end: {
              line: 128,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 125,
              column: 12
            },
            end: {
              line: 128,
              column: 13
            }
          }, {
            start: {
              line: 125,
              column: 12
            },
            end: {
              line: 128,
              column: 13
            }
          }],
          line: 125
        },
        "21": {
          loc: {
            start: {
              line: 126,
              column: 16
            },
            end: {
              line: 127,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 126,
              column: 16
            },
            end: {
              line: 127,
              column: 26
            }
          }, {
            start: {
              line: 126,
              column: 16
            },
            end: {
              line: 127,
              column: 26
            }
          }],
          line: 126
        },
        "22": {
          loc: {
            start: {
              line: 158,
              column: 4
            },
            end: {
              line: 159,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 158,
              column: 4
            },
            end: {
              line: 159,
              column: 19
            }
          }, {
            start: {
              line: 158,
              column: 4
            },
            end: {
              line: 159,
              column: 19
            }
          }],
          line: 158
        },
        "23": {
          loc: {
            start: {
              line: 160,
              column: 4
            },
            end: {
              line: 161,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 160,
              column: 4
            },
            end: {
              line: 161,
              column: 22
            }
          }, {
            start: {
              line: 160,
              column: 4
            },
            end: {
              line: 161,
              column: 22
            }
          }],
          line: 160
        },
        "24": {
          loc: {
            start: {
              line: 163,
              column: 4
            },
            end: {
              line: 165,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 163,
              column: 4
            },
            end: {
              line: 165,
              column: 5
            }
          }, {
            start: {
              line: 163,
              column: 4
            },
            end: {
              line: 165,
              column: 5
            }
          }],
          line: 163
        },
        "25": {
          loc: {
            start: {
              line: 163,
              column: 10
            },
            end: {
              line: 163,
              column: 57
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 163,
              column: 10
            },
            end: {
              line: 163,
              column: 32
            }
          }, {
            start: {
              line: 163,
              column: 36
            },
            end: {
              line: 163,
              column: 57
            }
          }],
          line: 163
        },
        "26": {
          loc: {
            start: {
              line: 167,
              column: 22
            },
            end: {
              line: 167,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 167,
              column: 22
            },
            end: {
              line: 167,
              column: 37
            }
          }, {
            start: {
              line: 167,
              column: 41
            },
            end: {
              line: 167,
              column: 46
            }
          }],
          line: 167
        },
        "27": {
          loc: {
            start: {
              line: 168,
              column: 4
            },
            end: {
              line: 194,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 168,
              column: 4
            },
            end: {
              line: 194,
              column: 5
            }
          }, {
            start: {
              line: 168,
              column: 4
            },
            end: {
              line: 194,
              column: 5
            }
          }],
          line: 168
        },
        "28": {
          loc: {
            start: {
              line: 171,
              column: 8
            },
            end: {
              line: 183,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 171,
              column: 8
            },
            end: {
              line: 183,
              column: 9
            }
          }, {
            start: {
              line: 171,
              column: 8
            },
            end: {
              line: 183,
              column: 9
            }
          }],
          line: 171
        },
        "29": {
          loc: {
            start: {
              line: 174,
              column: 19
            },
            end: {
              line: 174,
              column: 56
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 174,
              column: 19
            },
            end: {
              line: 174,
              column: 36
            }
          }, {
            start: {
              line: 174,
              column: 40
            },
            end: {
              line: 174,
              column: 56
            }
          }],
          line: 174
        },
        "30": {
          loc: {
            start: {
              line: 187,
              column: 12
            },
            end: {
              line: 192,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 187,
              column: 12
            },
            end: {
              line: 192,
              column: 13
            }
          }, {
            start: {
              line: 187,
              column: 12
            },
            end: {
              line: 192,
              column: 13
            }
          }],
          line: 187
        },
        "31": {
          loc: {
            start: {
              line: 205,
              column: 4
            },
            end: {
              line: 207,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 205,
              column: 4
            },
            end: {
              line: 207,
              column: 5
            }
          }, {
            start: {
              line: 205,
              column: 4
            },
            end: {
              line: 207,
              column: 5
            }
          }],
          line: 205
        },
        "32": {
          loc: {
            start: {
              line: 239,
              column: 28
            },
            end: {
              line: 239,
              column: 38
            }
          },
          type: "default-arg",
          locations: [{
            start: {
              line: 239,
              column: 36
            },
            end: {
              line: 239,
              column: 38
            }
          }],
          line: 239
        },
        "33": {
          loc: {
            start: {
              line: 243,
              column: 12
            },
            end: {
              line: 248,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 243,
              column: 12
            },
            end: {
              line: 248,
              column: 13
            }
          }, {
            start: {
              line: 243,
              column: 12
            },
            end: {
              line: 248,
              column: 13
            }
          }],
          line: 243
        },
        "34": {
          loc: {
            start: {
              line: 243,
              column: 16
            },
            end: {
              line: 243,
              column: 56
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 243,
              column: 16
            },
            end: {
              line: 243,
              column: 30
            }
          }, {
            start: {
              line: 243,
              column: 35
            },
            end: {
              line: 243,
              column: 43
            }
          }, {
            start: {
              line: 243,
              column: 47
            },
            end: {
              line: 243,
              column: 55
            }
          }],
          line: 243
        },
        "35": {
          loc: {
            start: {
              line: 260,
              column: 4
            },
            end: {
              line: 261,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 260,
              column: 4
            },
            end: {
              line: 261,
              column: 19
            }
          }, {
            start: {
              line: 260,
              column: 4
            },
            end: {
              line: 261,
              column: 19
            }
          }],
          line: 260
        },
        "36": {
          loc: {
            start: {
              line: 262,
              column: 11
            },
            end: {
              line: 262,
              column: 54
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 262,
              column: 11
            },
            end: {
              line: 262,
              column: 18
            }
          }, {
            start: {
              line: 262,
              column: 22
            },
            end: {
              line: 262,
              column: 34
            }
          }, {
            start: {
              line: 262,
              column: 38
            },
            end: {
              line: 262,
              column: 54
            }
          }],
          line: 262
        },
        "37": {
          loc: {
            start: {
              line: 280,
              column: 8
            },
            end: {
              line: 281,
              column: 21
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 280,
              column: 8
            },
            end: {
              line: 281,
              column: 21
            }
          }, {
            start: {
              line: 280,
              column: 8
            },
            end: {
              line: 281,
              column: 21
            }
          }],
          line: 280
        },
        "38": {
          loc: {
            start: {
              line: 284,
              column: 8
            },
            end: {
              line: 285,
              column: 25
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 284,
              column: 8
            },
            end: {
              line: 285,
              column: 25
            }
          }, {
            start: {
              line: 284,
              column: 8
            },
            end: {
              line: 285,
              column: 25
            }
          }],
          line: 284
        },
        "39": {
          loc: {
            start: {
              line: 284,
              column: 12
            },
            end: {
              line: 284,
              column: 53
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 284,
              column: 12
            },
            end: {
              line: 284,
              column: 30
            }
          }, {
            start: {
              line: 284,
              column: 34
            },
            end: {
              line: 284,
              column: 53
            }
          }],
          line: 284
        },
        "40": {
          loc: {
            start: {
              line: 286,
              column: 8
            },
            end: {
              line: 319,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 286,
              column: 8
            },
            end: {
              line: 319,
              column: 9
            }
          }, {
            start: {
              line: 286,
              column: 8
            },
            end: {
              line: 319,
              column: 9
            }
          }],
          line: 286
        },
        "41": {
          loc: {
            start: {
              line: 286,
              column: 12
            },
            end: {
              line: 286,
              column: 52
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 286,
              column: 12
            },
            end: {
              line: 286,
              column: 30
            }
          }, {
            start: {
              line: 286,
              column: 34
            },
            end: {
              line: 286,
              column: 52
            }
          }],
          line: 286
        },
        "42": {
          loc: {
            start: {
              line: 287,
              column: 12
            },
            end: {
              line: 288,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 287,
              column: 12
            },
            end: {
              line: 288,
              column: 29
            }
          }, {
            start: {
              line: 287,
              column: 12
            },
            end: {
              line: 288,
              column: 29
            }
          }],
          line: 287
        },
        "43": {
          loc: {
            start: {
              line: 292,
              column: 13
            },
            end: {
              line: 319,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 292,
              column: 13
            },
            end: {
              line: 319,
              column: 9
            }
          }, {
            start: {
              line: 292,
              column: 13
            },
            end: {
              line: 319,
              column: 9
            }
          }],
          line: 292
        },
        "44": {
          loc: {
            start: {
              line: 292,
              column: 17
            },
            end: {
              line: 292,
              column: 59
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 292,
              column: 17
            },
            end: {
              line: 292,
              column: 36
            }
          }, {
            start: {
              line: 292,
              column: 40
            },
            end: {
              line: 292,
              column: 59
            }
          }],
          line: 292
        },
        "45": {
          loc: {
            start: {
              line: 297,
              column: 12
            },
            end: {
              line: 298,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 297,
              column: 12
            },
            end: {
              line: 298,
              column: 29
            }
          }, {
            start: {
              line: 297,
              column: 12
            },
            end: {
              line: 298,
              column: 29
            }
          }],
          line: 297
        },
        "46": {
          loc: {
            start: {
              line: 305,
              column: 16
            },
            end: {
              line: 312,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 305,
              column: 16
            },
            end: {
              line: 312,
              column: 17
            }
          }, {
            start: {
              line: 305,
              column: 16
            },
            end: {
              line: 312,
              column: 17
            }
          }],
          line: 305
        },
        "47": {
          loc: {
            start: {
              line: 317,
              column: 12
            },
            end: {
              line: 318,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 317,
              column: 12
            },
            end: {
              line: 318,
              column: 29
            }
          }, {
            start: {
              line: 317,
              column: 12
            },
            end: {
              line: 318,
              column: 29
            }
          }],
          line: 317
        },
        "48": {
          loc: {
            start: {
              line: 366,
              column: 8
            },
            end: {
              line: 369,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 366,
              column: 8
            },
            end: {
              line: 369,
              column: 9
            }
          }, {
            start: {
              line: 366,
              column: 8
            },
            end: {
              line: 369,
              column: 9
            }
          }],
          line: 366
        },
        "49": {
          loc: {
            start: {
              line: 381,
              column: 4
            },
            end: {
              line: 400,
              column: 5
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 382,
              column: 8
            },
            end: {
              line: 382,
              column: 23
            }
          }, {
            start: {
              line: 383,
              column: 8
            },
            end: {
              line: 383,
              column: 22
            }
          }, {
            start: {
              line: 384,
              column: 8
            },
            end: {
              line: 385,
              column: 36
            }
          }, {
            start: {
              line: 386,
              column: 8
            },
            end: {
              line: 387,
              column: 41
            }
          }, {
            start: {
              line: 388,
              column: 8
            },
            end: {
              line: 389,
              column: 39
            }
          }, {
            start: {
              line: 390,
              column: 8
            },
            end: {
              line: 390,
              column: 20
            }
          }, {
            start: {
              line: 391,
              column: 8
            },
            end: {
              line: 392,
              column: 24
            }
          }, {
            start: {
              line: 393,
              column: 8
            },
            end: {
              line: 394,
              column: 49
            }
          }, {
            start: {
              line: 395,
              column: 8
            },
            end: {
              line: 399,
              column: 93
            }
          }],
          line: 381
        },
        "50": {
          loc: {
            start: {
              line: 396,
              column: 25
            },
            end: {
              line: 396,
              column: 71
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 396,
              column: 47
            },
            end: {
              line: 396,
              column: 49
            }
          }, {
            start: {
              line: 396,
              column: 52
            },
            end: {
              line: 396,
              column: 71
            }
          }],
          line: 396
        },
        "51": {
          loc: {
            start: {
              line: 411,
              column: 4
            },
            end: {
              line: 412,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 411,
              column: 4
            },
            end: {
              line: 412,
              column: 20
            }
          }, {
            start: {
              line: 411,
              column: 4
            },
            end: {
              line: 412,
              column: 20
            }
          }],
          line: 411
        },
        "52": {
          loc: {
            start: {
              line: 426,
              column: 4
            },
            end: {
              line: 427,
              column: 18
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 426,
              column: 4
            },
            end: {
              line: 427,
              column: 18
            }
          }, {
            start: {
              line: 426,
              column: 4
            },
            end: {
              line: 427,
              column: 18
            }
          }],
          line: 426
        },
        "53": {
          loc: {
            start: {
              line: 428,
              column: 4
            },
            end: {
              line: 429,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 428,
              column: 4
            },
            end: {
              line: 429,
              column: 17
            }
          }, {
            start: {
              line: 428,
              column: 4
            },
            end: {
              line: 429,
              column: 17
            }
          }],
          line: 428
        },
        "54": {
          loc: {
            start: {
              line: 446,
              column: 10
            },
            end: {
              line: 446,
              column: 24
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 446,
              column: 10
            },
            end: {
              line: 446,
              column: 13
            }
          }, {
            start: {
              line: 446,
              column: 17
            },
            end: {
              line: 446,
              column: 24
            }
          }],
          line: 446
        },
        "55": {
          loc: {
            start: {
              line: 447,
              column: 4
            },
            end: {
              line: 448,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 447,
              column: 4
            },
            end: {
              line: 448,
              column: 26
            }
          }, {
            start: {
              line: 447,
              column: 4
            },
            end: {
              line: 448,
              column: 26
            }
          }],
          line: 447
        },
        "56": {
          loc: {
            start: {
              line: 453,
              column: 8
            },
            end: {
              line: 464,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 453,
              column: 8
            },
            end: {
              line: 464,
              column: 9
            }
          }, {
            start: {
              line: 453,
              column: 8
            },
            end: {
              line: 464,
              column: 9
            }
          }],
          line: 453
        },
        "57": {
          loc: {
            start: {
              line: 457,
              column: 12
            },
            end: {
              line: 462,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 457,
              column: 12
            },
            end: {
              line: 462,
              column: 13
            }
          }, {
            start: {
              line: 457,
              column: 12
            },
            end: {
              line: 462,
              column: 13
            }
          }],
          line: 457
        },
        "58": {
          loc: {
            start: {
              line: 490,
              column: 8
            },
            end: {
              line: 495,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 490,
              column: 8
            },
            end: {
              line: 495,
              column: 9
            }
          }, {
            start: {
              line: 490,
              column: 8
            },
            end: {
              line: 495,
              column: 9
            }
          }],
          line: 490
        },
        "59": {
          loc: {
            start: {
              line: 523,
              column: 8
            },
            end: {
              line: 531,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 523,
              column: 8
            },
            end: {
              line: 531,
              column: 9
            }
          }, {
            start: {
              line: 523,
              column: 8
            },
            end: {
              line: 531,
              column: 9
            }
          }],
          line: 523
        },
        "60": {
          loc: {
            start: {
              line: 526,
              column: 13
            },
            end: {
              line: 531,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 526,
              column: 13
            },
            end: {
              line: 531,
              column: 9
            }
          }, {
            start: {
              line: 526,
              column: 13
            },
            end: {
              line: 531,
              column: 9
            }
          }],
          line: 526
        },
        "61": {
          loc: {
            start: {
              line: 547,
              column: 12
            },
            end: {
              line: 549,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 547,
              column: 12
            },
            end: {
              line: 549,
              column: 13
            }
          }, {
            start: {
              line: 547,
              column: 12
            },
            end: {
              line: 549,
              column: 13
            }
          }],
          line: 547
        },
        "62": {
          loc: {
            start: {
              line: 563,
              column: 11
            },
            end: {
              line: 563,
              column: 53
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 563,
              column: 31
            },
            end: {
              line: 563,
              column: 41
            }
          }, {
            start: {
              line: 563,
              column: 44
            },
            end: {
              line: 563,
              column: 53
            }
          }],
          line: 563
        },
        "63": {
          loc: {
            start: {
              line: 574,
              column: 4
            },
            end: {
              line: 576,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 574,
              column: 4
            },
            end: {
              line: 576,
              column: 5
            }
          }, {
            start: {
              line: 574,
              column: 4
            },
            end: {
              line: 576,
              column: 5
            }
          }],
          line: 574
        },
        "64": {
          loc: {
            start: {
              line: 582,
              column: 12
            },
            end: {
              line: 600,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 582,
              column: 12
            },
            end: {
              line: 600,
              column: 13
            }
          }, {
            start: {
              line: 582,
              column: 12
            },
            end: {
              line: 600,
              column: 13
            }
          }],
          line: 582
        },
        "65": {
          loc: {
            start: {
              line: 582,
              column: 16
            },
            end: {
              line: 582,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 582,
              column: 16
            },
            end: {
              line: 582,
              column: 22
            }
          }, {
            start: {
              line: 582,
              column: 26
            },
            end: {
              line: 582,
              column: 46
            }
          }],
          line: 582
        },
        "66": {
          loc: {
            start: {
              line: 586,
              column: 16
            },
            end: {
              line: 587,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 586,
              column: 16
            },
            end: {
              line: 587,
              column: 26
            }
          }, {
            start: {
              line: 586,
              column: 16
            },
            end: {
              line: 587,
              column: 26
            }
          }],
          line: 586
        },
        "67": {
          loc: {
            start: {
              line: 586,
              column: 20
            },
            end: {
              line: 586,
              column: 40
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 586,
              column: 20
            },
            end: {
              line: 586,
              column: 27
            }
          }, {
            start: {
              line: 586,
              column: 31
            },
            end: {
              line: 586,
              column: 40
            }
          }],
          line: 586
        },
        "68": {
          loc: {
            start: {
              line: 592,
              column: 20
            },
            end: {
              line: 593,
              column: 36
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 592,
              column: 20
            },
            end: {
              line: 593,
              column: 36
            }
          }, {
            start: {
              line: 592,
              column: 20
            },
            end: {
              line: 593,
              column: 36
            }
          }],
          line: 592
        },
        "69": {
          loc: {
            start: {
              line: 601,
              column: 12
            },
            end: {
              line: 602,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 601,
              column: 12
            },
            end: {
              line: 602,
              column: 22
            }
          }, {
            start: {
              line: 601,
              column: 12
            },
            end: {
              line: 602,
              column: 22
            }
          }],
          line: 601
        },
        "70": {
          loc: {
            start: {
              line: 606,
              column: 10
            },
            end: {
              line: 606,
              column: 90
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 606,
              column: 50
            },
            end: {
              line: 606,
              column: 53
            }
          }, {
            start: {
              line: 606,
              column: 56
            },
            end: {
              line: 606,
              column: 90
            }
          }],
          line: 606
        },
        "71": {
          loc: {
            start: {
              line: 607,
              column: 11
            },
            end: {
              line: 609,
              column: 13
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 608,
              column: 10
            },
            end: {
              line: 608,
              column: 39
            }
          }, {
            start: {
              line: 609,
              column: 10
            },
            end: {
              line: 609,
              column: 13
            }
          }],
          line: 607
        },
        "72": {
          loc: {
            start: {
              line: 620,
              column: 4
            },
            end: {
              line: 622,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 620,
              column: 4
            },
            end: {
              line: 622,
              column: 5
            }
          }, {
            start: {
              line: 620,
              column: 4
            },
            end: {
              line: 622,
              column: 5
            }
          }],
          line: 620
        },
        "73": {
          loc: {
            start: {
              line: 631,
              column: 4
            },
            end: {
              line: 664,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 631,
              column: 4
            },
            end: {
              line: 664,
              column: 5
            }
          }, {
            start: {
              line: 631,
              column: 4
            },
            end: {
              line: 664,
              column: 5
            }
          }],
          line: 631
        },
        "74": {
          loc: {
            start: {
              line: 632,
              column: 8
            },
            end: {
              line: 653,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 632,
              column: 8
            },
            end: {
              line: 653,
              column: 9
            }
          }, {
            start: {
              line: 632,
              column: 8
            },
            end: {
              line: 653,
              column: 9
            }
          }],
          line: 632
        },
        "75": {
          loc: {
            start: {
              line: 634,
              column: 12
            },
            end: {
              line: 636,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 634,
              column: 12
            },
            end: {
              line: 636,
              column: 13
            }
          }, {
            start: {
              line: 634,
              column: 12
            },
            end: {
              line: 636,
              column: 13
            }
          }],
          line: 634
        },
        "76": {
          loc: {
            start: {
              line: 643,
              column: 16
            },
            end: {
              line: 651,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 643,
              column: 16
            },
            end: {
              line: 651,
              column: 17
            }
          }, {
            start: {
              line: 643,
              column: 16
            },
            end: {
              line: 651,
              column: 17
            }
          }],
          line: 643
        },
        "77": {
          loc: {
            start: {
              line: 644,
              column: 20
            },
            end: {
              line: 646,
              column: 21
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 644,
              column: 20
            },
            end: {
              line: 646,
              column: 21
            }
          }, {
            start: {
              line: 644,
              column: 20
            },
            end: {
              line: 646,
              column: 21
            }
          }],
          line: 644
        },
        "78": {
          loc: {
            start: {
              line: 649,
              column: 21
            },
            end: {
              line: 651,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 649,
              column: 21
            },
            end: {
              line: 651,
              column: 17
            }
          }, {
            start: {
              line: 649,
              column: 21
            },
            end: {
              line: 651,
              column: 17
            }
          }],
          line: 649
        },
        "79": {
          loc: {
            start: {
              line: 657,
              column: 8
            },
            end: {
              line: 659,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 657,
              column: 8
            },
            end: {
              line: 659,
              column: 9
            }
          }, {
            start: {
              line: 657,
              column: 8
            },
            end: {
              line: 659,
              column: 9
            }
          }],
          line: 657
        },
        "80": {
          loc: {
            start: {
              line: 660,
              column: 8
            },
            end: {
              line: 661,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 660,
              column: 8
            },
            end: {
              line: 661,
              column: 29
            }
          }, {
            start: {
              line: 660,
              column: 8
            },
            end: {
              line: 661,
              column: 29
            }
          }],
          line: 660
        },
        "81": {
          loc: {
            start: {
              line: 672,
              column: 4
            },
            end: {
              line: 688,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 672,
              column: 4
            },
            end: {
              line: 688,
              column: 5
            }
          }, {
            start: {
              line: 672,
              column: 4
            },
            end: {
              line: 688,
              column: 5
            }
          }],
          line: 672
        },
        "82": {
          loc: {
            start: {
              line: 674,
              column: 12
            },
            end: {
              line: 679,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 674,
              column: 12
            },
            end: {
              line: 679,
              column: 13
            }
          }, {
            start: {
              line: 674,
              column: 12
            },
            end: {
              line: 679,
              column: 13
            }
          }],
          line: 674
        },
        "83": {
          loc: {
            start: {
              line: 682,
              column: 9
            },
            end: {
              line: 688,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 682,
              column: 9
            },
            end: {
              line: 688,
              column: 5
            }
          }, {
            start: {
              line: 682,
              column: 9
            },
            end: {
              line: 688,
              column: 5
            }
          }],
          line: 682
        },
        "84": {
          loc: {
            start: {
              line: 684,
              column: 12
            },
            end: {
              line: 686,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 684,
              column: 12
            },
            end: {
              line: 686,
              column: 13
            }
          }, {
            start: {
              line: 684,
              column: 12
            },
            end: {
              line: 686,
              column: 13
            }
          }],
          line: 684
        },
        "85": {
          loc: {
            start: {
              line: 703,
              column: 4
            },
            end: {
              line: 712,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 703,
              column: 4
            },
            end: {
              line: 712,
              column: 5
            }
          }, {
            start: {
              line: 703,
              column: 4
            },
            end: {
              line: 712,
              column: 5
            }
          }],
          line: 703
        },
        "86": {
          loc: {
            start: {
              line: 708,
              column: 8
            },
            end: {
              line: 710,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 708,
              column: 8
            },
            end: {
              line: 710,
              column: 9
            }
          }, {
            start: {
              line: 708,
              column: 8
            },
            end: {
              line: 710,
              column: 9
            }
          }],
          line: 708
        },
        "87": {
          loc: {
            start: {
              line: 708,
              column: 12
            },
            end: {
              line: 708,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 708,
              column: 12
            },
            end: {
              line: 708,
              column: 26
            }
          }, {
            start: {
              line: 708,
              column: 30
            },
            end: {
              line: 708,
              column: 45
            }
          }],
          line: 708
        },
        "88": {
          loc: {
            start: {
              line: 728,
              column: 8
            },
            end: {
              line: 733,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 728,
              column: 8
            },
            end: {
              line: 733,
              column: 9
            }
          }, {
            start: {
              line: 728,
              column: 8
            },
            end: {
              line: 733,
              column: 9
            }
          }],
          line: 728
        },
        "89": {
          loc: {
            start: {
              line: 728,
              column: 12
            },
            end: {
              line: 728,
              column: 54
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 728,
              column: 12
            },
            end: {
              line: 728,
              column: 33
            }
          }, {
            start: {
              line: 728,
              column: 37
            },
            end: {
              line: 728,
              column: 54
            }
          }],
          line: 728
        },
        "90": {
          loc: {
            start: {
              line: 731,
              column: 13
            },
            end: {
              line: 733,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 731,
              column: 13
            },
            end: {
              line: 733,
              column: 9
            }
          }, {
            start: {
              line: 731,
              column: 13
            },
            end: {
              line: 733,
              column: 9
            }
          }],
          line: 731
        },
        "91": {
          loc: {
            start: {
              line: 742,
              column: 11
            },
            end: {
              line: 742,
              column: 36
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 742,
              column: 11
            },
            end: {
              line: 742,
              column: 17
            }
          }, {
            start: {
              line: 742,
              column: 21
            },
            end: {
              line: 742,
              column: 36
            }
          }],
          line: 742
        },
        "92": {
          loc: {
            start: {
              line: 746,
              column: 17
            },
            end: {
              line: 746,
              column: 46
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 746,
              column: 38
            },
            end: {
              line: 746,
              column: 41
            }
          }, {
            start: {
              line: 746,
              column: 44
            },
            end: {
              line: 746,
              column: 46
            }
          }],
          line: 746
        },
        "93": {
          loc: {
            start: {
              line: 747,
              column: 17
            },
            end: {
              line: 747,
              column: 45
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 747,
              column: 37
            },
            end: {
              line: 747,
              column: 40
            }
          }, {
            start: {
              line: 747,
              column: 43
            },
            end: {
              line: 747,
              column: 45
            }
          }],
          line: 747
        },
        "94": {
          loc: {
            start: {
              line: 748,
              column: 17
            },
            end: {
              line: 748,
              column: 42
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 748,
              column: 34
            },
            end: {
              line: 748,
              column: 37
            }
          }, {
            start: {
              line: 748,
              column: 40
            },
            end: {
              line: 748,
              column: 42
            }
          }],
          line: 748
        },
        "95": {
          loc: {
            start: {
              line: 758,
              column: 4
            },
            end: {
              line: 760,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 758,
              column: 4
            },
            end: {
              line: 760,
              column: 5
            }
          }, {
            start: {
              line: 758,
              column: 4
            },
            end: {
              line: 760,
              column: 5
            }
          }],
          line: 758
        },
        "96": {
          loc: {
            start: {
              line: 759,
              column: 15
            },
            end: {
              line: 759,
              column: 68
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 759,
              column: 32
            },
            end: {
              line: 759,
              column: 50
            }
          }, {
            start: {
              line: 759,
              column: 53
            },
            end: {
              line: 759,
              column: 68
            }
          }],
          line: 759
        },
        "97": {
          loc: {
            start: {
              line: 762,
              column: 4
            },
            end: {
              line: 788,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 762,
              column: 4
            },
            end: {
              line: 788,
              column: 5
            }
          }, {
            start: {
              line: 762,
              column: 4
            },
            end: {
              line: 788,
              column: 5
            }
          }],
          line: 762
        },
        "98": {
          loc: {
            start: {
              line: 765,
              column: 8
            },
            end: {
              line: 767,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 765,
              column: 8
            },
            end: {
              line: 767,
              column: 9
            }
          }, {
            start: {
              line: 765,
              column: 8
            },
            end: {
              line: 767,
              column: 9
            }
          }],
          line: 765
        },
        "99": {
          loc: {
            start: {
              line: 769,
              column: 8
            },
            end: {
              line: 787,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 769,
              column: 8
            },
            end: {
              line: 787,
              column: 9
            }
          }, {
            start: {
              line: 769,
              column: 8
            },
            end: {
              line: 787,
              column: 9
            }
          }],
          line: 769
        },
        "100": {
          loc: {
            start: {
              line: 771,
              column: 26
            },
            end: {
              line: 771,
              column: 48
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 771,
              column: 26
            },
            end: {
              line: 771,
              column: 42
            }
          }, {
            start: {
              line: 771,
              column: 46
            },
            end: {
              line: 771,
              column: 48
            }
          }],
          line: 771
        },
        "101": {
          loc: {
            start: {
              line: 774,
              column: 12
            },
            end: {
              line: 779,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 774,
              column: 12
            },
            end: {
              line: 779,
              column: 13
            }
          }, {
            start: {
              line: 774,
              column: 12
            },
            end: {
              line: 779,
              column: 13
            }
          }],
          line: 774
        },
        "102": {
          loc: {
            start: {
              line: 781,
              column: 28
            },
            end: {
              line: 781,
              column: 73
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 781,
              column: 28
            },
            end: {
              line: 781,
              column: 44
            }
          }, {
            start: {
              line: 781,
              column: 48
            },
            end: {
              line: 781,
              column: 73
            }
          }],
          line: 781
        },
        "103": {
          loc: {
            start: {
              line: 782,
              column: 27
            },
            end: {
              line: 782,
              column: 71
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 782,
              column: 27
            },
            end: {
              line: 782,
              column: 42
            }
          }, {
            start: {
              line: 782,
              column: 46
            },
            end: {
              line: 782,
              column: 71
            }
          }],
          line: 782
        },
        "104": {
          loc: {
            start: {
              line: 783,
              column: 24
            },
            end: {
              line: 783,
              column: 65
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 783,
              column: 24
            },
            end: {
              line: 783,
              column: 36
            }
          }, {
            start: {
              line: 783,
              column: 40
            },
            end: {
              line: 783,
              column: 65
            }
          }],
          line: 783
        },
        "105": {
          loc: {
            start: {
              line: 802,
              column: 4
            },
            end: {
              line: 818,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 802,
              column: 4
            },
            end: {
              line: 818,
              column: 5
            }
          }, {
            start: {
              line: 802,
              column: 4
            },
            end: {
              line: 818,
              column: 5
            }
          }],
          line: 802
        },
        "106": {
          loc: {
            start: {
              line: 803,
              column: 8
            },
            end: {
              line: 810,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 803,
              column: 8
            },
            end: {
              line: 810,
              column: 9
            }
          }, {
            start: {
              line: 803,
              column: 8
            },
            end: {
              line: 810,
              column: 9
            }
          }],
          line: 803
        },
        "107": {
          loc: {
            start: {
              line: 813,
              column: 8
            },
            end: {
              line: 815,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 813,
              column: 8
            },
            end: {
              line: 815,
              column: 9
            }
          }, {
            start: {
              line: 813,
              column: 8
            },
            end: {
              line: 815,
              column: 9
            }
          }],
          line: 813
        },
        "108": {
          loc: {
            start: {
              line: 829,
              column: 12
            },
            end: {
              line: 829,
              column: 28
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 829,
              column: 12
            },
            end: {
              line: 829,
              column: 23
            }
          }, {
            start: {
              line: 829,
              column: 27
            },
            end: {
              line: 829,
              column: 28
            }
          }],
          line: 829
        },
        "109": {
          loc: {
            start: {
              line: 830,
              column: 21
            },
            end: {
              line: 830,
              column: 40
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 830,
              column: 22
            },
            end: {
              line: 830,
              column: 29
            }
          }, {
            start: {
              line: 830,
              column: 33
            },
            end: {
              line: 830,
              column: 34
            }
          }, {
            start: {
              line: 830,
              column: 39
            },
            end: {
              line: 830,
              column: 40
            }
          }],
          line: 830
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0,
        "85": 0,
        "86": 0,
        "87": 0,
        "88": 0,
        "89": 0,
        "90": 0,
        "91": 0,
        "92": 0,
        "93": 0,
        "94": 0,
        "95": 0,
        "96": 0,
        "97": 0,
        "98": 0,
        "99": 0,
        "100": 0,
        "101": 0,
        "102": 0,
        "103": 0,
        "104": 0,
        "105": 0,
        "106": 0,
        "107": 0,
        "108": 0,
        "109": 0,
        "110": 0,
        "111": 0,
        "112": 0,
        "113": 0,
        "114": 0,
        "115": 0,
        "116": 0,
        "117": 0,
        "118": 0,
        "119": 0,
        "120": 0,
        "121": 0,
        "122": 0,
        "123": 0,
        "124": 0,
        "125": 0,
        "126": 0,
        "127": 0,
        "128": 0,
        "129": 0,
        "130": 0,
        "131": 0,
        "132": 0,
        "133": 0,
        "134": 0,
        "135": 0,
        "136": 0,
        "137": 0,
        "138": 0,
        "139": 0,
        "140": 0,
        "141": 0,
        "142": 0,
        "143": 0,
        "144": 0,
        "145": 0,
        "146": 0,
        "147": 0,
        "148": 0,
        "149": 0,
        "150": 0,
        "151": 0,
        "152": 0,
        "153": 0,
        "154": 0,
        "155": 0,
        "156": 0,
        "157": 0,
        "158": 0,
        "159": 0,
        "160": 0,
        "161": 0,
        "162": 0,
        "163": 0,
        "164": 0,
        "165": 0,
        "166": 0,
        "167": 0,
        "168": 0,
        "169": 0,
        "170": 0,
        "171": 0,
        "172": 0,
        "173": 0,
        "174": 0,
        "175": 0,
        "176": 0,
        "177": 0,
        "178": 0,
        "179": 0,
        "180": 0,
        "181": 0,
        "182": 0,
        "183": 0,
        "184": 0,
        "185": 0,
        "186": 0,
        "187": 0,
        "188": 0,
        "189": 0,
        "190": 0,
        "191": 0,
        "192": 0,
        "193": 0,
        "194": 0,
        "195": 0,
        "196": 0,
        "197": 0,
        "198": 0,
        "199": 0,
        "200": 0,
        "201": 0,
        "202": 0,
        "203": 0,
        "204": 0,
        "205": 0,
        "206": 0,
        "207": 0,
        "208": 0,
        "209": 0,
        "210": 0,
        "211": 0,
        "212": 0,
        "213": 0,
        "214": 0,
        "215": 0,
        "216": 0,
        "217": 0,
        "218": 0,
        "219": 0,
        "220": 0,
        "221": 0,
        "222": 0,
        "223": 0,
        "224": 0,
        "225": 0,
        "226": 0,
        "227": 0,
        "228": 0,
        "229": 0,
        "230": 0,
        "231": 0,
        "232": 0,
        "233": 0,
        "234": 0,
        "235": 0,
        "236": 0,
        "237": 0,
        "238": 0,
        "239": 0,
        "240": 0,
        "241": 0,
        "242": 0,
        "243": 0,
        "244": 0,
        "245": 0,
        "246": 0,
        "247": 0,
        "248": 0,
        "249": 0,
        "250": 0,
        "251": 0,
        "252": 0,
        "253": 0,
        "254": 0,
        "255": 0,
        "256": 0,
        "257": 0,
        "258": 0,
        "259": 0,
        "260": 0,
        "261": 0,
        "262": 0,
        "263": 0,
        "264": 0,
        "265": 0,
        "266": 0,
        "267": 0,
        "268": 0,
        "269": 0,
        "270": 0,
        "271": 0,
        "272": 0,
        "273": 0,
        "274": 0,
        "275": 0,
        "276": 0,
        "277": 0,
        "278": 0,
        "279": 0,
        "280": 0,
        "281": 0,
        "282": 0,
        "283": 0,
        "284": 0,
        "285": 0,
        "286": 0,
        "287": 0,
        "288": 0,
        "289": 0,
        "290": 0,
        "291": 0,
        "292": 0,
        "293": 0,
        "294": 0,
        "295": 0,
        "296": 0,
        "297": 0,
        "298": 0,
        "299": 0,
        "300": 0,
        "301": 0,
        "302": 0,
        "303": 0,
        "304": 0,
        "305": 0,
        "306": 0,
        "307": 0,
        "308": 0,
        "309": 0,
        "310": 0,
        "311": 0,
        "312": 0,
        "313": 0,
        "314": 0,
        "315": 0,
        "316": 0,
        "317": 0,
        "318": 0,
        "319": 0,
        "320": 0,
        "321": 0,
        "322": 0,
        "323": 0,
        "324": 0,
        "325": 0,
        "326": 0,
        "327": 0,
        "328": 0,
        "329": 0,
        "330": 0,
        "331": 0,
        "332": 0,
        "333": 0,
        "334": 0,
        "335": 0,
        "336": 0,
        "337": 0,
        "338": 0,
        "339": 0,
        "340": 0,
        "341": 0,
        "342": 0,
        "343": 0,
        "344": 0,
        "345": 0,
        "346": 0,
        "347": 0,
        "348": 0,
        "349": 0,
        "350": 0,
        "351": 0,
        "352": 0,
        "353": 0,
        "354": 0,
        "355": 0,
        "356": 0,
        "357": 0,
        "358": 0,
        "359": 0,
        "360": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0, 0, 0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0, 0, 0, 0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0],
        "24": [0, 0],
        "25": [0, 0],
        "26": [0, 0],
        "27": [0, 0],
        "28": [0, 0],
        "29": [0, 0],
        "30": [0, 0],
        "31": [0, 0],
        "32": [0],
        "33": [0, 0],
        "34": [0, 0, 0],
        "35": [0, 0],
        "36": [0, 0, 0],
        "37": [0, 0],
        "38": [0, 0],
        "39": [0, 0],
        "40": [0, 0],
        "41": [0, 0],
        "42": [0, 0],
        "43": [0, 0],
        "44": [0, 0],
        "45": [0, 0],
        "46": [0, 0],
        "47": [0, 0],
        "48": [0, 0],
        "49": [0, 0, 0, 0, 0, 0, 0, 0, 0],
        "50": [0, 0],
        "51": [0, 0],
        "52": [0, 0],
        "53": [0, 0],
        "54": [0, 0],
        "55": [0, 0],
        "56": [0, 0],
        "57": [0, 0],
        "58": [0, 0],
        "59": [0, 0],
        "60": [0, 0],
        "61": [0, 0],
        "62": [0, 0],
        "63": [0, 0],
        "64": [0, 0],
        "65": [0, 0],
        "66": [0, 0],
        "67": [0, 0],
        "68": [0, 0],
        "69": [0, 0],
        "70": [0, 0],
        "71": [0, 0],
        "72": [0, 0],
        "73": [0, 0],
        "74": [0, 0],
        "75": [0, 0],
        "76": [0, 0],
        "77": [0, 0],
        "78": [0, 0],
        "79": [0, 0],
        "80": [0, 0],
        "81": [0, 0],
        "82": [0, 0],
        "83": [0, 0],
        "84": [0, 0],
        "85": [0, 0],
        "86": [0, 0],
        "87": [0, 0],
        "88": [0, 0],
        "89": [0, 0],
        "90": [0, 0],
        "91": [0, 0],
        "92": [0, 0],
        "93": [0, 0],
        "94": [0, 0],
        "95": [0, 0],
        "96": [0, 0],
        "97": [0, 0],
        "98": [0, 0],
        "99": [0, 0],
        "100": [0, 0],
        "101": [0, 0],
        "102": [0, 0],
        "103": [0, 0],
        "104": [0, 0],
        "105": [0, 0],
        "106": [0, 0],
        "107": [0, 0],
        "108": [0, 0],
        "109": [0, 0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "47a8d0ac5ded6b0b61a22b7dce31f1de7368dfda"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_e6xla2q3n = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_e6xla2q3n();

  cov_e6xla2q3n().s[0]++;

  if (!Array.prototype.includes) {
    cov_e6xla2q3n().b[0][0]++;
    cov_e6xla2q3n().s[1]++;
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(valueToFind, fromIndex) {
        cov_e6xla2q3n().f[0]++;
        cov_e6xla2q3n().s[2]++;

        if (this == null) {
          cov_e6xla2q3n().b[1][0]++;
          cov_e6xla2q3n().s[3]++;
          throw new TypeError('"this" is null or not defined');
        } else {
          cov_e6xla2q3n().b[1][1]++;
        } // 1. Let O be ? ToObject(this value).


        var o = (cov_e6xla2q3n().s[4]++, Object(this)); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = (cov_e6xla2q3n().s[5]++, o.length >>> 0); // 3. If len is 0, return false.

        cov_e6xla2q3n().s[6]++;

        if (len === 0) {
          cov_e6xla2q3n().b[2][0]++;
          cov_e6xla2q3n().s[7]++;
          return false;
        } else {
          cov_e6xla2q3n().b[2][1]++;
        } // 4. Let n be ? ToInteger(fromIndex).
        //    (If fromIndex is undefined, this step produces the value 0.)


        var n = (cov_e6xla2q3n().s[8]++, fromIndex | 0); // 5. If n ≥ 0, then
        //  a. Let k be n.
        // 6. Else n < 0,
        //  a. Let k be len + n.
        //  b. If k < 0, let k be 0.

        var k = (cov_e6xla2q3n().s[9]++, Math.max(n >= 0 ? (cov_e6xla2q3n().b[3][0]++, n) : (cov_e6xla2q3n().b[3][1]++, len - Math.abs(n)), 0));

        function sameValueZero(x, y) {
          cov_e6xla2q3n().f[1]++;
          cov_e6xla2q3n().s[10]++;
          return (cov_e6xla2q3n().b[4][0]++, x === y) || (cov_e6xla2q3n().b[4][1]++, typeof x === 'number') && (cov_e6xla2q3n().b[4][2]++, typeof y === 'number') && (cov_e6xla2q3n().b[4][3]++, isNaN(x)) && (cov_e6xla2q3n().b[4][4]++, isNaN(y));
        } // 7. Repeat, while k < len


        cov_e6xla2q3n().s[11]++;

        while (k < len) {
          cov_e6xla2q3n().s[12]++;

          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(valueToFind, elementK) is true, return true.
          if (sameValueZero(o[k], valueToFind)) {
            cov_e6xla2q3n().b[5][0]++;
            cov_e6xla2q3n().s[13]++;
            return true;
          } else {
            cov_e6xla2q3n().b[5][1]++;
          } // c. Increase k by 1.


          cov_e6xla2q3n().s[14]++;
          k++;
        } // 8. Return false


        cov_e6xla2q3n().s[15]++;
        return false;
      }
    });
  } else {
    cov_e6xla2q3n().b[0][1]++;
  }

  var arrayPush = (cov_e6xla2q3n().s[16]++, Array.prototype.push);
  function assert(condition, message) {
    cov_e6xla2q3n().f[2]++;
    cov_e6xla2q3n().s[17]++;

    if (!condition) {
      cov_e6xla2q3n().b[6][0]++;
      cov_e6xla2q3n().s[18]++;
      err(message);
    } else {
      cov_e6xla2q3n().b[6][1]++;
    }
  }
  /**
   * Deep clone an object
   */

  function cloneDeep(obj) {
    cov_e6xla2q3n().f[3]++;
    cov_e6xla2q3n().s[19]++;

    // if (obj instanceof Array) return obj.map(cloneDeep)
    // if (obj instanceof Object) return objectMap(obj, cloneDeep)
    switch (jsType(obj)) {
      case T_ARRAY:
        cov_e6xla2q3n().b[7][0]++;
        cov_e6xla2q3n().s[20]++;
        return obj.map(cloneDeep);

      case T_OBJECT:
        cov_e6xla2q3n().b[7][1]++;
        cov_e6xla2q3n().s[21]++;
        return objectMap(obj, cloneDeep);

      default:
        cov_e6xla2q3n().b[7][2]++;
        cov_e6xla2q3n().s[22]++;
        return obj;
    }
  }
  /**
   * Shallow clone an object
   */

  function clone(obj) {
    cov_e6xla2q3n().f[4]++;
    cov_e6xla2q3n().s[23]++;

    if (obj instanceof Array) {
      cov_e6xla2q3n().b[8][0]++;
      cov_e6xla2q3n().s[24]++;
      return into([], obj);
    } else {
      cov_e6xla2q3n().b[8][1]++;
    }

    cov_e6xla2q3n().s[25]++;

    if (obj instanceof Object) {
      cov_e6xla2q3n().b[9][0]++;
      cov_e6xla2q3n().s[26]++;
      return Object.assign({}, obj);
    } else {
      cov_e6xla2q3n().b[9][1]++;
    }

    cov_e6xla2q3n().s[27]++;
    return obj;
  }
  function getType(v) {
    cov_e6xla2q3n().f[5]++;
    cov_e6xla2q3n().s[28]++;

    if (v === null) {
      cov_e6xla2q3n().b[10][0]++;
      cov_e6xla2q3n().s[29]++;
      return 'Null';
    } else {
      cov_e6xla2q3n().b[10][1]++;
    }

    cov_e6xla2q3n().s[30]++;

    if (v === undefined) {
      cov_e6xla2q3n().b[11][0]++;
      cov_e6xla2q3n().s[31]++;
      return 'Undefined';
    } else {
      cov_e6xla2q3n().b[11][1]++;
    }

    cov_e6xla2q3n().s[32]++;
    return v.constructor.name;
  }
  function jsType(v) {
    cov_e6xla2q3n().f[6]++;
    cov_e6xla2q3n().s[33]++;
    return getType(v).toLowerCase();
  }
  function isBoolean(v) {
    cov_e6xla2q3n().f[7]++;
    cov_e6xla2q3n().s[34]++;
    return _typeof(v) === T_BOOLEAN;
  }
  function isString(v) {
    cov_e6xla2q3n().f[8]++;
    cov_e6xla2q3n().s[35]++;
    return _typeof(v) === T_STRING;
  }
  function isNumber(v) {
    cov_e6xla2q3n().f[9]++;
    cov_e6xla2q3n().s[36]++;
    return (cov_e6xla2q3n().b[12][0]++, !isNaN(v)) && (cov_e6xla2q3n().b[12][1]++, _typeof(v) === T_NUMBER);
  }
  var isArray = (cov_e6xla2q3n().s[37]++, (cov_e6xla2q3n().b[13][0]++, Array.isArray) || (cov_e6xla2q3n().b[13][1]++, function (v) {
    cov_e6xla2q3n().f[10]++;
    cov_e6xla2q3n().s[38]++;
    return v instanceof Array;
  }));
  function isObject(v) {
    cov_e6xla2q3n().f[11]++;
    cov_e6xla2q3n().s[39]++;
    return (cov_e6xla2q3n().b[14][0]++, !!v) && (cov_e6xla2q3n().b[14][1]++, v.constructor === Object);
  }
  function isObjectLike(v) {
    cov_e6xla2q3n().f[12]++;
    cov_e6xla2q3n().s[40]++;
    return v === Object(v);
  } // objects, arrays, functions, date, custom object

  function isDate(v) {
    cov_e6xla2q3n().f[13]++;
    cov_e6xla2q3n().s[41]++;
    return jsType(v) === T_DATE;
  }
  function isRegExp(v) {
    cov_e6xla2q3n().f[14]++;
    cov_e6xla2q3n().s[42]++;
    return jsType(v) === T_REGEXP;
  }
  function isFunction(v) {
    cov_e6xla2q3n().f[15]++;
    cov_e6xla2q3n().s[43]++;
    return _typeof(v) === T_FUNCTION;
  }
  function isNil(v) {
    cov_e6xla2q3n().f[16]++;
    cov_e6xla2q3n().s[44]++;
    return (cov_e6xla2q3n().b[15][0]++, v === null) || (cov_e6xla2q3n().b[15][1]++, v === undefined);
  }
  function isNull(v) {
    cov_e6xla2q3n().f[17]++;
    cov_e6xla2q3n().s[45]++;
    return v === null;
  }
  function isUndefined(v) {
    cov_e6xla2q3n().f[18]++;
    cov_e6xla2q3n().s[46]++;
    return v === undefined;
  }
  function inArray(arr, item) {
    cov_e6xla2q3n().f[19]++;
    cov_e6xla2q3n().s[47]++;
    return arr.includes(item);
  }
  function notInArray(arr, item) {
    cov_e6xla2q3n().f[20]++;
    cov_e6xla2q3n().s[48]++;
    return !inArray(arr, item);
  }
  function truthy(arg) {
    cov_e6xla2q3n().f[21]++;
    cov_e6xla2q3n().s[49]++;
    return !!arg;
  }
  function isEmpty(x) {
    cov_e6xla2q3n().f[22]++;
    cov_e6xla2q3n().s[50]++;
    return (cov_e6xla2q3n().b[16][0]++, isNil(x)) || (cov_e6xla2q3n().b[16][1]++, isArray(x)) && (cov_e6xla2q3n().b[16][2]++, x.length === 0) || (cov_e6xla2q3n().b[16][3]++, isObject(x)) && (cov_e6xla2q3n().b[16][4]++, keys(x).length === 0) || (cov_e6xla2q3n().b[16][5]++, !x);
  } // ensure a value is an array

  function ensureArray(x) {
    cov_e6xla2q3n().f[23]++;
    cov_e6xla2q3n().s[51]++;
    return x instanceof Array ? (cov_e6xla2q3n().b[17][0]++, x) : (cov_e6xla2q3n().b[17][1]++, [x]);
  }
  function has(obj, prop) {
    cov_e6xla2q3n().f[24]++;
    cov_e6xla2q3n().s[52]++;
    return obj.hasOwnProperty(prop);
  }
  function err(s) {
    cov_e6xla2q3n().f[25]++;
    cov_e6xla2q3n().s[53]++;
    throw new Error(s);
  }
  var keys = (cov_e6xla2q3n().s[54]++, Object.keys); // ////////////////// UTILS ////////////////////

  /**
   * Iterate over an array or object
   * @param  {Array|Object} obj An object-like value
   * @param  {Function} fn The callback to run per item
   * @param  {*}   ctx  The object to use a context
   * @return {void}
   */

  function each(obj, fn) {
    cov_e6xla2q3n().f[26]++;
    cov_e6xla2q3n().s[55]++;

    if (obj instanceof Array) {
      cov_e6xla2q3n().b[18][0]++;
      var arr = (cov_e6xla2q3n().s[56]++, obj);
      cov_e6xla2q3n().s[57]++;

      for (var i = (cov_e6xla2q3n().s[58]++, 0), len = (cov_e6xla2q3n().s[59]++, arr.length); i < len; i++) {
        cov_e6xla2q3n().s[60]++;

        if (fn(arr[i], i) === false) {
          cov_e6xla2q3n().b[19][0]++;
          cov_e6xla2q3n().s[61]++;
          break;
        } else {
          cov_e6xla2q3n().b[19][1]++;
        }
      }
    } else {
      cov_e6xla2q3n().b[18][1]++;
      cov_e6xla2q3n().s[62]++;

      for (var k in obj) {
        cov_e6xla2q3n().s[63]++;

        if (obj.hasOwnProperty(k)) {
          cov_e6xla2q3n().b[20][0]++;
          cov_e6xla2q3n().s[64]++;

          if (fn(obj[k], k) === false) {
            cov_e6xla2q3n().b[21][0]++;
            cov_e6xla2q3n().s[65]++;
            break;
          } else {
            cov_e6xla2q3n().b[21][1]++;
          }
        } else {
          cov_e6xla2q3n().b[20][1]++;
        }
      }
    }
  }
  /**
   * Transform values in an object
   *
   * @param  {Object}   obj   An object whose values to transform
   * @param  {Function} fn The transform function
   * @return {Array|Object} Result object after applying the transform
   */

  function objectMap(obj, fn) {
    cov_e6xla2q3n().f[27]++;
    var o = (cov_e6xla2q3n().s[66]++, {});
    var objKeys = (cov_e6xla2q3n().s[67]++, keys(obj));
    cov_e6xla2q3n().s[68]++;

    for (var i = (cov_e6xla2q3n().s[69]++, 0); i < objKeys.length; i++) {
      var k = (cov_e6xla2q3n().s[70]++, objKeys[i]);
      cov_e6xla2q3n().s[71]++;
      o[k] = fn(obj[k], k);
    }

    cov_e6xla2q3n().s[72]++;
    return o;
  }
  /**
   * Deep merge objects or arrays.
   * When the inputs have unmergeable types, the source value (right hand side) is returned.
   * If inputs are arrays of same length and all elements are mergable, elements in the same position are merged together.
   * If any of the elements are unmergeable, elements in the source are appended to the target.
   * @param target {Object|Array} the target to merge into
   * @param obj {Object|Array} the source object
   */

  function merge(target, obj, options) {
    cov_e6xla2q3n().f[28]++;
    cov_e6xla2q3n().s[73]++;

    // take care of missing inputs
    if (target === MISSING) {
      cov_e6xla2q3n().b[22][0]++;
      cov_e6xla2q3n().s[74]++;
      return obj;
    } else {
      cov_e6xla2q3n().b[22][1]++;
    }

    cov_e6xla2q3n().s[75]++;

    if (obj === MISSING) {
      cov_e6xla2q3n().b[23][0]++;
      cov_e6xla2q3n().s[76]++;
      return target;
    } else {
      cov_e6xla2q3n().b[23][1]++;
    }

    var inputs = (cov_e6xla2q3n().s[77]++, [target, obj]);
    cov_e6xla2q3n().s[78]++;

    if (!((cov_e6xla2q3n().b[25][0]++, inputs.every(isObject)) || (cov_e6xla2q3n().b[25][1]++, inputs.every(isArray)))) {
      cov_e6xla2q3n().b[24][0]++;
      cov_e6xla2q3n().s[79]++;
      throw Error('mismatched types. must both be array or object');
    } else {
      cov_e6xla2q3n().b[24][1]++;
    } // default options


    cov_e6xla2q3n().s[80]++;
    options.flatten = (cov_e6xla2q3n().b[26][0]++, options.flatten) || (cov_e6xla2q3n().b[26][1]++, false);
    cov_e6xla2q3n().s[81]++;

    if (isArray(target)) {
      cov_e6xla2q3n().b[27][0]++;
      var result = (cov_e6xla2q3n().s[82]++, target);
      var input = (cov_e6xla2q3n().s[83]++, obj);
      cov_e6xla2q3n().s[84]++;

      if (options.flatten) {
        cov_e6xla2q3n().b[28][0]++;
        var i = (cov_e6xla2q3n().s[85]++, 0);
        var j = (cov_e6xla2q3n().s[86]++, 0);
        cov_e6xla2q3n().s[87]++;

        while ((cov_e6xla2q3n().b[29][0]++, i < result.length) && (cov_e6xla2q3n().b[29][1]++, j < input.length)) {
          cov_e6xla2q3n().s[88]++;
          result[i] = merge(result[i++], input[j++], options);
        }

        cov_e6xla2q3n().s[89]++;

        while (j < input.length) {
          cov_e6xla2q3n().s[90]++;
          result.push(obj[j++]);
        }
      } else {
        cov_e6xla2q3n().b[28][1]++;
        cov_e6xla2q3n().s[91]++;
        arrayPush.apply(result, input);
      }
    } else {
      cov_e6xla2q3n().b[27][1]++;
      cov_e6xla2q3n().s[92]++;
      Object.keys(obj).forEach(function (k) {
        cov_e6xla2q3n().f[29]++;
        cov_e6xla2q3n().s[93]++;

        if (target.hasOwnProperty(k)) {
          cov_e6xla2q3n().b[30][0]++;
          cov_e6xla2q3n().s[94]++;
          target[k] = merge(target[k], obj[k], options);
        } else {
          cov_e6xla2q3n().b[30][1]++;
          cov_e6xla2q3n().s[95]++;
          target[k] = obj[k];
        }
      });
    }

    cov_e6xla2q3n().s[96]++;
    return target;
  }
  /**
   * Reduce any array-like object
   * @param collection
   * @param fn
   * @param accumulator
   * @returns {*}
   */

  function reduce(collection, fn, accumulator) {
    cov_e6xla2q3n().f[30]++;
    cov_e6xla2q3n().s[97]++;

    if (Array.isArray(collection)) {
      cov_e6xla2q3n().b[31][0]++;
      cov_e6xla2q3n().s[98]++;
      return collection.reduce(fn, accumulator);
    } else {
      cov_e6xla2q3n().b[31][1]++;
    } // array-like objects


    cov_e6xla2q3n().s[99]++;
    each(collection, function (v, k) {
      cov_e6xla2q3n().f[31]++;
      cov_e6xla2q3n().s[100]++;
      return accumulator = fn(accumulator, v, k, collection);
    });
    cov_e6xla2q3n().s[101]++;
    return accumulator;
  }
  /**
   * Returns the intersection between two arrays
   *
   * @param  {Array} xs The first array
   * @param  {Array} ys The second array
   * @return {Array}    Result array
   */

  function intersection(xs, ys) {
    cov_e6xla2q3n().f[32]++;
    var hashes = (cov_e6xla2q3n().s[102]++, ys.map(hashCode));
    cov_e6xla2q3n().s[103]++;
    return xs.filter(function (v) {
      cov_e6xla2q3n().f[33]++;
      cov_e6xla2q3n().s[104]++;
      return inArray(hashes, hashCode(v));
    });
  }
  /**
   * Returns the union of two arrays
   *
   * @param  {Array} xs The first array
   * @param  {Array} ys The second array
   * @return {Array}   The result array
   */

  function union(xs, ys) {
    cov_e6xla2q3n().f[34]++;
    cov_e6xla2q3n().s[105]++;
    return into(into([], xs), ys.filter(notInArray.bind(null, xs)));
  }
  /**
   * Flatten the array
   *
   * @param  {Array} xs The array to flatten
   * @param {Number} depth The number of nested lists to iterate
   */

  function flatten(xs) {
    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_e6xla2q3n().b[32][0]++, -1);
    cov_e6xla2q3n().f[35]++;
    var arr = (cov_e6xla2q3n().s[106]++, []);

    function flatten2(ys, iter) {
      cov_e6xla2q3n().f[36]++;
      cov_e6xla2q3n().s[107]++;

      for (var i = (cov_e6xla2q3n().s[108]++, 0), len = (cov_e6xla2q3n().s[109]++, ys.length); i < len; i++) {
        cov_e6xla2q3n().s[110]++;

        if ((cov_e6xla2q3n().b[34][0]++, isArray(ys[i])) && ((cov_e6xla2q3n().b[34][1]++, iter > 0) || (cov_e6xla2q3n().b[34][2]++, iter < 0))) {
          cov_e6xla2q3n().b[33][0]++;
          cov_e6xla2q3n().s[111]++;
          flatten2(ys[i], Math.max(-1, iter - 1));
        } else {
          cov_e6xla2q3n().b[33][1]++;
          cov_e6xla2q3n().s[112]++;
          arr.push(ys[i]);
        }
      }
    }

    cov_e6xla2q3n().s[113]++;
    flatten2(xs, depth);
    cov_e6xla2q3n().s[114]++;
    return arr;
  }
  /**
   * Unwrap a single element array to specified depth
   * @param {Array} arr
   * @param {Number} depth
   */

  function unwrap(arr, depth) {
    cov_e6xla2q3n().f[37]++;
    cov_e6xla2q3n().s[115]++;

    if (depth < 1) {
      cov_e6xla2q3n().b[35][0]++;
      cov_e6xla2q3n().s[116]++;
      return arr;
    } else {
      cov_e6xla2q3n().b[35][1]++;
    }

    cov_e6xla2q3n().s[117]++;

    while ((cov_e6xla2q3n().b[36][0]++, depth--) && (cov_e6xla2q3n().b[36][1]++, isArray(arr)) && (cov_e6xla2q3n().b[36][2]++, arr.length === 1)) {
      cov_e6xla2q3n().s[118]++;
      arr = arr[0];
    }

    cov_e6xla2q3n().s[119]++;
    return arr;
  }
  /**
   * Determine whether two values are the same or strictly equivalent
   *
   * @param  {*}  a The first value
   * @param  {*}  b The second value
   * @return {Boolean}   Result of comparison
   */

  function isEqual(a, b) {
    cov_e6xla2q3n().f[38]++;
    var lhs = (cov_e6xla2q3n().s[120]++, [a]);
    var rhs = (cov_e6xla2q3n().s[121]++, [b]);
    cov_e6xla2q3n().s[122]++;

    while (lhs.length > 0) {
      cov_e6xla2q3n().s[123]++;
      a = lhs.pop();
      cov_e6xla2q3n().s[124]++;
      b = rhs.pop(); // strictly equal must be equal.

      cov_e6xla2q3n().s[125]++;

      if (a === b) {
        cov_e6xla2q3n().b[37][0]++;
        cov_e6xla2q3n().s[126]++;
        continue;
      } else {
        cov_e6xla2q3n().b[37][1]++;
      } // unequal types and functions cannot be equal.


      var type = (cov_e6xla2q3n().s[127]++, jsType(a));
      cov_e6xla2q3n().s[128]++;

      if ((cov_e6xla2q3n().b[39][0]++, type !== jsType(b)) || (cov_e6xla2q3n().b[39][1]++, type === T_FUNCTION)) {
        cov_e6xla2q3n().b[38][0]++;
        cov_e6xla2q3n().s[129]++;
        return false;
      } else {
        cov_e6xla2q3n().b[38][1]++;
      }

      cov_e6xla2q3n().s[130]++;

      if ((cov_e6xla2q3n().b[41][0]++, a instanceof Array) && (cov_e6xla2q3n().b[41][1]++, b instanceof Array)) {
        cov_e6xla2q3n().b[40][0]++;
        cov_e6xla2q3n().s[131]++;

        if (a.length !== b.length) {
          cov_e6xla2q3n().b[42][0]++;
          cov_e6xla2q3n().s[132]++;
          return false;
        } else {
          cov_e6xla2q3n().b[42][1]++;
        }

        cov_e6xla2q3n().s[133]++;
        into(lhs, a);
        cov_e6xla2q3n().s[134]++;
        into(rhs, b);
      } else {
        cov_e6xla2q3n().b[40][1]++;
        cov_e6xla2q3n().s[135]++;

        if ((cov_e6xla2q3n().b[44][0]++, a instanceof Object) && (cov_e6xla2q3n().b[44][1]++, b instanceof Object)) {
          cov_e6xla2q3n().b[43][0]++;
          // deep compare objects
          var ka = (cov_e6xla2q3n().s[136]++, keys(a));
          var kb = (cov_e6xla2q3n().s[137]++, keys(b)); // check length of keys early

          cov_e6xla2q3n().s[138]++;

          if (ka.length !== kb.length) {
            cov_e6xla2q3n().b[45][0]++;
            cov_e6xla2q3n().s[139]++;
            return false;
          } else {
            cov_e6xla2q3n().b[45][1]++;
          } // we know keys are strings so we sort before comparing


          cov_e6xla2q3n().s[140]++;
          ka.sort();
          cov_e6xla2q3n().s[141]++;
          kb.sort(); // compare keys

          cov_e6xla2q3n().s[142]++;

          for (var i = (cov_e6xla2q3n().s[143]++, 0), len = (cov_e6xla2q3n().s[144]++, ka.length); i < len; i++) {
            var currentKey = (cov_e6xla2q3n().s[145]++, ka[i]);
            cov_e6xla2q3n().s[146]++;

            if (currentKey !== kb[i]) {
              cov_e6xla2q3n().b[46][0]++;
              cov_e6xla2q3n().s[147]++;
              return false;
            } else {
              cov_e6xla2q3n().b[46][1]++;
              cov_e6xla2q3n().s[148]++;
              // save later work
              lhs.push(a[currentKey]);
              cov_e6xla2q3n().s[149]++;
              rhs.push(b[currentKey]);
            }
          }
        } else {
          cov_e6xla2q3n().b[43][1]++;
          cov_e6xla2q3n().s[150]++;

          // compare encoded values
          if (encode(a) !== encode(b)) {
            cov_e6xla2q3n().b[47][0]++;
            cov_e6xla2q3n().s[151]++;
            return false;
          } else {
            cov_e6xla2q3n().b[47][1]++;
          }
        }
      } // leverage toString for Date and RegExp types
      // switch (type) {
      //   case T_ARRAY:
      //     if (a.length !== b.length) return false
      //     //if (a.length === b.length && a.length === 0) continue
      //     into(lhs, a)
      //     into(rhs, b)
      //     break
      //   case T_OBJECT:
      //     // deep compare objects
      //     let ka = keys(a)
      //     let kb = keys(b)
      //     // check length of keys early
      //     if (ka.length !== kb.length) return false
      //     // we know keys are strings so we sort before comparing
      //     ka.sort()
      //     kb.sort()
      //     // compare keys
      //     for (let i = 0, len = ka.length; i < len; i++) {
      //       let temp = ka[i]
      //       if (temp !== kb[i]) {
      //         return false
      //       } else {
      //         // save later work
      //         lhs.push(a[temp])
      //         rhs.push(b[temp])
      //       }
      //     }
      //     break
      //   default:
      //     // compare encoded values
      //     if (encode(a) !== encode(b)) return false
      // }

    }

    cov_e6xla2q3n().s[152]++;
    return lhs.length === 0;
  }
  /**
   * Return a new unique version of the collection
   * @param  {Array} xs The input collection
   * @return {Array}    A new collection with unique values
   */

  function unique(xs) {
    cov_e6xla2q3n().f[39]++;
    var h = (cov_e6xla2q3n().s[153]++, {});
    var arr = (cov_e6xla2q3n().s[154]++, []);
    cov_e6xla2q3n().s[155]++;
    each(xs, function (item) {
      cov_e6xla2q3n().f[40]++;
      var k = (cov_e6xla2q3n().s[156]++, hashCode(item));
      cov_e6xla2q3n().s[157]++;

      if (!has(h, k)) {
        cov_e6xla2q3n().b[48][0]++;
        cov_e6xla2q3n().s[158]++;
        arr.push(item);
        cov_e6xla2q3n().s[159]++;
        h[k] = 0;
      } else {
        cov_e6xla2q3n().b[48][1]++;
      }
    });
    cov_e6xla2q3n().s[160]++;
    return arr;
  }
  /**
   * Encode value to string using a simple non-colliding stable scheme.
   *
   * @param value
   * @returns {*}
   */

  function encode(value) {
    cov_e6xla2q3n().f[41]++;
    var type = (cov_e6xla2q3n().s[161]++, jsType(value));
    cov_e6xla2q3n().s[162]++;

    switch (type) {
      case T_BOOLEAN:
        cov_e6xla2q3n().b[49][0]++;

      case T_NUMBER:
        cov_e6xla2q3n().b[49][1]++;

      case T_REGEXP:
        cov_e6xla2q3n().b[49][2]++;
        cov_e6xla2q3n().s[163]++;
        return value.toString();

      case T_STRING:
        cov_e6xla2q3n().b[49][3]++;
        cov_e6xla2q3n().s[164]++;
        return JSON.stringify(value);

      case T_DATE:
        cov_e6xla2q3n().b[49][4]++;
        cov_e6xla2q3n().s[165]++;
        return value.toISOString();

      case T_NULL:
        cov_e6xla2q3n().b[49][5]++;

      case T_UNDEFINED:
        cov_e6xla2q3n().b[49][6]++;
        cov_e6xla2q3n().s[166]++;
        return type;

      case T_ARRAY:
        cov_e6xla2q3n().b[49][7]++;
        cov_e6xla2q3n().s[167]++;
        return '[' + value.map(encode) + ']';

      default:
        cov_e6xla2q3n().b[49][8]++;
        var prefix = (cov_e6xla2q3n().s[168]++, type === T_OBJECT ? (cov_e6xla2q3n().b[50][0]++, '') : (cov_e6xla2q3n().b[50][1]++, "".concat(getType(value))));
        var objKeys = (cov_e6xla2q3n().s[169]++, keys(value));
        cov_e6xla2q3n().s[170]++;
        objKeys.sort();
        cov_e6xla2q3n().s[171]++;
        return "".concat(prefix, "{") + objKeys.map(function (k) {
          cov_e6xla2q3n().f[42]++;
          cov_e6xla2q3n().s[172]++;
          return "".concat(encode(k), ":").concat(encode(value[k]));
        }) + '}';
    }
  }
  /**
   * Generate hash code
   * This selected function is the result of benchmarking various hash functions.
   * This version performs well and can hash 10^6 documents in ~3s with on average 100 collisions.
   *
   * @param value
   * @returns {*}
   */

  function hashCode(value) {
    cov_e6xla2q3n().f[43]++;
    cov_e6xla2q3n().s[173]++;

    if (isNil(value)) {
      cov_e6xla2q3n().b[51][0]++;
      cov_e6xla2q3n().s[174]++;
      return null;
    } else {
      cov_e6xla2q3n().b[51][1]++;
    }

    var hash = (cov_e6xla2q3n().s[175]++, 0);
    var s = (cov_e6xla2q3n().s[176]++, encode(value));
    var i = (cov_e6xla2q3n().s[177]++, s.length);
    cov_e6xla2q3n().s[178]++;

    while (i) {
      cov_e6xla2q3n().s[179]++;
      hash = (hash << 5) - hash ^ s.charCodeAt(--i);
    }

    cov_e6xla2q3n().s[180]++;
    return hash >>> 0;
  }
  /**
   * Default compare function
   * @param {*} a
   * @param {*} b
   */

  function compare(a, b) {
    cov_e6xla2q3n().f[44]++;
    cov_e6xla2q3n().s[181]++;

    if (a < b) {
      cov_e6xla2q3n().b[52][0]++;
      cov_e6xla2q3n().s[182]++;
      return -1;
    } else {
      cov_e6xla2q3n().b[52][1]++;
    }

    cov_e6xla2q3n().s[183]++;

    if (a > b) {
      cov_e6xla2q3n().b[53][0]++;
      cov_e6xla2q3n().s[184]++;
      return 1;
    } else {
      cov_e6xla2q3n().b[53][1]++;
    }

    cov_e6xla2q3n().s[185]++;
    return 0;
  }
  /**
   * Returns a (stably) sorted copy of list, ranked in ascending order by the results of running each value through iteratee
   *
   * This implementation treats null/undefined sort keys as less than every other type
   *
   * @param {Array}   collection
   * @param {Function} fn The function used to resolve sort keys
   * @param {Function} cmp The comparator function to use for comparing values
   * @return {Array} Returns a new sorted array by the given iteratee
   */

  function sortBy(collection, fn, cmp) {
    cov_e6xla2q3n().f[45]++;
    var sorted = (cov_e6xla2q3n().s[186]++, []);
    var result = (cov_e6xla2q3n().s[187]++, []);
    var hash = (cov_e6xla2q3n().s[188]++, new Object());
    cov_e6xla2q3n().s[189]++;
    cmp = (cov_e6xla2q3n().b[54][0]++, cmp) || (cov_e6xla2q3n().b[54][1]++, compare);
    cov_e6xla2q3n().s[190]++;

    if (isEmpty(collection)) {
      cov_e6xla2q3n().b[55][0]++;
      cov_e6xla2q3n().s[191]++;
      return collection;
    } else {
      cov_e6xla2q3n().b[55][1]++;
    }

    cov_e6xla2q3n().s[192]++;

    for (var i = (cov_e6xla2q3n().s[193]++, 0); i < collection.length; i++) {
      var obj = (cov_e6xla2q3n().s[194]++, collection[i]);
      var key = (cov_e6xla2q3n().s[195]++, fn(obj, i)); // objects with nil keys will go in first

      cov_e6xla2q3n().s[196]++;

      if (isNil(key)) {
        cov_e6xla2q3n().b[56][0]++;
        cov_e6xla2q3n().s[197]++;
        result.push(obj);
      } else {
        cov_e6xla2q3n().b[56][1]++;
        cov_e6xla2q3n().s[198]++;

        if (hash[key]) {
          cov_e6xla2q3n().b[57][0]++;
          cov_e6xla2q3n().s[199]++;
          hash[key].push(obj);
        } else {
          cov_e6xla2q3n().b[57][1]++;
          cov_e6xla2q3n().s[200]++;
          hash[key] = [obj];
        }

        cov_e6xla2q3n().s[201]++;
        sorted.push(key);
      }
    } // use native array sorting but enforce stableness


    cov_e6xla2q3n().s[202]++;
    sorted.sort(cmp);
    cov_e6xla2q3n().s[203]++;

    for (var _i = (cov_e6xla2q3n().s[204]++, 0); _i < sorted.length; _i++) {
      cov_e6xla2q3n().s[205]++;
      into(result, hash[sorted[_i]]);
    }

    cov_e6xla2q3n().s[206]++;
    return result;
  }
  /**
   * Groups the collection into sets by the returned key
   *
   * @param collection
   * @param fn {Function} to compute the group key of an item in the collection
   * @returns {{keys: Array, groups: Array}}
   */

  function groupBy(collection, fn) {
    cov_e6xla2q3n().f[46]++;
    var result = (cov_e6xla2q3n().s[207]++, {
      'keys': [],
      'groups': []
    });
    var lookup = (cov_e6xla2q3n().s[208]++, {});
    cov_e6xla2q3n().s[209]++;
    each(collection, function (obj) {
      cov_e6xla2q3n().f[47]++;
      var key = (cov_e6xla2q3n().s[210]++, fn(obj));
      var hash = (cov_e6xla2q3n().s[211]++, hashCode(key));
      var index = (cov_e6xla2q3n().s[212]++, -1);
      cov_e6xla2q3n().s[213]++;

      if (lookup[hash] === undefined) {
        cov_e6xla2q3n().b[58][0]++;
        cov_e6xla2q3n().s[214]++;
        index = result.keys.length;
        cov_e6xla2q3n().s[215]++;
        lookup[hash] = index;
        cov_e6xla2q3n().s[216]++;
        result.keys.push(key);
        cov_e6xla2q3n().s[217]++;
        result.groups.push([]);
      } else {
        cov_e6xla2q3n().b[58][1]++;
      }

      cov_e6xla2q3n().s[218]++;
      index = lookup[hash];
      cov_e6xla2q3n().s[219]++;
      result.groups[index].push(obj);
    });
    cov_e6xla2q3n().s[220]++;
    return result;
  }
  /**
   * Push elements in given array into target array
   *
   * @param {*} target The array to push into
   * @param {*} xs The array of elements to push
   */

  function into(target, xs) {
    cov_e6xla2q3n().f[48]++;
    cov_e6xla2q3n().s[221]++;
    arrayPush.apply(target, xs);
    cov_e6xla2q3n().s[222]++;
    return target;
  }
  /**
   * Find the insert index for the given key in a sorted array.
   *
   * @param {*} array The sorted array to search
   * @param {*} item The search key
   */

  function findInsertIndex(array, item) {
    cov_e6xla2q3n().f[49]++;
    // uses binary search
    var lo = (cov_e6xla2q3n().s[223]++, 0);
    var hi = (cov_e6xla2q3n().s[224]++, array.length - 1);
    cov_e6xla2q3n().s[225]++;

    while (lo <= hi) {
      var mid = (cov_e6xla2q3n().s[226]++, Math.round(lo + (hi - lo) / 2));
      cov_e6xla2q3n().s[227]++;

      if (item < array[mid]) {
        cov_e6xla2q3n().b[59][0]++;
        cov_e6xla2q3n().s[228]++;
        hi = mid - 1;
      } else {
        cov_e6xla2q3n().b[59][1]++;
        cov_e6xla2q3n().s[229]++;

        if (item > array[mid]) {
          cov_e6xla2q3n().b[60][0]++;
          cov_e6xla2q3n().s[230]++;
          lo = mid + 1;
        } else {
          cov_e6xla2q3n().b[60][1]++;
          cov_e6xla2q3n().s[231]++;
          return mid;
        }
      }
    }

    cov_e6xla2q3n().s[232]++;
    return lo;
  }
  /**
   * This is a generic memoization function
   *
   * This implementation uses a cache independent of the function being memoized
   * to allow old values to be garbage collected when the memoized function goes out of scope.
   *
   * @param {*} fn The function object to memoize
   */

  function memoize(fn) {
    var _this = this;

    cov_e6xla2q3n().f[50]++;
    cov_e6xla2q3n().s[233]++;
    return function (memo) {
      cov_e6xla2q3n().f[51]++;
      cov_e6xla2q3n().s[234]++;
      return function () {
        cov_e6xla2q3n().f[52]++;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var key = (cov_e6xla2q3n().s[235]++, hashCode(args));
        cov_e6xla2q3n().s[236]++;

        if (!has(memo, key)) {
          cov_e6xla2q3n().b[61][0]++;
          cov_e6xla2q3n().s[237]++;
          memo[key] = fn.apply(_this, args);
        } else {
          cov_e6xla2q3n().b[61][1]++;
        }

        cov_e6xla2q3n().s[238]++;
        return memo[key];
      };
    }({
      /* storage */
    });
  } // mingo internal

  /**
   * Retrieve the value of a given key on an object
   * @param obj
   * @param field
   * @returns {*}
   * @private
   */

  function getValue(obj, field) {
    cov_e6xla2q3n().f[53]++;
    cov_e6xla2q3n().s[239]++;
    return isObjectLike(obj) ? (cov_e6xla2q3n().b[62][0]++, obj[field]) : (cov_e6xla2q3n().b[62][1]++, undefined);
  }
  /**
   * Resolve the value of the field (dot separated) on the given object
   * @param obj {Object} the object context
   * @param selector {String} dot separated path to field
   * @returns {*}
   */

  function resolve(obj, selector, options) {
    cov_e6xla2q3n().f[54]++;
    var depth = (cov_e6xla2q3n().s[240]++, 0); // options

    cov_e6xla2q3n().s[241]++;

    if (options === undefined) {
      cov_e6xla2q3n().b[63][0]++;
      cov_e6xla2q3n().s[242]++;
      options = {
        preserveMetadata: false
      };
    } else {
      cov_e6xla2q3n().b[63][1]++;
    }

    function resolve2(o, path) {
      cov_e6xla2q3n().f[55]++;
      var value = (cov_e6xla2q3n().s[243]++, o);
      cov_e6xla2q3n().s[244]++;

      for (var i = (cov_e6xla2q3n().s[245]++, 0); i < path.length; i++) {
        var field = (cov_e6xla2q3n().s[246]++, path[i]);
        var isText = (cov_e6xla2q3n().s[247]++, field.match(/^\d+$/) === null);
        cov_e6xla2q3n().s[248]++;

        if ((cov_e6xla2q3n().b[65][0]++, isText) && (cov_e6xla2q3n().b[65][1]++, Array.isArray(value))) {
          cov_e6xla2q3n().b[64][0]++;
          cov_e6xla2q3n().s[249]++;

          // On the first iteration, we check if we received a stop flag.
          // If so, we stop to prevent iterating over a nested array value
          // on consecutive object keys in the selector.
          if ((cov_e6xla2q3n().b[67][0]++, i === 0) && (cov_e6xla2q3n().b[67][1]++, depth > 0)) {
            cov_e6xla2q3n().b[66][0]++;
            cov_e6xla2q3n().s[250]++;
            break;
          } else {
            cov_e6xla2q3n().b[66][1]++;
          }

          cov_e6xla2q3n().s[251]++;
          depth += 1;
          cov_e6xla2q3n().s[252]++;
          path = path.slice(i);
          cov_e6xla2q3n().s[253]++;
          value = reduce(value, function (acc, item) {
            cov_e6xla2q3n().f[56]++;
            var v = (cov_e6xla2q3n().s[254]++, resolve2(item, path));
            cov_e6xla2q3n().s[255]++;

            if (v !== undefined) {
              cov_e6xla2q3n().b[68][0]++;
              cov_e6xla2q3n().s[256]++;
              acc.push(v);
            } else {
              cov_e6xla2q3n().b[68][1]++;
            }

            cov_e6xla2q3n().s[257]++;
            return acc;
          }, []);
          cov_e6xla2q3n().s[258]++;
          break;
        } else {
          cov_e6xla2q3n().b[64][1]++;
          cov_e6xla2q3n().s[259]++;
          value = getValue(value, field);
        }

        cov_e6xla2q3n().s[260]++;

        if (value === undefined) {
          cov_e6xla2q3n().b[69][0]++;
          cov_e6xla2q3n().s[261]++;
          break;
        } else {
          cov_e6xla2q3n().b[69][1]++;
        }
      }

      cov_e6xla2q3n().s[262]++;
      return value;
    }

    cov_e6xla2q3n().s[263]++;
    obj = inArray(JS_SIMPLE_TYPES, jsType(obj)) ? (cov_e6xla2q3n().b[70][0]++, obj) : (cov_e6xla2q3n().b[70][1]++, resolve2(obj, selector.split('.')));
    cov_e6xla2q3n().s[264]++;
    return options.preserveMetadata === true ? (cov_e6xla2q3n().b[71][0]++, {
      result: obj,
      depth: depth
    }) : (cov_e6xla2q3n().b[71][1]++, obj);
  }
  /**
   * Returns the full object to the resolved value given by the selector.
   * This function excludes empty values as they aren't practically useful.
   *
   * @param obj {Object} the object context
   * @param selector {String} dot separated path to field
   */

  function resolveObj(obj, selector, options) {
    cov_e6xla2q3n().f[57]++;
    cov_e6xla2q3n().s[265]++;

    // options
    if (options === undefined) {
      cov_e6xla2q3n().b[72][0]++;
      cov_e6xla2q3n().s[266]++;
      options = {
        preserveMissingValues: false
      };
    } else {
      cov_e6xla2q3n().b[72][1]++;
    }

    var names = (cov_e6xla2q3n().s[267]++, selector.split('.'));
    var key = (cov_e6xla2q3n().s[268]++, names[0]); // get the next part of the selector

    var next = (cov_e6xla2q3n().s[269]++, names.slice(1).join('.'));
    var isIndex = (cov_e6xla2q3n().s[270]++, key.match(/^\d+$/) !== null);
    var hasNext = (cov_e6xla2q3n().s[271]++, names.length > 1);
    var result;
    var value;
    cov_e6xla2q3n().s[272]++;

    if (obj instanceof Array) {
      cov_e6xla2q3n().b[73][0]++;
      cov_e6xla2q3n().s[273]++;

      if (isIndex) {
        cov_e6xla2q3n().b[74][0]++;
        cov_e6xla2q3n().s[274]++;
        result = getValue(obj, Number(key));
        cov_e6xla2q3n().s[275]++;

        if (hasNext) {
          cov_e6xla2q3n().b[75][0]++;
          cov_e6xla2q3n().s[276]++;
          result = resolveObj(result, next, options);
        } else {
          cov_e6xla2q3n().b[75][1]++;
        }

        cov_e6xla2q3n().s[277]++;
        result = [result];
      } else {
        cov_e6xla2q3n().b[74][1]++;
        cov_e6xla2q3n().s[278]++;
        result = [];
        cov_e6xla2q3n().s[279]++;
        each(obj, function (item) {
          cov_e6xla2q3n().f[58]++;
          cov_e6xla2q3n().s[280]++;
          value = resolveObj(item, selector, options);
          cov_e6xla2q3n().s[281]++;

          if (options.preserveMissingValues) {
            cov_e6xla2q3n().b[76][0]++;
            cov_e6xla2q3n().s[282]++;

            if (value === undefined) {
              cov_e6xla2q3n().b[77][0]++;
              cov_e6xla2q3n().s[283]++;
              value = MISSING;
            } else {
              cov_e6xla2q3n().b[77][1]++;
            }

            cov_e6xla2q3n().s[284]++;
            result.push(value);
          } else {
            cov_e6xla2q3n().b[76][1]++;
            cov_e6xla2q3n().s[285]++;

            if (value !== undefined) {
              cov_e6xla2q3n().b[78][0]++;
              cov_e6xla2q3n().s[286]++;
              result.push(value);
            } else {
              cov_e6xla2q3n().b[78][1]++;
            }
          }
        });
      }
    } else {
      cov_e6xla2q3n().b[73][1]++;
      cov_e6xla2q3n().s[287]++;
      value = getValue(obj, key);
      cov_e6xla2q3n().s[288]++;

      if (hasNext) {
        cov_e6xla2q3n().b[79][0]++;
        cov_e6xla2q3n().s[289]++;
        value = resolveObj(value, next, options);
      } else {
        cov_e6xla2q3n().b[79][1]++;
      }

      cov_e6xla2q3n().s[290]++;

      if (value === undefined) {
        cov_e6xla2q3n().b[80][0]++;
        cov_e6xla2q3n().s[291]++;
        return undefined;
      } else {
        cov_e6xla2q3n().b[80][1]++;
      }

      cov_e6xla2q3n().s[292]++;
      result = {};
      cov_e6xla2q3n().s[293]++;
      result[key] = value;
    }

    cov_e6xla2q3n().s[294]++;
    return result;
  }
  /**
   * Filter out all MISSING values from the object in-place
   * @param {*} obj The object the filter
   */

  function filterMissing(obj) {
    cov_e6xla2q3n().f[59]++;
    cov_e6xla2q3n().s[295]++;

    if (Array.isArray(obj)) {
      cov_e6xla2q3n().b[81][0]++;
      cov_e6xla2q3n().s[296]++;

      for (var i = (cov_e6xla2q3n().s[297]++, obj.length - 1); i >= 0; i--) {
        cov_e6xla2q3n().s[298]++;

        if (obj[i] === MISSING) {
          cov_e6xla2q3n().b[82][0]++;
          cov_e6xla2q3n().s[299]++;
          obj.splice(i, 1);
        } else {
          cov_e6xla2q3n().b[82][1]++;
          cov_e6xla2q3n().s[300]++;
          filterMissing(obj[i]);
        }
      }
    } else {
      cov_e6xla2q3n().b[81][1]++;
      cov_e6xla2q3n().s[301]++;

      if (isObject(obj)) {
        cov_e6xla2q3n().b[83][0]++;
        cov_e6xla2q3n().s[302]++;

        for (var k in obj) {
          cov_e6xla2q3n().s[303]++;

          if (obj.hasOwnProperty(k)) {
            cov_e6xla2q3n().b[84][0]++;
            cov_e6xla2q3n().s[304]++;
            filterMissing(obj[k]);
          } else {
            cov_e6xla2q3n().b[84][1]++;
          }
        }
      } else {
        cov_e6xla2q3n().b[83][1]++;
      }
    }

    cov_e6xla2q3n().s[305]++;
    return obj;
  }
  /**
   * Walk the object graph and execute the given transform function
   * @param  {Object|Array} obj   The object to traverse
   * @param  {String} selector    The selector
   * @param  {Function} fn Function to execute for value at the end the traversal
   * @param  {Boolean} force Force generating missing parts of object graph
   * @return {*}
   */

  function traverse(obj, selector, fn, force) {
    cov_e6xla2q3n().f[60]++;
    var names = (cov_e6xla2q3n().s[306]++, selector.split('.'));
    var key = (cov_e6xla2q3n().s[307]++, names[0]);
    var next = (cov_e6xla2q3n().s[308]++, names.slice(1).join('.'));
    cov_e6xla2q3n().s[309]++;

    if (names.length === 1) {
      cov_e6xla2q3n().b[85][0]++;
      cov_e6xla2q3n().s[310]++;
      fn(obj, key);
    } else {
      cov_e6xla2q3n().b[85][1]++;
      cov_e6xla2q3n().s[311]++;

      // force the rest of the graph while traversing
      if ((cov_e6xla2q3n().b[87][0]++, force === true) && (cov_e6xla2q3n().b[87][1]++, isNil(obj[key]))) {
        cov_e6xla2q3n().b[86][0]++;
        cov_e6xla2q3n().s[312]++;
        obj[key] = {};
      } else {
        cov_e6xla2q3n().b[86][1]++;
      }

      cov_e6xla2q3n().s[313]++;
      traverse(obj[key], next, fn, force);
    }
  }
  /**
   * Set the value of the given object field
   *
   * @param obj {Object|Array} the object context
   * @param selector {String} path to field
   * @param value {*} the value to set
   */

  function setValue(obj, selector, value) {
    cov_e6xla2q3n().f[61]++;
    cov_e6xla2q3n().s[314]++;
    traverse(obj, selector, function (item, key) {
      cov_e6xla2q3n().f[62]++;
      cov_e6xla2q3n().s[315]++;
      item[key] = value;
    }, true);
  }
  function removeValue(obj, selector) {
    cov_e6xla2q3n().f[63]++;
    cov_e6xla2q3n().s[316]++;
    traverse(obj, selector, function (item, key) {
      cov_e6xla2q3n().f[64]++;
      cov_e6xla2q3n().s[317]++;

      if ((cov_e6xla2q3n().b[89][0]++, item instanceof Array) && (cov_e6xla2q3n().b[89][1]++, /^\d+$/.test(key))) {
        cov_e6xla2q3n().b[88][0]++;
        cov_e6xla2q3n().s[318]++;
        item.splice(parseInt(key), 1);
      } else {
        cov_e6xla2q3n().b[88][1]++;
        cov_e6xla2q3n().s[319]++;

        if (isObject(item)) {
          cov_e6xla2q3n().b[90][0]++;
          cov_e6xla2q3n().s[320]++;
          delete item[key];
        } else {
          cov_e6xla2q3n().b[90][1]++;
        }
      }
    });
  }
  /**
   * Check whether the given name is an operator. We assume any field name starting with '$' is an operator.
   * This is cheap and safe to do since keys beginning with '$' should be reserved for internal use.
   * @param {String} name
   */

  function isOperator(name) {
    cov_e6xla2q3n().f[65]++;
    cov_e6xla2q3n().s[321]++;
    return (cov_e6xla2q3n().b[91][0]++, !!name) && (cov_e6xla2q3n().b[91][1]++, name[0] === '$');
  }

  function regexOptions(options) {
    cov_e6xla2q3n().f[66]++;
    var modifiers;
    cov_e6xla2q3n().s[322]++;
    modifiers += options.ignoreCase ? (cov_e6xla2q3n().b[92][0]++, 'i') : (cov_e6xla2q3n().b[92][1]++, '');
    cov_e6xla2q3n().s[323]++;
    modifiers += options.multiline ? (cov_e6xla2q3n().b[93][0]++, 'm') : (cov_e6xla2q3n().b[93][1]++, '');
    cov_e6xla2q3n().s[324]++;
    modifiers += options.global ? (cov_e6xla2q3n().b[94][0]++, 'g') : (cov_e6xla2q3n().b[94][1]++, '');
    cov_e6xla2q3n().s[325]++;
    return modifiers;
  }
  /**
   * Simplify expression for easy evaluation with query operators map
   * @param expr
   * @returns {*}
   */


  function normalize(expr) {
    cov_e6xla2q3n().f[67]++;
    cov_e6xla2q3n().s[326]++;

    // normalized primitives
    if (inArray(JS_SIMPLE_TYPES, jsType(expr))) {
      cov_e6xla2q3n().b[95][0]++;
      cov_e6xla2q3n().s[327]++;
      return isRegExp(expr) ? (cov_e6xla2q3n().b[96][0]++, {
        '$regex': expr
      }) : (cov_e6xla2q3n().b[96][1]++, {
        '$eq': expr
      });
    } else {
      cov_e6xla2q3n().b[95][1]++;
    } // normalize object expression


    cov_e6xla2q3n().s[328]++;

    if (expr instanceof Object) {
      cov_e6xla2q3n().b[97][0]++;
      var exprKeys = (cov_e6xla2q3n().s[329]++, keys(expr)); // no valid query operator found, so we do simple comparison

      cov_e6xla2q3n().s[330]++;

      if (!exprKeys.some(isOperator)) {
        cov_e6xla2q3n().b[98][0]++;
        cov_e6xla2q3n().s[331]++;
        return {
          '$eq': expr
        };
      } else {
        cov_e6xla2q3n().b[98][1]++;
      } // ensure valid regex


      cov_e6xla2q3n().s[332]++;

      if (inArray(exprKeys, '$regex')) {
        cov_e6xla2q3n().b[99][0]++;
        var regex = (cov_e6xla2q3n().s[333]++, new RegExp(expr['$regex']));
        var options = (cov_e6xla2q3n().s[334]++, (cov_e6xla2q3n().b[100][0]++, expr['$options']) || (cov_e6xla2q3n().b[100][1]++, ''));
        var modifiers;
        var source;
        cov_e6xla2q3n().s[335]++;

        if (regex instanceof RegExp) {
          cov_e6xla2q3n().b[101][0]++;
          cov_e6xla2q3n().s[336]++;
          source = regex.source;
        } else {
          cov_e6xla2q3n().b[101][1]++;
          cov_e6xla2q3n().s[337]++;
          source = regex;
        }

        cov_e6xla2q3n().s[338]++;
        modifiers = regexOptions({
          ignoreCase: (cov_e6xla2q3n().b[102][0]++, regex.ignoreCase) || (cov_e6xla2q3n().b[102][1]++, options.indexOf('i') >= 0),
          multiline: (cov_e6xla2q3n().b[103][0]++, regex.multiline) || (cov_e6xla2q3n().b[103][1]++, options.indexOf('m') >= 0),
          global: (cov_e6xla2q3n().b[104][0]++, regex.global) || (cov_e6xla2q3n().b[104][1]++, options.indexOf('g') >= 0)
        });
        cov_e6xla2q3n().s[339]++;
        expr['$regex'] = new RegExp(source, options);
        cov_e6xla2q3n().s[340]++;
        delete expr['$options'];
      } else {
        cov_e6xla2q3n().b[99][1]++;
      }
    } else {
      cov_e6xla2q3n().b[97][1]++;
    }

    cov_e6xla2q3n().s[341]++;
    return expr;
  }
  /**
   * Returns a slice of the array
   *
   * @param  {Array} xs
   * @param  {Number} skip
   * @param  {Number} limit
   * @return {Array}
   */

  function slice(xs, skip, limit) {
    cov_e6xla2q3n().f[68]++;
    cov_e6xla2q3n().s[342]++;

    // MongoDB $slice works a bit differently from Array.slice
    // Uses single argument for 'limit' and array argument [skip, limit]
    if (isNil(limit)) {
      cov_e6xla2q3n().b[105][0]++;
      cov_e6xla2q3n().s[343]++;

      if (skip < 0) {
        cov_e6xla2q3n().b[106][0]++;
        cov_e6xla2q3n().s[344]++;
        skip = Math.max(0, xs.length + skip);
        cov_e6xla2q3n().s[345]++;
        limit = xs.length - skip + 1;
      } else {
        cov_e6xla2q3n().b[106][1]++;
        cov_e6xla2q3n().s[346]++;
        limit = skip;
        cov_e6xla2q3n().s[347]++;
        skip = 0;
      }
    } else {
      cov_e6xla2q3n().b[105][1]++;
      cov_e6xla2q3n().s[348]++;

      if (skip < 0) {
        cov_e6xla2q3n().b[107][0]++;
        cov_e6xla2q3n().s[349]++;
        skip = Math.max(0, xs.length + skip);
      } else {
        cov_e6xla2q3n().b[107][1]++;
      }

      cov_e6xla2q3n().s[350]++;
      assert(limit > 0, 'Invalid argument value for $slice operator. Limit must be a positive number');
      cov_e6xla2q3n().s[351]++;
      limit += skip;
    }

    cov_e6xla2q3n().s[352]++;
    return xs.slice(skip, limit);
  }
  /**
   * Compute the standard deviation of the data set
   * @param {Array} array of numbers
   * @param {Boolean} if true calculates a sample standard deviation, otherwise calculates a population stddev
   * @return {Number}
   */

  function stddev(data, sampled) {
    cov_e6xla2q3n().f[69]++;
    var sum = (cov_e6xla2q3n().s[353]++, reduce(data, function (acc, n) {
      cov_e6xla2q3n().f[70]++;
      cov_e6xla2q3n().s[354]++;
      return acc + n;
    }, 0));
    var N = (cov_e6xla2q3n().s[355]++, (cov_e6xla2q3n().b[108][0]++, data.length) || (cov_e6xla2q3n().b[108][1]++, 1));
    var correction = (cov_e6xla2q3n().s[356]++, (cov_e6xla2q3n().b[109][0]++, sampled) && (cov_e6xla2q3n().b[109][1]++, 1) || (cov_e6xla2q3n().b[109][2]++, 0));
    var avg = (cov_e6xla2q3n().s[357]++, sum / N);
    cov_e6xla2q3n().s[358]++;
    return Math.sqrt(reduce(data, function (acc, n) {
      cov_e6xla2q3n().f[71]++;
      cov_e6xla2q3n().s[359]++;
      return acc + Math.pow(n - avg, 2);
    }, 0) / (N - correction));
  }
  /**
   * Exported to the users to allow writing custom operators
   */

  function moduleApi() {
    cov_e6xla2q3n().f[72]++;
    cov_e6xla2q3n().s[360]++;
    return {
      assert: assert,
      clone: clone,
      cloneDeep: cloneDeep,
      each: each,
      err: err,
      hashCode: hashCode,
      getType: getType,
      has: has,
      includes: inArray.bind(null),
      isArray: isArray,
      isBoolean: isBoolean,
      isDate: isDate,
      isEmpty: isEmpty,
      isEqual: isEqual,
      isFunction: isFunction,
      isNil: isNil,
      isNull: isNull,
      isNumber: isNumber,
      isObject: isObject,
      isRegExp: isRegExp,
      isString: isString,
      isUndefined: isUndefined,
      keys: keys,
      reduce: reduce,
      resolve: resolve,
      resolveObj: resolveObj
    };
  }

  function cov_i4wer0st0() {
    var path = "/Users/francis/workspace/mingo/lib/internal.js";
    var hash = "fc488af7dc1f3e1cba53ed1e8fb76fe72692a5a1";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/internal.js",
      statementMap: {
        "0": {
          start: {
            line: 5,
            column: 25
          },
          end: {
            line: 5,
            column: 80
          }
        },
        "1": {
          start: {
            line: 5,
            column: 31
          },
          end: {
            line: 5,
            column: 80
          }
        },
        "2": {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 9,
            column: 1
          }
        },
        "3": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 37
          }
        },
        "4": {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 31,
            column: 1
          }
        },
        "5": {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 23,
            column: 24
          }
        },
        "6": {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 19
          }
        },
        "7": {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 25
          }
        },
        "8": {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 76,
            column: 1
          }
        },
        "9": {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 19
          }
        },
        "10": {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 25
          }
        },
        "11": {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 23
          }
        },
        "12": {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 23
          }
        },
        "13": {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 73,
            column: 11
          }
        },
        "14": {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        "15": {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 65,
            column: 17
          }
        },
        "16": {
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 54,
            column: 32
          }
        },
        "17": {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 61,
            column: 23
          }
        },
        "18": {
          start: {
            line: 56,
            column: 24
          },
          end: {
            line: 58,
            column: 25
          }
        },
        "19": {
          start: {
            line: 57,
            column: 28
          },
          end: {
            line: 57,
            column: 66
          }
        },
        "20": {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 60,
            column: 46
          }
        },
        "21": {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 46
          }
        },
        "22": {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 64,
            column: 63
          }
        },
        "23": {
          start: {
            line: 66,
            column: 16
          },
          end: {
            line: 71,
            column: 17
          }
        },
        "24": {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 36
          }
        },
        "25": {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 70,
            column: 38
          }
        },
        "26": {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 19
          }
        },
        "27": {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 24
          }
        },
        "28": {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 52
          }
        },
        "29": {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 75
          }
        },
        "30": {
          start: {
            line: 92,
            column: 38
          },
          end: {
            line: 92,
            column: 69
          }
        },
        "31": {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        "32": {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 60
          }
        },
        "33": {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        "34": {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 23
          }
        },
        "35": {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 118,
            column: 11
          }
        },
        "36": {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 65
          }
        },
        "37": {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        "38": {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 113,
            column: 37
          }
        },
        "39": {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 108
          }
        },
        "40": {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 116,
            column: 29
          }
        },
        "41": {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 22
          }
        },
        "42": {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        "43": {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 133,
            column: 32
          }
        },
        "44": {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        "45": {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 137,
            column: 70
          }
        },
        "46": {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        "47": {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 53
          }
        },
        "48": {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 80
          }
        },
        "49": {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 65
          }
        },
        "50": {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        "51": {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        "52": {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 24
          }
        },
        "53": {
          start: {
            line: 155,
            column: 18
          },
          end: {
            line: 155,
            column: 33
          }
        },
        "54": {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        "55": {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 157,
            column: 62
          }
        },
        "56": {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 159,
            column: 27
          }
        },
        "57": {
          start: {
            line: 159,
            column: 16
          },
          end: {
            line: 159,
            column: 27
          }
        },
        "58": {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 46
          }
        },
        "59": {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 162,
            column: 43
          }
        },
        "60": {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        "61": {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 166,
            column: 57
          }
        },
        "62": {
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 55
          }
        },
        "63": {
          start: {
            line: 168,
            column: 9
          },
          end: {
            line: 185,
            column: 5
          }
        },
        "64": {
          start: {
            line: 169,
            column: 21
          },
          end: {
            line: 169,
            column: 31
          }
        },
        "65": {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 180,
            column: 11
          }
        },
        "66": {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 171,
            column: 63
          }
        },
        "67": {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        "68": {
          start: {
            line: 174,
            column: 52
          },
          end: {
            line: 174,
            column: 74
          }
        },
        "69": {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 176,
            column: 113
          }
        },
        "70": {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 177,
            column: 37
          }
        },
        "71": {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 178,
            column: 29
          }
        },
        "72": {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 22
          }
        },
        "73": {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 184,
            column: 20
          }
        },
        "74": {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 195,
            column: 55
          }
        },
        "75": {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 198,
            column: 17
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 5,
              column: 25
            },
            end: {
              line: 5,
              column: 26
            }
          },
          loc: {
            start: {
              line: 5,
              column: 31
            },
            end: {
              line: 5,
              column: 80
            }
          },
          line: 5
        },
        "1": {
          name: "setup",
          decl: {
            start: {
              line: 14,
              column: 16
            },
            end: {
              line: 14,
              column: 21
            }
          },
          loc: {
            start: {
              line: 14,
              column: 31
            },
            end: {
              line: 16,
              column: 1
            }
          },
          line: 14
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 22,
              column: 4
            },
            end: {
              line: 22,
              column: 5
            }
          },
          loc: {
            start: {
              line: 22,
              column: 29
            },
            end: {
              line: 24,
              column: 5
            }
          },
          line: 22
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 25,
              column: 4
            },
            end: {
              line: 25,
              column: 5
            }
          },
          loc: {
            start: {
              line: 25,
              column: 32
            },
            end: {
              line: 27,
              column: 5
            }
          },
          line: 25
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 28,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          },
          loc: {
            start: {
              line: 28,
              column: 31
            },
            end: {
              line: 30,
              column: 5
            }
          },
          line: 28
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 40,
              column: 5
            }
          },
          loc: {
            start: {
              line: 40,
              column: 33
            },
            end: {
              line: 42,
              column: 5
            }
          },
          line: 40
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 43,
              column: 5
            }
          },
          loc: {
            start: {
              line: 43,
              column: 34
            },
            end: {
              line: 45,
              column: 5
            }
          },
          line: 43
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 46,
              column: 4
            },
            end: {
              line: 46,
              column: 5
            }
          },
          loc: {
            start: {
              line: 46,
              column: 36
            },
            end: {
              line: 75,
              column: 5
            }
          },
          line: 46
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 51,
              column: 18
            },
            end: {
              line: 51,
              column: 19
            }
          },
          loc: {
            start: {
              line: 51,
              column: 36
            },
            end: {
              line: 73,
              column: 9
            }
          },
          line: 51
        },
        "9": {
          name: "(anonymous_9)",
          decl: {
            start: {
              line: 55,
              column: 34
            },
            end: {
              line: 55,
              column: 35
            }
          },
          loc: {
            start: {
              line: 55,
              column: 44
            },
            end: {
              line: 61,
              column: 21
            }
          },
          line: 55
        },
        "10": {
          name: "idKey",
          decl: {
            start: {
              line: 80,
              column: 16
            },
            end: {
              line: 80,
              column: 21
            }
          },
          loc: {
            start: {
              line: 80,
              column: 24
            },
            end: {
              line: 82,
              column: 1
            }
          },
          line: 80
        },
        "11": {
          name: "ops",
          decl: {
            start: {
              line: 86,
              column: 16
            },
            end: {
              line: 86,
              column: 19
            }
          },
          loc: {
            start: {
              line: 86,
              column: 22
            },
            end: {
              line: 93,
              column: 1
            }
          },
          line: 86
        },
        "12": {
          name: "(anonymous_12)",
          decl: {
            start: {
              line: 92,
              column: 24
            },
            end: {
              line: 92,
              column: 25
            }
          },
          loc: {
            start: {
              line: 92,
              column: 38
            },
            end: {
              line: 92,
              column: 69
            }
          },
          line: 92
        },
        "13": {
          name: "accumulate",
          decl: {
            start: {
              line: 102,
              column: 16
            },
            end: {
              line: 102,
              column: 26
            }
          },
          loc: {
            start: {
              line: 102,
              column: 52
            },
            end: {
              line: 121,
              column: 1
            }
          },
          line: 102
        },
        "14": {
          name: "(anonymous_14)",
          decl: {
            start: {
              line: 108,
              column: 19
            },
            end: {
              line: 108,
              column: 20
            }
          },
          loc: {
            start: {
              line: 108,
              column: 33
            },
            end: {
              line: 118,
              column: 9
            }
          },
          line: 108
        },
        "15": {
          name: "computeValue",
          decl: {
            start: {
              line: 131,
              column: 16
            },
            end: {
              line: 131,
              column: 28
            }
          },
          loc: {
            start: {
              line: 131,
              column: 59
            },
            end: {
              line: 186,
              column: 1
            }
          },
          line: 131
        },
        "16": {
          name: "(anonymous_16)",
          decl: {
            start: {
              line: 166,
              column: 24
            },
            end: {
              line: 166,
              column: 25
            }
          },
          loc: {
            start: {
              line: 166,
              column: 32
            },
            end: {
              line: 166,
              column: 55
            }
          },
          line: 166
        },
        "17": {
          name: "(anonymous_17)",
          decl: {
            start: {
              line: 170,
              column: 19
            },
            end: {
              line: 170,
              column: 20
            }
          },
          loc: {
            start: {
              line: 170,
              column: 33
            },
            end: {
              line: 180,
              column: 9
            }
          },
          line: 170
        },
        "18": {
          name: "(anonymous_18)",
          decl: {
            start: {
              line: 174,
              column: 47
            },
            end: {
              line: 174,
              column: 48
            }
          },
          loc: {
            start: {
              line: 174,
              column: 52
            },
            end: {
              line: 174,
              column: 74
            }
          },
          line: 174
        },
        "19": {
          name: "redactObj",
          decl: {
            start: {
              line: 194,
              column: 16
            },
            end: {
              line: 194,
              column: 25
            }
          },
          loc: {
            start: {
              line: 194,
              column: 46
            },
            end: {
              line: 199,
              column: 1
            }
          },
          line: 194
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 48,
              column: 8
            },
            end: {
              line: 49,
              column: 23
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 48,
              column: 8
            },
            end: {
              line: 49,
              column: 23
            }
          }, {
            start: {
              line: 48,
              column: 8
            },
            end: {
              line: 49,
              column: 23
            }
          }],
          line: 48
        },
        "1": {
          loc: {
            start: {
              line: 52,
              column: 12
            },
            end: {
              line: 72,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 52,
              column: 12
            },
            end: {
              line: 72,
              column: 13
            }
          }, {
            start: {
              line: 52,
              column: 12
            },
            end: {
              line: 72,
              column: 13
            }
          }],
          line: 52
        },
        "2": {
          loc: {
            start: {
              line: 53,
              column: 16
            },
            end: {
              line: 65,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 53,
              column: 16
            },
            end: {
              line: 65,
              column: 17
            }
          }, {
            start: {
              line: 53,
              column: 16
            },
            end: {
              line: 65,
              column: 17
            }
          }],
          line: 53
        },
        "3": {
          loc: {
            start: {
              line: 56,
              column: 24
            },
            end: {
              line: 58,
              column: 25
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 56,
              column: 24
            },
            end: {
              line: 58,
              column: 25
            }
          }, {
            start: {
              line: 56,
              column: 24
            },
            end: {
              line: 58,
              column: 25
            }
          }],
          line: 56
        },
        "4": {
          loc: {
            start: {
              line: 59,
              column: 24
            },
            end: {
              line: 60,
              column: 46
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 59,
              column: 24
            },
            end: {
              line: 60,
              column: 46
            }
          }, {
            start: {
              line: 59,
              column: 24
            },
            end: {
              line: 60,
              column: 46
            }
          }],
          line: 59
        },
        "5": {
          loc: {
            start: {
              line: 66,
              column: 16
            },
            end: {
              line: 71,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 66,
              column: 16
            },
            end: {
              line: 71,
              column: 17
            }
          }, {
            start: {
              line: 66,
              column: 16
            },
            end: {
              line: 71,
              column: 17
            }
          }],
          line: 66
        },
        "6": {
          loc: {
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 105,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 105,
              column: 5
            }
          }, {
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 105,
              column: 5
            }
          }],
          line: 103
        },
        "7": {
          loc: {
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 120,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 120,
              column: 5
            }
          }, {
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 120,
              column: 5
            }
          }],
          line: 106
        },
        "8": {
          loc: {
            start: {
              line: 112,
              column: 12
            },
            end: {
              line: 117,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 112,
              column: 12
            },
            end: {
              line: 117,
              column: 13
            }
          }, {
            start: {
              line: 112,
              column: 12
            },
            end: {
              line: 117,
              column: 13
            }
          }],
          line: 112
        },
        "9": {
          loc: {
            start: {
              line: 132,
              column: 4
            },
            end: {
              line: 134,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 132,
              column: 4
            },
            end: {
              line: 134,
              column: 5
            }
          }, {
            start: {
              line: 132,
              column: 4
            },
            end: {
              line: 134,
              column: 5
            }
          }],
          line: 132
        },
        "10": {
          loc: {
            start: {
              line: 136,
              column: 4
            },
            end: {
              line: 138,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 136,
              column: 4
            },
            end: {
              line: 138,
              column: 5
            }
          }, {
            start: {
              line: 136,
              column: 4
            },
            end: {
              line: 138,
              column: 5
            }
          }],
          line: 136
        },
        "11": {
          loc: {
            start: {
              line: 140,
              column: 4
            },
            end: {
              line: 146,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 140,
              column: 4
            },
            end: {
              line: 146,
              column: 5
            }
          }, {
            start: {
              line: 140,
              column: 4
            },
            end: {
              line: 146,
              column: 5
            }
          }],
          line: 140
        },
        "12": {
          loc: {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 163,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 163,
              column: 5
            }
          }, {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 163,
              column: 5
            }
          }],
          line: 149
        },
        "13": {
          loc: {
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 60
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 22
            }
          }, {
            start: {
              line: 149,
              column: 26
            },
            end: {
              line: 149,
              column: 41
            }
          }, {
            start: {
              line: 149,
              column: 45
            },
            end: {
              line: 149,
              column: 60
            }
          }],
          line: 149
        },
        "14": {
          loc: {
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 153,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 153,
              column: 9
            }
          }, {
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 153,
              column: 9
            }
          }],
          line: 151
        },
        "15": {
          loc: {
            start: {
              line: 156,
              column: 8
            },
            end: {
              line: 161,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 156,
              column: 8
            },
            end: {
              line: 161,
              column: 9
            }
          }, {
            start: {
              line: 156,
              column: 8
            },
            end: {
              line: 161,
              column: 9
            }
          }],
          line: 156
        },
        "16": {
          loc: {
            start: {
              line: 158,
              column: 12
            },
            end: {
              line: 159,
              column: 27
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 158,
              column: 12
            },
            end: {
              line: 159,
              column: 27
            }
          }, {
            start: {
              line: 158,
              column: 12
            },
            end: {
              line: 159,
              column: 27
            }
          }],
          line: 158
        },
        "17": {
          loc: {
            start: {
              line: 165,
              column: 4
            },
            end: {
              line: 185,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 165,
              column: 4
            },
            end: {
              line: 185,
              column: 5
            }
          }, {
            start: {
              line: 165,
              column: 4
            },
            end: {
              line: 185,
              column: 5
            }
          }],
          line: 165
        },
        "18": {
          loc: {
            start: {
              line: 168,
              column: 9
            },
            end: {
              line: 185,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 168,
              column: 9
            },
            end: {
              line: 185,
              column: 5
            }
          }, {
            start: {
              line: 168,
              column: 9
            },
            end: {
              line: 185,
              column: 5
            }
          }],
          line: 168
        },
        "19": {
          loc: {
            start: {
              line: 174,
              column: 12
            },
            end: {
              line: 179,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 174,
              column: 12
            },
            end: {
              line: 179,
              column: 13
            }
          }, {
            start: {
              line: 174,
              column: 12
            },
            end: {
              line: 179,
              column: 13
            }
          }],
          line: 174
        },
        "20": {
          loc: {
            start: {
              line: 196,
              column: 11
            },
            end: {
              line: 198,
              column: 16
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 197,
              column: 10
            },
            end: {
              line: 197,
              column: 53
            }
          }, {
            start: {
              line: 198,
              column: 10
            },
            end: {
              line: 198,
              column: 16
            }
          }],
          line: 196
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "fc488af7dc1f3e1cba53ed1e8fb76fe72692a5a1"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_i4wer0st0 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_i4wer0st0();

  cov_i4wer0st0().s[0]++;
  var _internal = function _internal() {
    cov_i4wer0st0().f[0]++;
    cov_i4wer0st0().s[1]++;
    return Object.assign({
      computeValue: computeValue,
      ops: ops
    }, moduleApi());
  }; // Settings used by Mingo internally

  var settings = (cov_i4wer0st0().s[2]++, {
    key: '_id'
  });
  /**
   * Setup default settings for Mingo
   * @param options
   */

  function setup(options) {
    cov_i4wer0st0().f[1]++;
    cov_i4wer0st0().s[3]++;
    Object.assign(settings, options);
  }
  /**
   * Implementation of system variables
   * @type {Object}
   */

  var systemVariables = (cov_i4wer0st0().s[4]++, {
    '$$ROOT': function $$ROOT(obj, expr, opt) {
      cov_i4wer0st0().f[2]++;
      cov_i4wer0st0().s[5]++;
      return opt.root;
    },
    '$$CURRENT': function $$CURRENT(obj, expr, opt) {
      cov_i4wer0st0().f[3]++;
      cov_i4wer0st0().s[6]++;
      return obj;
    },
    '$$REMOVE': function $$REMOVE(obj, expr, opt) {
      cov_i4wer0st0().f[4]++;
      cov_i4wer0st0().s[7]++;
      return undefined;
    }
  });
  /**
   * Implementation of $redact variables
   *
   * Each function accepts 3 arguments (obj, expr, opt)
   *
   * @type {Object}
   */

  var redactVariables = (cov_i4wer0st0().s[8]++, {
    '$$KEEP': function $$KEEP(obj, expr, options) {
      cov_i4wer0st0().f[5]++;
      cov_i4wer0st0().s[9]++;
      return obj;
    },
    '$$PRUNE': function $$PRUNE(obj, expr, options) {
      cov_i4wer0st0().f[6]++;
      cov_i4wer0st0().s[10]++;
      return undefined;
    },
    '$$DESCEND': function $$DESCEND(obj, expr, options) {
      cov_i4wer0st0().f[7]++;
      cov_i4wer0st0().s[11]++;

      // traverse nested documents iff there is a $cond
      if (!has(expr, '$cond')) {
        cov_i4wer0st0().b[0][0]++;
        cov_i4wer0st0().s[12]++;
        return obj;
      } else {
        cov_i4wer0st0().b[0][1]++;
      }

      var result;
      cov_i4wer0st0().s[13]++;
      each(obj, function (current, key) {
        cov_i4wer0st0().f[8]++;
        cov_i4wer0st0().s[14]++;

        if (isObjectLike(current)) {
          cov_i4wer0st0().b[1][0]++;
          cov_i4wer0st0().s[15]++;

          if (isArray(current)) {
            cov_i4wer0st0().b[2][0]++;
            cov_i4wer0st0().s[16]++;
            result = [];
            cov_i4wer0st0().s[17]++;
            each(current, function (elem) {
              cov_i4wer0st0().f[9]++;
              cov_i4wer0st0().s[18]++;

              if (isObject(elem)) {
                cov_i4wer0st0().b[3][0]++;
                cov_i4wer0st0().s[19]++;
                elem = redactObj(elem, expr, options);
              } else {
                cov_i4wer0st0().b[3][1]++;
              }

              cov_i4wer0st0().s[20]++;

              if (!isNil(elem)) {
                cov_i4wer0st0().b[4][0]++;
                cov_i4wer0st0().s[21]++;
                result.push(elem);
              } else {
                cov_i4wer0st0().b[4][1]++;
              }
            });
          } else {
            cov_i4wer0st0().b[2][1]++;
            cov_i4wer0st0().s[22]++;
            result = redactObj(current, expr, options);
          }

          cov_i4wer0st0().s[23]++;

          if (isNil(result)) {
            cov_i4wer0st0().b[5][0]++;
            cov_i4wer0st0().s[24]++;
            delete obj[key]; // pruned result
          } else {
            cov_i4wer0st0().b[5][1]++;
            cov_i4wer0st0().s[25]++;
            obj[key] = result;
          }
        } else {
          cov_i4wer0st0().b[1][1]++;
        }
      });
      cov_i4wer0st0().s[26]++;
      return obj;
    }
  });
  /**
   * Returns the key used as the collection's objects ids
   */

  function idKey() {
    cov_i4wer0st0().f[10]++;
    cov_i4wer0st0().s[27]++;
    return settings.key;
  }
  /**
   * Returns the operators defined for the given operator classes
   */

  function ops() {
    cov_i4wer0st0().f[11]++;
    // Workaround for browser-compatibility bug: on iPhone 6S Safari (and
    // probably some other platforms), `arguments` isn't detected as an array,
    // but has a length field, so functions like `reduce` end up including the
    // length field in their iteration. Copy to a real array.
    var args = (cov_i4wer0st0().s[28]++, Array.prototype.slice.call(arguments));
    cov_i4wer0st0().s[29]++;
    return reduce(args, function (acc, cls) {
      cov_i4wer0st0().f[12]++;
      cov_i4wer0st0().s[30]++;
      return into(acc, keys(OPERATORS[cls]));
    }, []);
  }
  /**
   * Returns the result of evaluating a $group operation over a collection
   *
   * @param collection
   * @param field the name of the aggregate operator or field
   * @param expr the expression of the aggregate operator for the field
   * @returns {*}
   */

  function accumulate(collection, field, expr) {
    cov_i4wer0st0().f[13]++;
    cov_i4wer0st0().s[31]++;

    if (has(OPERATORS[OP_GROUP], field)) {
      cov_i4wer0st0().b[6][0]++;
      cov_i4wer0st0().s[32]++;
      return OPERATORS[OP_GROUP][field](collection, expr);
    } else {
      cov_i4wer0st0().b[6][1]++;
    }

    cov_i4wer0st0().s[33]++;

    if (isObject(expr)) {
      cov_i4wer0st0().b[7][0]++;
      var result = (cov_i4wer0st0().s[34]++, {});
      cov_i4wer0st0().s[35]++;
      each(expr, function (val, key) {
        cov_i4wer0st0().f[14]++;
        cov_i4wer0st0().s[36]++;
        result[key] = accumulate(collection, key, expr[key]); // must run ONLY one group operator per expression
        // if so, return result of the computed value

        cov_i4wer0st0().s[37]++;

        if (has(OPERATORS[OP_GROUP], key)) {
          cov_i4wer0st0().b[8][0]++;
          cov_i4wer0st0().s[38]++;
          result = result[key]; // if there are more keys in expression this is bad

          cov_i4wer0st0().s[39]++;
          assert(keys(expr).length === 1, "Invalid $group expression '" + JSON.stringify(expr) + "'");
          cov_i4wer0st0().s[40]++;
          return false; // break
        } else {
          cov_i4wer0st0().b[8][1]++;
        }
      });
      cov_i4wer0st0().s[41]++;
      return result;
    } else {
      cov_i4wer0st0().b[7][1]++;
    }
  }
  /**
   * Computes the actual value of the expression using the given object as context
   *
   * @param obj the current object from the collection
   * @param expr the expression for the given field
   * @param operator the operator to resolve the field with
   * @param options {Object} extra options
   * @returns {*}
   */

  function computeValue(obj, expr, operator, options) {
    cov_i4wer0st0().f[15]++;
    cov_i4wer0st0().s[42]++;

    if (options === undefined) {
      cov_i4wer0st0().b[9][0]++;
      cov_i4wer0st0().s[43]++;
      options = {
        root: obj
      };
    } else {
      cov_i4wer0st0().b[9][1]++;
    } // if the field of the object is a valid operator


    cov_i4wer0st0().s[44]++;

    if (has(OPERATORS[OP_EXPRESSION], operator)) {
      cov_i4wer0st0().b[10][0]++;
      cov_i4wer0st0().s[45]++;
      return OPERATORS[OP_EXPRESSION][operator](obj, expr, options);
    } else {
      cov_i4wer0st0().b[10][1]++;
    } // we also handle $group accumulator operators


    cov_i4wer0st0().s[46]++;

    if (has(OPERATORS[OP_GROUP], operator)) {
      cov_i4wer0st0().b[11][0]++;
      cov_i4wer0st0().s[47]++;
      // we first fully resolve the expression
      obj = computeValue(obj, expr, null, options);
      cov_i4wer0st0().s[48]++;
      assert(isArray(obj), operator + ' expression must resolve to an array'); // we pass a null expression because all values have been resolved

      cov_i4wer0st0().s[49]++;
      return OPERATORS[OP_GROUP][operator](obj, null, options);
    } else {
      cov_i4wer0st0().b[11][1]++;
    } // if expr is a variable for an object field
    // field not used in this case


    cov_i4wer0st0().s[50]++;

    if ((cov_i4wer0st0().b[13][0]++, isString(expr)) && (cov_i4wer0st0().b[13][1]++, expr.length > 0) && (cov_i4wer0st0().b[13][2]++, expr[0] === '$')) {
      cov_i4wer0st0().b[12][0]++;
      cov_i4wer0st0().s[51]++;

      // we return redact variables as literals
      if (has(redactVariables, expr)) {
        cov_i4wer0st0().b[14][0]++;
        cov_i4wer0st0().s[52]++;
        return expr;
      } else {
        cov_i4wer0st0().b[14][1]++;
      } // handle selectors with explicit prefix


      var arr = (cov_i4wer0st0().s[53]++, expr.split('.'));
      cov_i4wer0st0().s[54]++;

      if (has(systemVariables, arr[0])) {
        cov_i4wer0st0().b[15][0]++;
        cov_i4wer0st0().s[55]++;
        obj = systemVariables[arr[0]](obj, null, options);
        cov_i4wer0st0().s[56]++;

        if (arr.length == 1) {
          cov_i4wer0st0().b[16][0]++;
          cov_i4wer0st0().s[57]++;
          return obj;
        } else {
          cov_i4wer0st0().b[16][1]++;
        }

        cov_i4wer0st0().s[58]++;
        expr = expr.substr(arr[0].length); // '.' prefix will be sliced off below
      } else {
        cov_i4wer0st0().b[15][1]++;
      }

      cov_i4wer0st0().s[59]++;
      return resolve(obj, expr.slice(1));
    } else {
      cov_i4wer0st0().b[12][1]++;
    } // check and return value if already in a resolved state


    cov_i4wer0st0().s[60]++;

    if (Array.isArray(expr)) {
      cov_i4wer0st0().b[17][0]++;
      cov_i4wer0st0().s[61]++;
      return expr.map(function (item) {
        cov_i4wer0st0().f[16]++;
        cov_i4wer0st0().s[62]++;
        return computeValue(obj, item);
      });
    } else {
      cov_i4wer0st0().b[17][1]++;
      cov_i4wer0st0().s[63]++;

      if (jsType(expr) === T_OBJECT) {
        cov_i4wer0st0().b[18][0]++;
        var result = (cov_i4wer0st0().s[64]++, new Object());
        cov_i4wer0st0().s[65]++;
        each(expr, function (val, key) {
          cov_i4wer0st0().f[17]++;
          cov_i4wer0st0().s[66]++;
          result[key] = computeValue(obj, val, key, options); // must run ONLY one aggregate operator per expression
          // if so, return result of the computed value

          cov_i4wer0st0().s[67]++;

          if ([OP_EXPRESSION, OP_GROUP].some(function (c) {
            cov_i4wer0st0().f[18]++;
            cov_i4wer0st0().s[68]++;
            return has(OPERATORS[c], key);
          })) {
            cov_i4wer0st0().b[19][0]++;
            cov_i4wer0st0().s[69]++;
            // there should be only one operator
            assert(keys(expr).length === 1, "Invalid aggregation expression '" + JSON.stringify(expr) + "'");
            cov_i4wer0st0().s[70]++;
            result = result[key];
            cov_i4wer0st0().s[71]++;
            return false; // break
          } else {
            cov_i4wer0st0().b[19][1]++;
          }
        });
        cov_i4wer0st0().s[72]++;
        return result;
      } else {
        cov_i4wer0st0().b[18][1]++;
        cov_i4wer0st0().s[73]++;
        return expr;
      }
    }
  }
  /**
   * Redact an object
   * @param  {Object} obj The object to redact
   * @param  {*} expr The redact expression
   * @param  {*} opt  Options for value
   * @return {*} Returns the redacted value
   */

  function redactObj(obj, expr, options) {
    cov_i4wer0st0().f[19]++;
    var result = (cov_i4wer0st0().s[74]++, computeValue(obj, expr, null, options));
    cov_i4wer0st0().s[75]++;
    return has(redactVariables, result) ? (cov_i4wer0st0().b[20][0]++, redactVariables[result](obj, expr, options)) : (cov_i4wer0st0().b[20][1]++, result);
  }

  function cov_9zxc1ux3s() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/arithmetic.js";
    var hash = "78fe40836cd67e1c2da328d6b95f80d920a622e5";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/arithmetic.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 14
          },
          end: {
            line: 12,
            column: 37
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 70
          }
        },
        "2": {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 38
          }
        },
        "3": {
          start: {
            line: 24,
            column: 20
          },
          end: {
            line: 24,
            column: 25
          }
        },
        "4": {
          start: {
            line: 25,
            column: 17
          },
          end: {
            line: 34,
            column: 9
          }
        },
        "5": {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        "6": {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 70
          }
        },
        "7": {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 29
          }
        },
        "8": {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 32
          }
        },
        "9": {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 19
          }
        },
        "10": {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 19
          }
        },
        "11": {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 49
          }
        },
        "12": {
          start: {
            line: 45,
            column: 14
          },
          end: {
            line: 45,
            column: 37
          }
        },
        "13": {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 47,
            column: 20
          }
        },
        "14": {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 20
          }
        },
        "15": {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 86
          }
        },
        "16": {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 26
          }
        },
        "17": {
          start: {
            line: 59,
            column: 15
          },
          end: {
            line: 59,
            column: 38
          }
        },
        "18": {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 29
          }
        },
        "19": {
          start: {
            line: 70,
            column: 14
          },
          end: {
            line: 70,
            column: 37
          }
        },
        "20": {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 72,
            column: 20
          }
        },
        "21": {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 20
          }
        },
        "22": {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 85
          }
        },
        "23": {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 25
          }
        },
        "24": {
          start: {
            line: 84,
            column: 14
          },
          end: {
            line: 84,
            column: 37
          }
        },
        "25": {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 86,
            column: 20
          }
        },
        "26": {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 86,
            column: 20
          }
        },
        "27": {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 87
          }
        },
        "28": {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 27
          }
        },
        "29": {
          start: {
            line: 98,
            column: 14
          },
          end: {
            line: 98,
            column: 37
          }
        },
        "30": {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 100,
            column: 20
          }
        },
        "31": {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 100,
            column: 20
          }
        },
        "32": {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 84
          }
        },
        "33": {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 25
          }
        },
        "34": {
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 112,
            column: 38
          }
        },
        "35": {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 113,
            column: 69
          }
        },
        "36": {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 52
          }
        },
        "37": {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 116,
            column: 20
          }
        },
        "38": {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 116,
            column: 20
          }
        },
        "39": {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 58
          }
        },
        "40": {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 53
          }
        },
        "41": {
          start: {
            line: 128,
            column: 14
          },
          end: {
            line: 128,
            column: 37
          }
        },
        "42": {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 130,
            column: 20
          }
        },
        "43": {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 20
          }
        },
        "44": {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 87
          }
        },
        "45": {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 27
          }
        },
        "46": {
          start: {
            line: 142,
            column: 15
          },
          end: {
            line: 142,
            column: 38
          }
        },
        "47": {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 29
          }
        },
        "48": {
          start: {
            line: 153,
            column: 15
          },
          end: {
            line: 153,
            column: 38
          }
        },
        "49": {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 52
          }
        },
        "50": {
          start: {
            line: 154,
            column: 38
          },
          end: {
            line: 154,
            column: 47
          }
        },
        "51": {
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 38
          }
        },
        "52": {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 126
          }
        },
        "53": {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 90
          }
        },
        "54": {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 38
          }
        },
        "55": {
          start: {
            line: 175,
            column: 15
          },
          end: {
            line: 175,
            column: 38
          }
        },
        "56": {
          start: {
            line: 176,
            column: 14
          },
          end: {
            line: 176,
            column: 21
          }
        },
        "57": {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 177,
            column: 23
          }
        },
        "58": {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 179,
            column: 19
          }
        },
        "59": {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 179,
            column: 19
          }
        },
        "60": {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 73
          }
        },
        "61": {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 38
          }
        },
        "62": {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 35
          }
        },
        "63": {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 193,
            column: 20
          }
        },
        "64": {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 20
          }
        },
        "65": {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 102
          }
        },
        "66": {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 24
          }
        },
        "67": {
          start: {
            line: 205,
            column: 15
          },
          end: {
            line: 205,
            column: 38
          }
        },
        "68": {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 29
          }
        },
        "69": {
          start: {
            line: 216,
            column: 14
          },
          end: {
            line: 216,
            column: 37
          }
        },
        "70": {
          start: {
            line: 217,
            column: 14
          },
          end: {
            line: 217,
            column: 20
          }
        },
        "71": {
          start: {
            line: 218,
            column: 17
          },
          end: {
            line: 218,
            column: 23
          }
        },
        "72": {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 220,
            column: 19
          }
        },
        "73": {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 19
          }
        },
        "74": {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 73
          }
        },
        "75": {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 119
          }
        },
        "76": {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 40
          }
        },
        "77": {
          start: {
            line: 232,
            column: 15
          },
          end: {
            line: 232,
            column: 45
          }
        },
        "78": {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 24
          }
        },
        "79": {
          start: {
            line: 234,
            column: 17
          },
          end: {
            line: 234,
            column: 32
          }
        },
        "80": {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 235,
            column: 31
          }
        },
        "81": {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        "82": {
          start: {
            line: 237,
            column: 25
          },
          end: {
            line: 237,
            column: 50
          }
        },
        "83": {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 240,
            column: 9
          }
        },
        "84": {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 239,
            column: 21
          }
        },
        "85": {
          start: {
            line: 242,
            column: 9
          },
          end: {
            line: 268,
            column: 5
          }
        },
        "86": {
          start: {
            line: 243,
            column: 21
          },
          end: {
            line: 243,
            column: 41
          }
        },
        "87": {
          start: {
            line: 244,
            column: 24
          },
          end: {
            line: 244,
            column: 53
          }
        },
        "88": {
          start: {
            line: 246,
            column: 24
          },
          end: {
            line: 246,
            column: 63
          }
        },
        "89": {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        "90": {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 27
          }
        },
        "91": {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 39
          }
        },
        "92": {
          start: {
            line: 254,
            column: 9
          },
          end: {
            line: 268,
            column: 5
          }
        },
        "93": {
          start: {
            line: 256,
            column: 21
          },
          end: {
            line: 256,
            column: 46
          }
        },
        "94": {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 36
          }
        },
        "95": {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 258,
            column: 46
          }
        },
        "96": {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        "97": {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 263,
            column: 13
          }
        },
        "98": {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 38
          }
        },
        "99": {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 266,
            column: 13
          }
        },
        "100": {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 33
          }
        },
        "101": {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 25
          }
        }
      },
      fnMap: {
        "0": {
          name: "$abs",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 20
            }
          },
          loc: {
            start: {
              line: 11,
              column: 32
            },
            end: {
              line: 14,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "$add",
          decl: {
            start: {
              line: 22,
              column: 16
            },
            end: {
              line: 22,
              column: 20
            }
          },
          loc: {
            start: {
              line: 22,
              column: 32
            },
            end: {
              line: 36,
              column: 1
            }
          },
          line: 22
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 25,
              column: 30
            },
            end: {
              line: 25,
              column: 31
            }
          },
          loc: {
            start: {
              line: 25,
              column: 44
            },
            end: {
              line: 34,
              column: 5
            }
          },
          line: 25
        },
        "3": {
          name: "$ceil",
          decl: {
            start: {
              line: 44,
              column: 16
            },
            end: {
              line: 44,
              column: 21
            }
          },
          loc: {
            start: {
              line: 44,
              column: 33
            },
            end: {
              line: 50,
              column: 1
            }
          },
          line: 44
        },
        "4": {
          name: "$divide",
          decl: {
            start: {
              line: 58,
              column: 16
            },
            end: {
              line: 58,
              column: 23
            }
          },
          loc: {
            start: {
              line: 58,
              column: 35
            },
            end: {
              line: 61,
              column: 1
            }
          },
          line: 58
        },
        "5": {
          name: "$exp",
          decl: {
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 69,
              column: 20
            }
          },
          loc: {
            start: {
              line: 69,
              column: 32
            },
            end: {
              line: 75,
              column: 1
            }
          },
          line: 69
        },
        "6": {
          name: "$floor",
          decl: {
            start: {
              line: 83,
              column: 16
            },
            end: {
              line: 83,
              column: 22
            }
          },
          loc: {
            start: {
              line: 83,
              column: 34
            },
            end: {
              line: 89,
              column: 1
            }
          },
          line: 83
        },
        "7": {
          name: "$ln",
          decl: {
            start: {
              line: 97,
              column: 16
            },
            end: {
              line: 97,
              column: 19
            }
          },
          loc: {
            start: {
              line: 97,
              column: 31
            },
            end: {
              line: 103,
              column: 1
            }
          },
          line: 97
        },
        "8": {
          name: "$log",
          decl: {
            start: {
              line: 111,
              column: 16
            },
            end: {
              line: 111,
              column: 20
            }
          },
          loc: {
            start: {
              line: 111,
              column: 32
            },
            end: {
              line: 119,
              column: 1
            }
          },
          line: 111
        },
        "9": {
          name: "$log10",
          decl: {
            start: {
              line: 127,
              column: 16
            },
            end: {
              line: 127,
              column: 22
            }
          },
          loc: {
            start: {
              line: 127,
              column: 34
            },
            end: {
              line: 133,
              column: 1
            }
          },
          line: 127
        },
        "10": {
          name: "$mod",
          decl: {
            start: {
              line: 141,
              column: 16
            },
            end: {
              line: 141,
              column: 20
            }
          },
          loc: {
            start: {
              line: 141,
              column: 32
            },
            end: {
              line: 144,
              column: 1
            }
          },
          line: 141
        },
        "11": {
          name: "$multiply",
          decl: {
            start: {
              line: 152,
              column: 16
            },
            end: {
              line: 152,
              column: 25
            }
          },
          loc: {
            start: {
              line: 152,
              column: 37
            },
            end: {
              line: 155,
              column: 1
            }
          },
          line: 152
        },
        "12": {
          name: "(anonymous_12)",
          decl: {
            start: {
              line: 154,
              column: 24
            },
            end: {
              line: 154,
              column: 25
            }
          },
          loc: {
            start: {
              line: 154,
              column: 38
            },
            end: {
              line: 154,
              column: 47
            }
          },
          line: 154
        },
        "13": {
          name: "$pow",
          decl: {
            start: {
              line: 163,
              column: 16
            },
            end: {
              line: 163,
              column: 20
            }
          },
          loc: {
            start: {
              line: 163,
              column: 32
            },
            end: {
              line: 168,
              column: 1
            }
          },
          line: 163
        },
        "14": {
          name: "$round",
          decl: {
            start: {
              line: 174,
              column: 16
            },
            end: {
              line: 174,
              column: 22
            }
          },
          loc: {
            start: {
              line: 174,
              column: 34
            },
            end: {
              line: 182,
              column: 1
            }
          },
          line: 174
        },
        "15": {
          name: "$sqrt",
          decl: {
            start: {
              line: 190,
              column: 16
            },
            end: {
              line: 190,
              column: 21
            }
          },
          loc: {
            start: {
              line: 190,
              column: 33
            },
            end: {
              line: 196,
              column: 1
            }
          },
          line: 190
        },
        "16": {
          name: "$subtract",
          decl: {
            start: {
              line: 204,
              column: 16
            },
            end: {
              line: 204,
              column: 25
            }
          },
          loc: {
            start: {
              line: 204,
              column: 37
            },
            end: {
              line: 207,
              column: 1
            }
          },
          line: 204
        },
        "17": {
          name: "$trunc",
          decl: {
            start: {
              line: 215,
              column: 16
            },
            end: {
              line: 215,
              column: 22
            }
          },
          loc: {
            start: {
              line: 215,
              column: 34
            },
            end: {
              line: 224,
              column: 1
            }
          },
          line: 215
        },
        "18": {
          name: "truncate",
          decl: {
            start: {
              line: 231,
              column: 9
            },
            end: {
              line: 231,
              column: 17
            }
          },
          loc: {
            start: {
              line: 231,
              column: 41
            },
            end: {
              line: 270,
              column: 1
            }
          },
          line: 231
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 13,
              column: 11
            },
            end: {
              line: 13,
              column: 69
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 13,
              column: 49
            },
            end: {
              line: 13,
              column: 53
            }
          }, {
            start: {
              line: 13,
              column: 56
            },
            end: {
              line: 13,
              column: 69
            }
          }],
          line: 13
        },
        "1": {
          loc: {
            start: {
              line: 13,
              column: 12
            },
            end: {
              line: 13,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 13,
              column: 12
            },
            end: {
              line: 13,
              column: 24
            }
          }, {
            start: {
              line: 13,
              column: 28
            },
            end: {
              line: 13,
              column: 45
            }
          }],
          line: 13
        },
        "2": {
          loc: {
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 30,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 30,
              column: 9
            }
          }, {
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 30,
              column: 9
            }
          }],
          line: 26
        },
        "3": {
          loc: {
            start: {
              line: 35,
              column: 11
            },
            end: {
              line: 35,
              column: 48
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 35,
              column: 23
            },
            end: {
              line: 35,
              column: 39
            }
          }, {
            start: {
              line: 35,
              column: 42
            },
            end: {
              line: 35,
              column: 48
            }
          }],
          line: 35
        },
        "4": {
          loc: {
            start: {
              line: 46,
              column: 4
            },
            end: {
              line: 47,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 46,
              column: 4
            },
            end: {
              line: 47,
              column: 20
            }
          }, {
            start: {
              line: 46,
              column: 4
            },
            end: {
              line: 47,
              column: 20
            }
          }],
          line: 46
        },
        "5": {
          loc: {
            start: {
              line: 48,
              column: 11
            },
            end: {
              line: 48,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 48,
              column: 11
            },
            end: {
              line: 48,
              column: 24
            }
          }, {
            start: {
              line: 48,
              column: 28
            },
            end: {
              line: 48,
              column: 38
            }
          }],
          line: 48
        },
        "6": {
          loc: {
            start: {
              line: 71,
              column: 4
            },
            end: {
              line: 72,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 71,
              column: 4
            },
            end: {
              line: 72,
              column: 20
            }
          }, {
            start: {
              line: 71,
              column: 4
            },
            end: {
              line: 72,
              column: 20
            }
          }],
          line: 71
        },
        "7": {
          loc: {
            start: {
              line: 73,
              column: 11
            },
            end: {
              line: 73,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 73,
              column: 11
            },
            end: {
              line: 73,
              column: 24
            }
          }, {
            start: {
              line: 73,
              column: 28
            },
            end: {
              line: 73,
              column: 38
            }
          }],
          line: 73
        },
        "8": {
          loc: {
            start: {
              line: 85,
              column: 4
            },
            end: {
              line: 86,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 85,
              column: 4
            },
            end: {
              line: 86,
              column: 20
            }
          }, {
            start: {
              line: 85,
              column: 4
            },
            end: {
              line: 86,
              column: 20
            }
          }],
          line: 85
        },
        "9": {
          loc: {
            start: {
              line: 87,
              column: 11
            },
            end: {
              line: 87,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 87,
              column: 11
            },
            end: {
              line: 87,
              column: 24
            }
          }, {
            start: {
              line: 87,
              column: 28
            },
            end: {
              line: 87,
              column: 38
            }
          }],
          line: 87
        },
        "10": {
          loc: {
            start: {
              line: 99,
              column: 4
            },
            end: {
              line: 100,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 99,
              column: 4
            },
            end: {
              line: 100,
              column: 20
            }
          }, {
            start: {
              line: 99,
              column: 4
            },
            end: {
              line: 100,
              column: 20
            }
          }],
          line: 99
        },
        "11": {
          loc: {
            start: {
              line: 101,
              column: 11
            },
            end: {
              line: 101,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 101,
              column: 11
            },
            end: {
              line: 101,
              column: 24
            }
          }, {
            start: {
              line: 101,
              column: 28
            },
            end: {
              line: 101,
              column: 38
            }
          }],
          line: 101
        },
        "12": {
          loc: {
            start: {
              line: 114,
              column: 11
            },
            end: {
              line: 114,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 114,
              column: 11
            },
            end: {
              line: 114,
              column: 24
            }
          }, {
            start: {
              line: 114,
              column: 28
            },
            end: {
              line: 114,
              column: 45
            }
          }],
          line: 114
        },
        "13": {
          loc: {
            start: {
              line: 115,
              column: 4
            },
            end: {
              line: 116,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 115,
              column: 4
            },
            end: {
              line: 116,
              column: 20
            }
          }, {
            start: {
              line: 115,
              column: 4
            },
            end: {
              line: 116,
              column: 20
            }
          }],
          line: 115
        },
        "14": {
          loc: {
            start: {
              line: 117,
              column: 11
            },
            end: {
              line: 117,
              column: 51
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 117,
              column: 11
            },
            end: {
              line: 117,
              column: 27
            }
          }, {
            start: {
              line: 117,
              column: 31
            },
            end: {
              line: 117,
              column: 51
            }
          }],
          line: 117
        },
        "15": {
          loc: {
            start: {
              line: 129,
              column: 4
            },
            end: {
              line: 130,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 129,
              column: 4
            },
            end: {
              line: 130,
              column: 20
            }
          }, {
            start: {
              line: 129,
              column: 4
            },
            end: {
              line: 130,
              column: 20
            }
          }],
          line: 129
        },
        "16": {
          loc: {
            start: {
              line: 131,
              column: 11
            },
            end: {
              line: 131,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 131,
              column: 11
            },
            end: {
              line: 131,
              column: 24
            }
          }, {
            start: {
              line: 131,
              column: 28
            },
            end: {
              line: 131,
              column: 38
            }
          }],
          line: 131
        },
        "17": {
          loc: {
            start: {
              line: 165,
              column: 11
            },
            end: {
              line: 165,
              column: 69
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 165,
              column: 11
            },
            end: {
              line: 165,
              column: 24
            }
          }, {
            start: {
              line: 165,
              column: 28
            },
            end: {
              line: 165,
              column: 45
            }
          }, {
            start: {
              line: 165,
              column: 49
            },
            end: {
              line: 165,
              column: 69
            }
          }],
          line: 165
        },
        "18": {
          loc: {
            start: {
              line: 166,
              column: 13
            },
            end: {
              line: 166,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 166,
              column: 13
            },
            end: {
              line: 166,
              column: 26
            }
          }, {
            start: {
              line: 166,
              column: 30
            },
            end: {
              line: 166,
              column: 41
            }
          }],
          line: 166
        },
        "19": {
          loc: {
            start: {
              line: 178,
              column: 4
            },
            end: {
              line: 179,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 178,
              column: 4
            },
            end: {
              line: 179,
              column: 19
            }
          }, {
            start: {
              line: 178,
              column: 4
            },
            end: {
              line: 179,
              column: 19
            }
          }],
          line: 178
        },
        "20": {
          loc: {
            start: {
              line: 178,
              column: 8
            },
            end: {
              line: 178,
              column: 62
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 178,
              column: 8
            },
            end: {
              line: 178,
              column: 18
            }
          }, {
            start: {
              line: 178,
              column: 22
            },
            end: {
              line: 178,
              column: 32
            }
          }, {
            start: {
              line: 178,
              column: 36
            },
            end: {
              line: 178,
              column: 62
            }
          }],
          line: 178
        },
        "21": {
          loc: {
            start: {
              line: 192,
              column: 4
            },
            end: {
              line: 193,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 192,
              column: 4
            },
            end: {
              line: 193,
              column: 20
            }
          }, {
            start: {
              line: 192,
              column: 4
            },
            end: {
              line: 193,
              column: 20
            }
          }],
          line: 192
        },
        "22": {
          loc: {
            start: {
              line: 194,
              column: 11
            },
            end: {
              line: 194,
              column: 43
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 194,
              column: 11
            },
            end: {
              line: 194,
              column: 22
            }
          }, {
            start: {
              line: 194,
              column: 26
            },
            end: {
              line: 194,
              column: 31
            }
          }, {
            start: {
              line: 194,
              column: 35
            },
            end: {
              line: 194,
              column: 43
            }
          }],
          line: 194
        },
        "23": {
          loc: {
            start: {
              line: 219,
              column: 4
            },
            end: {
              line: 220,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 219,
              column: 4
            },
            end: {
              line: 220,
              column: 19
            }
          }, {
            start: {
              line: 219,
              column: 4
            },
            end: {
              line: 220,
              column: 19
            }
          }],
          line: 219
        },
        "24": {
          loc: {
            start: {
              line: 219,
              column: 8
            },
            end: {
              line: 219,
              column: 62
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 219,
              column: 8
            },
            end: {
              line: 219,
              column: 18
            }
          }, {
            start: {
              line: 219,
              column: 22
            },
            end: {
              line: 219,
              column: 32
            }
          }, {
            start: {
              line: 219,
              column: 36
            },
            end: {
              line: 219,
              column: 62
            }
          }],
          line: 219
        },
        "25": {
          loc: {
            start: {
              line: 222,
              column: 11
            },
            end: {
              line: 222,
              column: 78
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 222,
              column: 11
            },
            end: {
              line: 222,
              column: 24
            }
          }, {
            start: {
              line: 222,
              column: 29
            },
            end: {
              line: 222,
              column: 45
            }
          }, {
            start: {
              line: 222,
              column: 49
            },
            end: {
              line: 222,
              column: 61
            }
          }, {
            start: {
              line: 222,
              column: 65
            },
            end: {
              line: 222,
              column: 77
            }
          }],
          line: 222
        },
        "26": {
          loc: {
            start: {
              line: 232,
              column: 15
            },
            end: {
              line: 232,
              column: 45
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 232,
              column: 39
            },
            end: {
              line: 232,
              column: 40
            }
          }, {
            start: {
              line: 232,
              column: 43
            },
            end: {
              line: 232,
              column: 45
            }
          }],
          line: 232
        },
        "27": {
          loc: {
            start: {
              line: 236,
              column: 4
            },
            end: {
              line: 268,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 236,
              column: 4
            },
            end: {
              line: 268,
              column: 5
            }
          }, {
            start: {
              line: 236,
              column: 4
            },
            end: {
              line: 268,
              column: 5
            }
          }],
          line: 236
        },
        "28": {
          loc: {
            start: {
              line: 238,
              column: 8
            },
            end: {
              line: 240,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 238,
              column: 8
            },
            end: {
              line: 240,
              column: 9
            }
          }, {
            start: {
              line: 238,
              column: 8
            },
            end: {
              line: 240,
              column: 9
            }
          }],
          line: 238
        },
        "29": {
          loc: {
            start: {
              line: 238,
              column: 12
            },
            end: {
              line: 238,
              column: 61
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 238,
              column: 12
            },
            end: {
              line: 238,
              column: 20
            }
          }, {
            start: {
              line: 238,
              column: 24
            },
            end: {
              line: 238,
              column: 42
            }
          }, {
            start: {
              line: 238,
              column: 46
            },
            end: {
              line: 238,
              column: 61
            }
          }],
          line: 238
        },
        "30": {
          loc: {
            start: {
              line: 242,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 242,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          }, {
            start: {
              line: 242,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          }],
          line: 242
        },
        "31": {
          loc: {
            start: {
              line: 248,
              column: 8
            },
            end: {
              line: 250,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 248,
              column: 8
            },
            end: {
              line: 250,
              column: 9
            }
          }, {
            start: {
              line: 248,
              column: 8
            },
            end: {
              line: 250,
              column: 9
            }
          }],
          line: 248
        },
        "32": {
          loc: {
            start: {
              line: 248,
              column: 12
            },
            end: {
              line: 248,
              column: 37
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 248,
              column: 12
            },
            end: {
              line: 248,
              column: 20
            }
          }, {
            start: {
              line: 248,
              column: 24
            },
            end: {
              line: 248,
              column: 37
            }
          }],
          line: 248
        },
        "33": {
          loc: {
            start: {
              line: 254,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 254,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          }, {
            start: {
              line: 254,
              column: 9
            },
            end: {
              line: 268,
              column: 5
            }
          }],
          line: 254
        },
        "34": {
          loc: {
            start: {
              line: 260,
              column: 8
            },
            end: {
              line: 267,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 260,
              column: 8
            },
            end: {
              line: 267,
              column: 9
            }
          }, {
            start: {
              line: 260,
              column: 8
            },
            end: {
              line: 267,
              column: 9
            }
          }],
          line: 260
        },
        "35": {
          loc: {
            start: {
              line: 260,
              column: 12
            },
            end: {
              line: 260,
              column: 35
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 260,
              column: 12
            },
            end: {
              line: 260,
              column: 20
            }
          }, {
            start: {
              line: 260,
              column: 24
            },
            end: {
              line: 260,
              column: 35
            }
          }],
          line: 260
        },
        "36": {
          loc: {
            start: {
              line: 264,
              column: 12
            },
            end: {
              line: 266,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 264,
              column: 12
            },
            end: {
              line: 266,
              column: 13
            }
          }, {
            start: {
              line: 264,
              column: 12
            },
            end: {
              line: 266,
              column: 13
            }
          }],
          line: 264
        },
        "37": {
          loc: {
            start: {
              line: 264,
              column: 16
            },
            end: {
              line: 264,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 264,
              column: 16
            },
            end: {
              line: 264,
              column: 26
            }
          }, {
            start: {
              line: 264,
              column: 30
            },
            end: {
              line: 264,
              column: 41
            }
          }],
          line: 264
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0,
        "85": 0,
        "86": 0,
        "87": 0,
        "88": 0,
        "89": 0,
        "90": 0,
        "91": 0,
        "92": 0,
        "93": 0,
        "94": 0,
        "95": 0,
        "96": 0,
        "97": 0,
        "98": 0,
        "99": 0,
        "100": 0,
        "101": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0, 0],
        "21": [0, 0],
        "22": [0, 0, 0],
        "23": [0, 0],
        "24": [0, 0, 0],
        "25": [0, 0, 0, 0],
        "26": [0, 0],
        "27": [0, 0],
        "28": [0, 0],
        "29": [0, 0, 0],
        "30": [0, 0],
        "31": [0, 0],
        "32": [0, 0],
        "33": [0, 0],
        "34": [0, 0],
        "35": [0, 0],
        "36": [0, 0],
        "37": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "78fe40836cd67e1c2da328d6b95f80d920a622e5"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_9zxc1ux3s = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_9zxc1ux3s();
  /**
   * Returns the absolute value of a number.
   * https://docs.mongodb.com/manual/reference/operator/aggregation/abs/#exp._S_abs
   *
   * @param obj
   * @param expr
   * @return {Number|null|NaN}
   */

  function $abs(obj, expr) {
    cov_9zxc1ux3s().f[0]++;
    var val = (cov_9zxc1ux3s().s[0]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[1]++;
    return (cov_9zxc1ux3s().b[1][0]++, val === null) || (cov_9zxc1ux3s().b[1][1]++, val === undefined) ? (cov_9zxc1ux3s().b[0][0]++, null) : (cov_9zxc1ux3s().b[0][1]++, Math.abs(val));
  }
  /**
   * Computes the sum of an array of numbers.
   *
   * @param obj
   * @param expr
   * @returns {Object}
   */

  function $add(obj, expr) {
    cov_9zxc1ux3s().f[1]++;
    var args = (cov_9zxc1ux3s().s[2]++, computeValue(obj, expr));
    var foundDate = (cov_9zxc1ux3s().s[3]++, false);
    var result = (cov_9zxc1ux3s().s[4]++, reduce(args, function (acc, val) {
      cov_9zxc1ux3s().f[2]++;
      cov_9zxc1ux3s().s[5]++;

      if (val instanceof Date) {
        cov_9zxc1ux3s().b[2][0]++;
        cov_9zxc1ux3s().s[6]++;
        assert(!foundDate, "'$add' can only have one date value");
        cov_9zxc1ux3s().s[7]++;
        foundDate = true;
        cov_9zxc1ux3s().s[8]++;
        val = val.getTime();
      } else {
        cov_9zxc1ux3s().b[2][1]++;
      } // assume val is a number


      cov_9zxc1ux3s().s[9]++;
      acc += val;
      cov_9zxc1ux3s().s[10]++;
      return acc;
    }, 0));
    cov_9zxc1ux3s().s[11]++;
    return foundDate ? (cov_9zxc1ux3s().b[3][0]++, new Date(result)) : (cov_9zxc1ux3s().b[3][1]++, result);
  }
  /**
   * Returns the smallest integer greater than or equal to the specified number.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $ceil(obj, expr) {
    cov_9zxc1ux3s().f[3]++;
    var arg = (cov_9zxc1ux3s().s[12]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[13]++;

    if (isNil(arg)) {
      cov_9zxc1ux3s().b[4][0]++;
      cov_9zxc1ux3s().s[14]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[4][1]++;
    }

    cov_9zxc1ux3s().s[15]++;
    assert((cov_9zxc1ux3s().b[5][0]++, isNumber(arg)) || (cov_9zxc1ux3s().b[5][1]++, isNaN(arg)), '$ceil expression must resolve to a number.');
    cov_9zxc1ux3s().s[16]++;
    return Math.ceil(arg);
  }
  /**
   * Takes two numbers and divides the first number by the second.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $divide(obj, expr) {
    cov_9zxc1ux3s().f[4]++;
    var args = (cov_9zxc1ux3s().s[17]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[18]++;
    return args[0] / args[1];
  }
  /**
   * Raises Euler’s number (i.e. e ) to the specified exponent and returns the result.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $exp(obj, expr) {
    cov_9zxc1ux3s().f[5]++;
    var arg = (cov_9zxc1ux3s().s[19]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[20]++;

    if (isNil(arg)) {
      cov_9zxc1ux3s().b[6][0]++;
      cov_9zxc1ux3s().s[21]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[6][1]++;
    }

    cov_9zxc1ux3s().s[22]++;
    assert((cov_9zxc1ux3s().b[7][0]++, isNumber(arg)) || (cov_9zxc1ux3s().b[7][1]++, isNaN(arg)), '$exp expression must resolve to a number.');
    cov_9zxc1ux3s().s[23]++;
    return Math.exp(arg);
  }
  /**
   * Returns the largest integer less than or equal to the specified number.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $floor(obj, expr) {
    cov_9zxc1ux3s().f[6]++;
    var arg = (cov_9zxc1ux3s().s[24]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[25]++;

    if (isNil(arg)) {
      cov_9zxc1ux3s().b[8][0]++;
      cov_9zxc1ux3s().s[26]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[8][1]++;
    }

    cov_9zxc1ux3s().s[27]++;
    assert((cov_9zxc1ux3s().b[9][0]++, isNumber(arg)) || (cov_9zxc1ux3s().b[9][1]++, isNaN(arg)), '$floor expression must resolve to a number.');
    cov_9zxc1ux3s().s[28]++;
    return Math.floor(arg);
  }
  /**
   * Calculates the natural logarithm ln (i.e loge) of a number and returns the result as a double.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $ln(obj, expr) {
    cov_9zxc1ux3s().f[7]++;
    var arg = (cov_9zxc1ux3s().s[29]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[30]++;

    if (isNil(arg)) {
      cov_9zxc1ux3s().b[10][0]++;
      cov_9zxc1ux3s().s[31]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[10][1]++;
    }

    cov_9zxc1ux3s().s[32]++;
    assert((cov_9zxc1ux3s().b[11][0]++, isNumber(arg)) || (cov_9zxc1ux3s().b[11][1]++, isNaN(arg)), '$ln expression must resolve to a number.');
    cov_9zxc1ux3s().s[33]++;
    return Math.log(arg);
  }
  /**
   * Calculates the log of a number in the specified base and returns the result as a double.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $log(obj, expr) {
    cov_9zxc1ux3s().f[8]++;
    var args = (cov_9zxc1ux3s().s[34]++, computeValue(obj, expr));
    var msg = (cov_9zxc1ux3s().s[35]++, '$log expression must resolve to array(2) of numbers');
    cov_9zxc1ux3s().s[36]++;
    assert((cov_9zxc1ux3s().b[12][0]++, isArray(args)) && (cov_9zxc1ux3s().b[12][1]++, args.length === 2), msg);
    cov_9zxc1ux3s().s[37]++;

    if (args.some(isNil)) {
      cov_9zxc1ux3s().b[13][0]++;
      cov_9zxc1ux3s().s[38]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[13][1]++;
    }

    cov_9zxc1ux3s().s[39]++;
    assert((cov_9zxc1ux3s().b[14][0]++, args.some(isNaN)) || (cov_9zxc1ux3s().b[14][1]++, args.every(isNumber)), msg);
    cov_9zxc1ux3s().s[40]++;
    return Math.log10(args[0]) / Math.log10(args[1]);
  }
  /**
   * Calculates the log base 10 of a number and returns the result as a double.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $log10(obj, expr) {
    cov_9zxc1ux3s().f[9]++;
    var arg = (cov_9zxc1ux3s().s[41]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[42]++;

    if (isNil(arg)) {
      cov_9zxc1ux3s().b[15][0]++;
      cov_9zxc1ux3s().s[43]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[15][1]++;
    }

    cov_9zxc1ux3s().s[44]++;
    assert((cov_9zxc1ux3s().b[16][0]++, isNumber(arg)) || (cov_9zxc1ux3s().b[16][1]++, isNaN(arg)), '$log10 expression must resolve to a number.');
    cov_9zxc1ux3s().s[45]++;
    return Math.log10(arg);
  }
  /**
   * Takes two numbers and calculates the modulo of the first number divided by the second.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $mod(obj, expr) {
    cov_9zxc1ux3s().f[10]++;
    var args = (cov_9zxc1ux3s().s[46]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[47]++;
    return args[0] % args[1];
  }
  /**
   * Computes the product of an array of numbers.
   *
   * @param obj
   * @param expr
   * @returns {Object}
   */

  function $multiply(obj, expr) {
    cov_9zxc1ux3s().f[11]++;
    var args = (cov_9zxc1ux3s().s[48]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[49]++;
    return reduce(args, function (acc, num) {
      cov_9zxc1ux3s().f[12]++;
      cov_9zxc1ux3s().s[50]++;
      return acc * num;
    }, 1);
  }
  /**
   * Raises a number to the specified exponent and returns the result.
   *
   * @param obj
   * @param expr
   * @returns {Object}
   */

  function $pow(obj, expr) {
    cov_9zxc1ux3s().f[13]++;
    var args = (cov_9zxc1ux3s().s[51]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[52]++;
    assert((cov_9zxc1ux3s().b[17][0]++, isArray(args)) && (cov_9zxc1ux3s().b[17][1]++, args.length === 2) && (cov_9zxc1ux3s().b[17][2]++, args.every(isNumber)), '$pow expression must resolve to array(2) of numbers');
    cov_9zxc1ux3s().s[53]++;
    assert(!((cov_9zxc1ux3s().b[18][0]++, args[0] === 0) && (cov_9zxc1ux3s().b[18][1]++, args[1] < 0)), '$pow cannot raise 0 to a negative exponent');
    cov_9zxc1ux3s().s[54]++;
    return Math.pow(args[0], args[1]);
  }
  /**
   * Rounds a number to to a whole integer or to a specified decimal place.
   * @param {*} obj
   * @param {*} expr
   */

  function $round(obj, expr) {
    cov_9zxc1ux3s().f[14]++;
    var args = (cov_9zxc1ux3s().s[55]++, computeValue(obj, expr));
    var num = (cov_9zxc1ux3s().s[56]++, args[0]);
    var place = (cov_9zxc1ux3s().s[57]++, args[1]);
    cov_9zxc1ux3s().s[58]++;

    if ((cov_9zxc1ux3s().b[20][0]++, isNil(num)) || (cov_9zxc1ux3s().b[20][1]++, isNaN(num)) || (cov_9zxc1ux3s().b[20][2]++, Math.abs(num) === Infinity)) {
      cov_9zxc1ux3s().b[19][0]++;
      cov_9zxc1ux3s().s[59]++;
      return num;
    } else {
      cov_9zxc1ux3s().b[19][1]++;
    }

    cov_9zxc1ux3s().s[60]++;
    assert(isNumber(num), '$round expression must resolve to a number.');
    cov_9zxc1ux3s().s[61]++;
    return truncate(num, place, true);
  }
  /**
   * Calculates the square root of a positive number and returns the result as a double.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $sqrt(obj, expr) {
    cov_9zxc1ux3s().f[15]++;
    var n = (cov_9zxc1ux3s().s[62]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[63]++;

    if (isNil(n)) {
      cov_9zxc1ux3s().b[21][0]++;
      cov_9zxc1ux3s().s[64]++;
      return null;
    } else {
      cov_9zxc1ux3s().b[21][1]++;
    }

    cov_9zxc1ux3s().s[65]++;
    assert((cov_9zxc1ux3s().b[22][0]++, isNumber(n)) && (cov_9zxc1ux3s().b[22][1]++, n > 0) || (cov_9zxc1ux3s().b[22][2]++, isNaN(n)), '$sqrt expression must resolve to non-negative number.');
    cov_9zxc1ux3s().s[66]++;
    return Math.sqrt(n);
  }
  /**
   * Takes an array that contains two numbers or two dates and subtracts the second value from the first.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $subtract(obj, expr) {
    cov_9zxc1ux3s().f[16]++;
    var args = (cov_9zxc1ux3s().s[67]++, computeValue(obj, expr));
    cov_9zxc1ux3s().s[68]++;
    return args[0] - args[1];
  }
  /**
   * Truncates a number to a whole integer or to a specified decimal place.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $trunc(obj, expr) {
    cov_9zxc1ux3s().f[17]++;
    var arr = (cov_9zxc1ux3s().s[69]++, computeValue(obj, expr));
    var num = (cov_9zxc1ux3s().s[70]++, arr[0]);
    var places = (cov_9zxc1ux3s().s[71]++, arr[1]);
    cov_9zxc1ux3s().s[72]++;

    if ((cov_9zxc1ux3s().b[24][0]++, isNil(num)) || (cov_9zxc1ux3s().b[24][1]++, isNaN(num)) || (cov_9zxc1ux3s().b[24][2]++, Math.abs(num) === Infinity)) {
      cov_9zxc1ux3s().b[23][0]++;
      cov_9zxc1ux3s().s[73]++;
      return num;
    } else {
      cov_9zxc1ux3s().b[23][1]++;
    }

    cov_9zxc1ux3s().s[74]++;
    assert(isNumber(num), '$trunc expression must resolve to a number.');
    cov_9zxc1ux3s().s[75]++;
    assert((cov_9zxc1ux3s().b[25][0]++, isNil(places)) || (cov_9zxc1ux3s().b[25][1]++, isNumber(places)) && (cov_9zxc1ux3s().b[25][2]++, places > -20) && (cov_9zxc1ux3s().b[25][3]++, places < 100), "$trunc expression has invalid place");
    cov_9zxc1ux3s().s[76]++;
    return truncate(num, places, false);
  }
  /**
   * Truncates integer value to number of places. If roundOff is specified round value instead to the number of places
   * @param {Number} num
   * @param {Number} places
   * @param {Boolean} roundOff
   */

  function truncate(num, places, roundOff) {
    cov_9zxc1ux3s().f[18]++;
    var sign = (cov_9zxc1ux3s().s[77]++, Math.abs(num) === num ? (cov_9zxc1ux3s().b[26][0]++, 1) : (cov_9zxc1ux3s().b[26][1]++, -1));
    cov_9zxc1ux3s().s[78]++;
    num = Math.abs(num);
    var result = (cov_9zxc1ux3s().s[79]++, Math.trunc(num));
    var decimals = (cov_9zxc1ux3s().s[80]++, num - result);
    cov_9zxc1ux3s().s[81]++;

    if (places === 0) {
      cov_9zxc1ux3s().b[27][0]++;
      var firstDigit = (cov_9zxc1ux3s().s[82]++, Math.trunc(10 * decimals));
      cov_9zxc1ux3s().s[83]++;

      if ((cov_9zxc1ux3s().b[29][0]++, roundOff) && (cov_9zxc1ux3s().b[29][1]++, (result & 1) === 1) && (cov_9zxc1ux3s().b[29][2]++, firstDigit >= 5)) {
        cov_9zxc1ux3s().b[28][0]++;
        cov_9zxc1ux3s().s[84]++;
        result++;
      } else {
        cov_9zxc1ux3s().b[28][1]++;
      }
    } else {
      cov_9zxc1ux3s().b[27][1]++;
      cov_9zxc1ux3s().s[85]++;

      if (places > 0) {
        cov_9zxc1ux3s().b[30][0]++;
        var offset = (cov_9zxc1ux3s().s[86]++, Math.pow(10, places));
        var remainder = (cov_9zxc1ux3s().s[87]++, Math.trunc(decimals * offset)); // last digit before cut off

        var lastDigit = (cov_9zxc1ux3s().s[88]++, Math.trunc(decimals * offset * 10) % 10); // add one if last digit is greater than 5

        cov_9zxc1ux3s().s[89]++;

        if ((cov_9zxc1ux3s().b[32][0]++, roundOff) && (cov_9zxc1ux3s().b[32][1]++, lastDigit > 5)) {
          cov_9zxc1ux3s().b[31][0]++;
          cov_9zxc1ux3s().s[90]++;
          remainder += 1;
        } else {
          cov_9zxc1ux3s().b[31][1]++;
        } // compute decimal remainder and add to whole number


        cov_9zxc1ux3s().s[91]++;
        result += remainder / offset;
      } else {
        cov_9zxc1ux3s().b[30][1]++;
        cov_9zxc1ux3s().s[92]++;

        if (places < 0) {
          cov_9zxc1ux3s().b[33][0]++;

          // handle negative decimal places
          var _offset = (cov_9zxc1ux3s().s[93]++, Math.pow(10, -1 * places));

          var excess = (cov_9zxc1ux3s().s[94]++, result % _offset);
          cov_9zxc1ux3s().s[95]++;
          result = Math.max(0, result - excess); // for negative values the absolute must increase so we round up the last digit if >= 5

          cov_9zxc1ux3s().s[96]++;

          if ((cov_9zxc1ux3s().b[35][0]++, roundOff) && (cov_9zxc1ux3s().b[35][1]++, sign === -1)) {
            cov_9zxc1ux3s().b[34][0]++;
            cov_9zxc1ux3s().s[97]++;

            while (excess > 10) {
              cov_9zxc1ux3s().s[98]++;
              excess -= excess % 10;
            }

            cov_9zxc1ux3s().s[99]++;

            if ((cov_9zxc1ux3s().b[37][0]++, result > 0) && (cov_9zxc1ux3s().b[37][1]++, excess >= 5)) {
              cov_9zxc1ux3s().b[36][0]++;
              cov_9zxc1ux3s().s[100]++;
              result += _offset;
            } else {
              cov_9zxc1ux3s().b[36][1]++;
            }
          } else {
            cov_9zxc1ux3s().b[34][1]++;
          }
        } else {
          cov_9zxc1ux3s().b[33][1]++;
        }
      }
    }

    cov_9zxc1ux3s().s[101]++;
    return result * sign;
  }

  function cov_1vvxg9av0m() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/array.js";
    var hash = "50b20a7c5c3549eb07a33c1737b57473c046b27a";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/array.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 11,
            column: 37
          }
        },
        "1": {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 97
          }
        },
        "2": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 86
          }
        },
        "3": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 90
          }
        },
        "4": {
          start: {
            line: 15,
            column: 14
          },
          end: {
            line: 15,
            column: 20
          }
        },
        "5": {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 17
          }
        },
        "6": {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        "7": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 37
          }
        },
        "8": {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 22,
            column: 5
          }
        },
        "9": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 24
          }
        },
        "10": {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 21
          }
        },
        "11": {
          start: {
            line: 29,
            column: 14
          },
          end: {
            line: 29,
            column: 37
          }
        },
        "12": {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 79
          }
        },
        "13": {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 40,
            column: 11
          }
        },
        "14": {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        "15": {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 33,
            column: 36
          }
        },
        "16": {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 109
          }
        },
        "17": {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 37,
            column: 34
          }
        },
        "18": {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 22
          }
        },
        "19": {
          start: {
            line: 50,
            column: 14
          },
          end: {
            line: 50,
            column: 43
          }
        },
        "20": {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 67
          }
        },
        "21": {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 53,
            column: 20
          }
        },
        "22": {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 53,
            column: 20
          }
        },
        "23": {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 58
          }
        },
        "24": {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 52
          }
        },
        "25": {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 64,
            column: 45
          }
        },
        "26": {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 26
          }
        },
        "27": {
          start: {
            line: 66,
            column: 19
          },
          end: {
            line: 66,
            column: 31
          }
        },
        "28": {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 82
          }
        },
        "29": {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 73,
            column: 7
          }
        },
        "30": {
          start: {
            line: 70,
            column: 22
          },
          end: {
            line: 70,
            column: 24
          }
        },
        "31": {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 71,
            column: 33
          }
        },
        "32": {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 72,
            column: 56
          }
        },
        "33": {
          start: {
            line: 82,
            column: 14
          },
          end: {
            line: 82,
            column: 40
          }
        },
        "34": {
          start: {
            line: 83,
            column: 14
          },
          end: {
            line: 83,
            column: 40
          }
        },
        "35": {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 65
          }
        },
        "36": {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 45
          }
        },
        "37": {
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 38
          }
        },
        "38": {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 98,
            column: 20
          }
        },
        "39": {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 20
          }
        },
        "40": {
          start: {
            line: 99,
            column: 14
          },
          end: {
            line: 99,
            column: 21
          }
        },
        "41": {
          start: {
            line: 100,
            column: 22
          },
          end: {
            line: 100,
            column: 29
          }
        },
        "42": {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 102,
            column: 20
          }
        },
        "43": {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 102,
            column: 20
          }
        },
        "44": {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 79
          }
        },
        "45": {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 104,
            column: 28
          }
        },
        "46": {
          start: {
            line: 105,
            column: 14
          },
          end: {
            line: 105,
            column: 21
          }
        },
        "47": {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 107,
            column: 25
          }
        },
        "48": {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 25
          }
        },
        "49": {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 109,
            column: 18
          }
        },
        "50": {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 109,
            column: 18
          }
        },
        "51": {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 74
          }
        },
        "52": {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        "53": {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 112,
            column: 36
          }
        },
        "54": {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 66
          }
        },
        "55": {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 47
          }
        },
        "56": {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 49
          }
        },
        "57": {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 83
          }
        },
        "58": {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 27
          }
        },
        "59": {
          start: {
            line: 137,
            column: 17
          },
          end: {
            line: 137,
            column: 27
          }
        },
        "60": {
          start: {
            line: 141,
            column: 18
          },
          end: {
            line: 141,
            column: 30
          }
        },
        "61": {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 145,
            column: 7
          }
        },
        "62": {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 25
          }
        },
        "63": {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 41
          }
        },
        "64": {
          start: {
            line: 151,
            column: 14
          },
          end: {
            line: 151,
            column: 37
          }
        },
        "65": {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 81
          }
        },
        "66": {
          start: {
            line: 153,
            column: 14
          },
          end: {
            line: 153,
            column: 16
          }
        },
        "67": {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 44
          }
        },
        "68": {
          start: {
            line: 154,
            column: 24
          },
          end: {
            line: 154,
            column: 42
          }
        },
        "69": {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 15
          }
        },
        "70": {
          start: {
            line: 165,
            column: 14
          },
          end: {
            line: 165,
            column: 37
          }
        },
        "71": {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 166,
            column: 22
          }
        },
        "72": {
          start: {
            line: 167,
            column: 14
          },
          end: {
            line: 167,
            column: 20
          }
        },
        "73": {
          start: {
            line: 168,
            column: 15
          },
          end: {
            line: 168,
            column: 26
          }
        },
        "74": {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 169,
            column: 19
          }
        },
        "75": {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        "76": {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 171,
            column: 27
          }
        },
        "77": {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 22
          }
        },
        "78": {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 18
          }
        },
        "79": {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 183,
            column: 45
          }
        },
        "80": {
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 59
          }
        },
        "81": {
          start: {
            line: 185,
            column: 17
          },
          end: {
            line: 185,
            column: 27
          }
        },
        "82": {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 187,
            column: 20
          }
        },
        "83": {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 187,
            column: 20
          }
        },
        "84": {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 82
          }
        },
        "85": {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 104
          }
        },
        "86": {
          start: {
            line: 189,
            column: 37
          },
          end: {
            line: 189,
            column: 88
          }
        },
        "87": {
          start: {
            line: 199,
            column: 14
          },
          end: {
            line: 199,
            column: 37
          }
        },
        "88": {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 201,
            column: 20
          }
        },
        "89": {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 20
          }
        },
        "90": {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 78
          }
        },
        "91": {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 203,
            column: 19
          }
        },
        "92": {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 22
          }
        },
        "93": {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 21
          }
        },
        "94": {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 18
          }
        },
        "95": {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 39
          }
        },
        "96": {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 53
          }
        },
        "97": {
          start: {
            line: 226,
            column: 14
          },
          end: {
            line: 226,
            column: 37
          }
        },
        "98": {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 41
          }
        },
        "99": {
          start: {
            line: 240,
            column: 17
          },
          end: {
            line: 240,
            column: 47
          }
        },
        "100": {
          start: {
            line: 241,
            column: 27
          },
          end: {
            line: 241,
            column: 57
          }
        },
        "101": {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 76
          }
        },
        "102": {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 80
          }
        },
        "103": {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        "104": {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 245,
            column: 101
          }
        },
        "105": {
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 20
          }
        },
        "106": {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        "107": {
          start: {
            line: 248,
            column: 17
          },
          end: {
            line: 248,
            column: 18
          }
        },
        "108": {
          start: {
            line: 248,
            column: 26
          },
          end: {
            line: 248,
            column: 39
          }
        },
        "109": {
          start: {
            line: 249,
            column: 18
          },
          end: {
            line: 249,
            column: 27
          }
        },
        "110": {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 251,
            column: 24
          }
        },
        "111": {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 251,
            column: 24
          }
        },
        "112": {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 92
          }
        },
        "113": {
          start: {
            line: 253,
            column: 8
          },
          end: {
            line: 255,
            column: 59
          }
        },
        "114": {
          start: {
            line: 257,
            column: 17
          },
          end: {
            line: 257,
            column: 19
          }
        },
        "115": {
          start: {
            line: 258,
            column: 19
          },
          end: {
            line: 258,
            column: 38
          }
        },
        "116": {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        "117": {
          start: {
            line: 259,
            column: 17
          },
          end: {
            line: 259,
            column: 18
          }
        },
        "118": {
          start: {
            line: 260,
            column: 19
          },
          end: {
            line: 262,
            column: 10
          }
        },
        "119": {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 70
          }
        },
        "120": {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 263,
            column: 26
          }
        },
        "121": {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 18
          }
        },
        "122": {
          start: {
            line: 273,
            column: 15
          },
          end: {
            line: 273,
            column: 38
          }
        },
        "123": {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        "124": {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 275,
            column: 69
          }
        },
        "125": {
          start: {
            line: 275,
            column: 41
          },
          end: {
            line: 275,
            column: 63
          }
        },
        "126": {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 14
          }
        }
      },
      fnMap: {
        "0": {
          name: "$arrayElemAt",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 28
            }
          },
          loc: {
            start: {
              line: 10,
              column: 40
            },
            end: {
              line: 24,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "$arrayToObject",
          decl: {
            start: {
              line: 28,
              column: 16
            },
            end: {
              line: 28,
              column: 30
            }
          },
          loc: {
            start: {
              line: 28,
              column: 42
            },
            end: {
              line: 41,
              column: 1
            }
          },
          line: 28
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 31,
              column: 23
            },
            end: {
              line: 31,
              column: 24
            }
          },
          loc: {
            start: {
              line: 31,
              column: 40
            },
            end: {
              line: 40,
              column: 5
            }
          },
          line: 31
        },
        "3": {
          name: "$concatArrays",
          decl: {
            start: {
              line: 49,
              column: 16
            },
            end: {
              line: 49,
              column: 29
            }
          },
          loc: {
            start: {
              line: 49,
              column: 41
            },
            end: {
              line: 55,
              column: 1
            }
          },
          line: 49
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 54,
              column: 22
            },
            end: {
              line: 54,
              column: 23
            }
          },
          loc: {
            start: {
              line: 54,
              column: 37
            },
            end: {
              line: 54,
              column: 52
            }
          },
          line: 54
        },
        "5": {
          name: "$filter",
          decl: {
            start: {
              line: 63,
              column: 16
            },
            end: {
              line: 63,
              column: 23
            }
          },
          loc: {
            start: {
              line: 63,
              column: 35
            },
            end: {
              line: 74,
              column: 1
            }
          },
          line: 63
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 68,
              column: 24
            },
            end: {
              line: 68,
              column: 25
            }
          },
          loc: {
            start: {
              line: 68,
              column: 31
            },
            end: {
              line: 73,
              column: 5
            }
          },
          line: 68
        },
        "7": {
          name: "$in",
          decl: {
            start: {
              line: 81,
              column: 16
            },
            end: {
              line: 81,
              column: 19
            }
          },
          loc: {
            start: {
              line: 81,
              column: 31
            },
            end: {
              line: 86,
              column: 1
            }
          },
          line: 81
        },
        "8": {
          name: "$indexOfArray",
          decl: {
            start: {
              line: 95,
              column: 16
            },
            end: {
              line: 95,
              column: 29
            }
          },
          loc: {
            start: {
              line: 95,
              column: 41
            },
            end: {
              line: 115,
              column: 1
            }
          },
          line: 95
        },
        "9": {
          name: "$isArray",
          decl: {
            start: {
              line: 123,
              column: 16
            },
            end: {
              line: 123,
              column: 24
            }
          },
          loc: {
            start: {
              line: 123,
              column: 36
            },
            end: {
              line: 125,
              column: 1
            }
          },
          line: 123
        },
        "10": {
          name: "$map",
          decl: {
            start: {
              line: 133,
              column: 16
            },
            end: {
              line: 133,
              column: 20
            }
          },
          loc: {
            start: {
              line: 133,
              column: 32
            },
            end: {
              line: 146,
              column: 1
            }
          },
          line: 133
        },
        "11": {
          name: "(anonymous_11)",
          decl: {
            start: {
              line: 142,
              column: 25
            },
            end: {
              line: 142,
              column: 26
            }
          },
          loc: {
            start: {
              line: 142,
              column: 32
            },
            end: {
              line: 145,
              column: 5
            }
          },
          line: 142
        },
        "12": {
          name: "$objectToArray",
          decl: {
            start: {
              line: 150,
              column: 16
            },
            end: {
              line: 150,
              column: 30
            }
          },
          loc: {
            start: {
              line: 150,
              column: 42
            },
            end: {
              line: 156,
              column: 1
            }
          },
          line: 150
        },
        "13": {
          name: "(anonymous_13)",
          decl: {
            start: {
              line: 154,
              column: 14
            },
            end: {
              line: 154,
              column: 15
            }
          },
          loc: {
            start: {
              line: 154,
              column: 24
            },
            end: {
              line: 154,
              column: 42
            }
          },
          line: 154
        },
        "14": {
          name: "$range",
          decl: {
            start: {
              line: 164,
              column: 16
            },
            end: {
              line: 164,
              column: 22
            }
          },
          loc: {
            start: {
              line: 164,
              column: 34
            },
            end: {
              line: 175,
              column: 1
            }
          },
          line: 164
        },
        "15": {
          name: "$reduce",
          decl: {
            start: {
              line: 182,
              column: 16
            },
            end: {
              line: 182,
              column: 23
            }
          },
          loc: {
            start: {
              line: 182,
              column: 35
            },
            end: {
              line: 190,
              column: 1
            }
          },
          line: 182
        },
        "16": {
          name: "(anonymous_16)",
          decl: {
            start: {
              line: 189,
              column: 25
            },
            end: {
              line: 189,
              column: 26
            }
          },
          loc: {
            start: {
              line: 189,
              column: 37
            },
            end: {
              line: 189,
              column: 88
            }
          },
          line: 189
        },
        "17": {
          name: "$reverseArray",
          decl: {
            start: {
              line: 198,
              column: 16
            },
            end: {
              line: 198,
              column: 29
            }
          },
          loc: {
            start: {
              line: 198,
              column: 41
            },
            end: {
              line: 207,
              column: 1
            }
          },
          line: 198
        },
        "18": {
          name: "$size",
          decl: {
            start: {
              line: 214,
              column: 16
            },
            end: {
              line: 214,
              column: 21
            }
          },
          loc: {
            start: {
              line: 214,
              column: 33
            },
            end: {
              line: 217,
              column: 1
            }
          },
          line: 214
        },
        "19": {
          name: "$slice",
          decl: {
            start: {
              line: 225,
              column: 16
            },
            end: {
              line: 225,
              column: 22
            }
          },
          loc: {
            start: {
              line: 225,
              column: 34
            },
            end: {
              line: 228,
              column: 1
            }
          },
          line: 225
        },
        "20": {
          name: "$zip",
          decl: {
            start: {
              line: 239,
              column: 16
            },
            end: {
              line: 239,
              column: 20
            }
          },
          loc: {
            start: {
              line: 239,
              column: 32
            },
            end: {
              line: 266,
              column: 1
            }
          },
          line: 239
        },
        "21": {
          name: "(anonymous_21)",
          decl: {
            start: {
              line: 260,
              column: 30
            },
            end: {
              line: 260,
              column: 31
            }
          },
          loc: {
            start: {
              line: 260,
              column: 46
            },
            end: {
              line: 262,
              column: 9
            }
          },
          line: 260
        },
        "22": {
          name: "$mergeObjects",
          decl: {
            start: {
              line: 272,
              column: 16
            },
            end: {
              line: 272,
              column: 29
            }
          },
          loc: {
            start: {
              line: 272,
              column: 41
            },
            end: {
              line: 278,
              column: 1
            }
          },
          line: 272
        },
        "23": {
          name: "(anonymous_23)",
          decl: {
            start: {
              line: 275,
              column: 28
            },
            end: {
              line: 275,
              column: 29
            }
          },
          loc: {
            start: {
              line: 275,
              column: 41
            },
            end: {
              line: 275,
              column: 63
            }
          },
          line: 275
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 43
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 23
            }
          }, {
            start: {
              line: 12,
              column: 27
            },
            end: {
              line: 12,
              column: 43
            }
          }],
          line: 12
        },
        "1": {
          loc: {
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 22,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 22,
              column: 5
            }
          }, {
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 22,
              column: 5
            }
          }],
          line: 17
        },
        "2": {
          loc: {
            start: {
              line: 17,
              column: 8
            },
            end: {
              line: 17,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 17,
              column: 8
            },
            end: {
              line: 17,
              column: 15
            }
          }, {
            start: {
              line: 17,
              column: 19
            },
            end: {
              line: 17,
              column: 46
            }
          }],
          line: 17
        },
        "3": {
          loc: {
            start: {
              line: 20,
              column: 9
            },
            end: {
              line: 22,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 20,
              column: 9
            },
            end: {
              line: 22,
              column: 5
            }
          }, {
            start: {
              line: 20,
              column: 9
            },
            end: {
              line: 22,
              column: 5
            }
          }],
          line: 20
        },
        "4": {
          loc: {
            start: {
              line: 20,
              column: 13
            },
            end: {
              line: 20,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 20,
              column: 13
            },
            end: {
              line: 20,
              column: 21
            }
          }, {
            start: {
              line: 20,
              column: 25
            },
            end: {
              line: 20,
              column: 41
            }
          }],
          line: 20
        },
        "5": {
          loc: {
            start: {
              line: 32,
              column: 8
            },
            end: {
              line: 38,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 32,
              column: 8
            },
            end: {
              line: 38,
              column: 9
            }
          }, {
            start: {
              line: 32,
              column: 8
            },
            end: {
              line: 38,
              column: 9
            }
          }],
          line: 32
        },
        "6": {
          loc: {
            start: {
              line: 32,
              column: 12
            },
            end: {
              line: 32,
              column: 43
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 32,
              column: 12
            },
            end: {
              line: 32,
              column: 24
            }
          }, {
            start: {
              line: 32,
              column: 28
            },
            end: {
              line: 32,
              column: 43
            }
          }],
          line: 32
        },
        "7": {
          loc: {
            start: {
              line: 36,
              column: 19
            },
            end: {
              line: 36,
              column: 66
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 36,
              column: 19
            },
            end: {
              line: 36,
              column: 32
            }
          }, {
            start: {
              line: 36,
              column: 36
            },
            end: {
              line: 36,
              column: 49
            }
          }, {
            start: {
              line: 36,
              column: 53
            },
            end: {
              line: 36,
              column: 66
            }
          }],
          line: 36
        },
        "8": {
          loc: {
            start: {
              line: 52,
              column: 4
            },
            end: {
              line: 53,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 52,
              column: 4
            },
            end: {
              line: 53,
              column: 20
            }
          }, {
            start: {
              line: 52,
              column: 4
            },
            end: {
              line: 53,
              column: 20
            }
          }],
          line: 52
        },
        "9": {
          loc: {
            start: {
              line: 97,
              column: 4
            },
            end: {
              line: 98,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 97,
              column: 4
            },
            end: {
              line: 98,
              column: 20
            }
          }, {
            start: {
              line: 97,
              column: 4
            },
            end: {
              line: 98,
              column: 20
            }
          }],
          line: 97
        },
        "10": {
          loc: {
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 102,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 102,
              column: 20
            }
          }, {
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 102,
              column: 20
            }
          }],
          line: 101
        },
        "11": {
          loc: {
            start: {
              line: 104,
              column: 16
            },
            end: {
              line: 104,
              column: 28
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 104,
              column: 16
            },
            end: {
              line: 104,
              column: 23
            }
          }, {
            start: {
              line: 104,
              column: 27
            },
            end: {
              line: 104,
              column: 28
            }
          }],
          line: 104
        },
        "12": {
          loc: {
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 107,
              column: 25
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 107,
              column: 25
            }
          }, {
            start: {
              line: 106,
              column: 4
            },
            end: {
              line: 107,
              column: 25
            }
          }],
          line: 106
        },
        "13": {
          loc: {
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 18
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 18
            }
          }, {
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 18
            }
          }],
          line: 108
        },
        "14": {
          loc: {
            start: {
              line: 110,
              column: 11
            },
            end: {
              line: 110,
              column: 33
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 110,
              column: 11
            },
            end: {
              line: 110,
              column: 21
            }
          }, {
            start: {
              line: 110,
              column: 25
            },
            end: {
              line: 110,
              column: 33
            }
          }],
          line: 110
        },
        "15": {
          loc: {
            start: {
              line: 111,
              column: 4
            },
            end: {
              line: 113,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 111,
              column: 4
            },
            end: {
              line: 113,
              column: 5
            }
          }, {
            start: {
              line: 111,
              column: 4
            },
            end: {
              line: 113,
              column: 5
            }
          }],
          line: 111
        },
        "16": {
          loc: {
            start: {
              line: 111,
              column: 8
            },
            end: {
              line: 111,
              column: 37
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 111,
              column: 8
            },
            end: {
              line: 111,
              column: 17
            }
          }, {
            start: {
              line: 111,
              column: 21
            },
            end: {
              line: 111,
              column: 37
            }
          }],
          line: 111
        },
        "17": {
          loc: {
            start: {
              line: 168,
              column: 15
            },
            end: {
              line: 168,
              column: 26
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 168,
              column: 15
            },
            end: {
              line: 168,
              column: 21
            }
          }, {
            start: {
              line: 168,
              column: 25
            },
            end: {
              line: 168,
              column: 26
            }
          }],
          line: 168
        },
        "18": {
          loc: {
            start: {
              line: 170,
              column: 11
            },
            end: {
              line: 170,
              column: 65
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 170,
              column: 12
            },
            end: {
              line: 170,
              column: 23
            }
          }, {
            start: {
              line: 170,
              column: 27
            },
            end: {
              line: 170,
              column: 35
            }
          }, {
            start: {
              line: 170,
              column: 41
            },
            end: {
              line: 170,
              column: 52
            }
          }, {
            start: {
              line: 170,
              column: 56
            },
            end: {
              line: 170,
              column: 64
            }
          }],
          line: 170
        },
        "19": {
          loc: {
            start: {
              line: 186,
              column: 4
            },
            end: {
              line: 187,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 186,
              column: 4
            },
            end: {
              line: 187,
              column: 20
            }
          }, {
            start: {
              line: 186,
              column: 4
            },
            end: {
              line: 187,
              column: 20
            }
          }],
          line: 186
        },
        "20": {
          loc: {
            start: {
              line: 200,
              column: 4
            },
            end: {
              line: 201,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 200,
              column: 4
            },
            end: {
              line: 201,
              column: 20
            }
          }, {
            start: {
              line: 200,
              column: 4
            },
            end: {
              line: 201,
              column: 20
            }
          }],
          line: 200
        },
        "21": {
          loc: {
            start: {
              line: 216,
              column: 11
            },
            end: {
              line: 216,
              column: 52
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 216,
              column: 28
            },
            end: {
              line: 216,
              column: 40
            }
          }, {
            start: {
              line: 216,
              column: 43
            },
            end: {
              line: 216,
              column: 52
            }
          }],
          line: 216
        },
        "22": {
          loc: {
            start: {
              line: 241,
              column: 27
            },
            end: {
              line: 241,
              column: 57
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 241,
              column: 27
            },
            end: {
              line: 241,
              column: 48
            }
          }, {
            start: {
              line: 241,
              column: 52
            },
            end: {
              line: 241,
              column: 57
            }
          }],
          line: 241
        },
        "23": {
          loc: {
            start: {
              line: 244,
              column: 4
            },
            end: {
              line: 246,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 244,
              column: 4
            },
            end: {
              line: 246,
              column: 5
            }
          }, {
            start: {
              line: 244,
              column: 4
            },
            end: {
              line: 246,
              column: 5
            }
          }],
          line: 244
        },
        "24": {
          loc: {
            start: {
              line: 250,
              column: 8
            },
            end: {
              line: 251,
              column: 24
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 250,
              column: 8
            },
            end: {
              line: 251,
              column: 24
            }
          }, {
            start: {
              line: 250,
              column: 8
            },
            end: {
              line: 251,
              column: 24
            }
          }],
          line: 250
        },
        "25": {
          loc: {
            start: {
              line: 253,
              column: 19
            },
            end: {
              line: 255,
              column: 58
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 254,
              column: 14
            },
            end: {
              line: 254,
              column: 44
            }
          }, {
            start: {
              line: 255,
              column: 14
            },
            end: {
              line: 255,
              column: 58
            }
          }],
          line: 253
        },
        "26": {
          loc: {
            start: {
              line: 255,
              column: 23
            },
            end: {
              line: 255,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 255,
              column: 23
            },
            end: {
              line: 255,
              column: 31
            }
          }, {
            start: {
              line: 255,
              column: 35
            },
            end: {
              line: 255,
              column: 45
            }
          }],
          line: 255
        },
        "27": {
          loc: {
            start: {
              line: 258,
              column: 19
            },
            end: {
              line: 258,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 258,
              column: 19
            },
            end: {
              line: 258,
              column: 32
            }
          }, {
            start: {
              line: 258,
              column: 36
            },
            end: {
              line: 258,
              column: 38
            }
          }],
          line: 258
        },
        "28": {
          loc: {
            start: {
              line: 261,
              column: 19
            },
            end: {
              line: 261,
              column: 69
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 261,
              column: 36
            },
            end: {
              line: 261,
              column: 59
            }
          }, {
            start: {
              line: 261,
              column: 63
            },
            end: {
              line: 261,
              column: 69
            }
          }],
          line: 261
        },
        "29": {
          loc: {
            start: {
              line: 261,
              column: 36
            },
            end: {
              line: 261,
              column: 59
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 261,
              column: 36
            },
            end: {
              line: 261,
              column: 51
            }
          }, {
            start: {
              line: 261,
              column: 55
            },
            end: {
              line: 261,
              column: 59
            }
          }],
          line: 261
        },
        "30": {
          loc: {
            start: {
              line: 274,
              column: 4
            },
            end: {
              line: 276,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 274,
              column: 4
            },
            end: {
              line: 276,
              column: 5
            }
          }, {
            start: {
              line: 274,
              column: 4
            },
            end: {
              line: 276,
              column: 5
            }
          }],
          line: 274
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0,
        "85": 0,
        "86": 0,
        "87": 0,
        "88": 0,
        "89": 0,
        "90": 0,
        "91": 0,
        "92": 0,
        "93": 0,
        "94": 0,
        "95": 0,
        "96": 0,
        "97": 0,
        "98": 0,
        "99": 0,
        "100": 0,
        "101": 0,
        "102": 0,
        "103": 0,
        "104": 0,
        "105": 0,
        "106": 0,
        "107": 0,
        "108": 0,
        "109": 0,
        "110": 0,
        "111": 0,
        "112": 0,
        "113": 0,
        "114": 0,
        "115": 0,
        "116": 0,
        "117": 0,
        "118": 0,
        "119": 0,
        "120": 0,
        "121": 0,
        "122": 0,
        "123": 0,
        "124": 0,
        "125": 0,
        "126": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0, 0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0],
        "24": [0, 0],
        "25": [0, 0],
        "26": [0, 0],
        "27": [0, 0],
        "28": [0, 0],
        "29": [0, 0],
        "30": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "50b20a7c5c3549eb07a33c1737b57473c046b27a"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1vvxg9av0m = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1vvxg9av0m();
  /**
   * Returns the element at the specified array index.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $arrayElemAt(obj, expr) {
    cov_1vvxg9av0m().f[0]++;
    var arr = (cov_1vvxg9av0m().s[0]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[1]++;
    assert((cov_1vvxg9av0m().b[0][0]++, isArray(arr)) && (cov_1vvxg9av0m().b[0][1]++, arr.length === 2), '$arrayElemAt expression must resolve to array(2)');
    cov_1vvxg9av0m().s[2]++;
    assert(isArray(arr[0]), 'First operand to $arrayElemAt must resolve to an array');
    cov_1vvxg9av0m().s[3]++;
    assert(isNumber(arr[1]), 'Second operand to $arrayElemAt must resolve to an integer');
    var idx = (cov_1vvxg9av0m().s[4]++, arr[1]);
    cov_1vvxg9av0m().s[5]++;
    arr = arr[0];
    cov_1vvxg9av0m().s[6]++;

    if ((cov_1vvxg9av0m().b[2][0]++, idx < 0) && (cov_1vvxg9av0m().b[2][1]++, Math.abs(idx) <= arr.length)) {
      cov_1vvxg9av0m().b[1][0]++;
      cov_1vvxg9av0m().s[7]++;
      return arr[idx + arr.length];
    } else {
      cov_1vvxg9av0m().b[1][1]++;
      cov_1vvxg9av0m().s[8]++;

      if ((cov_1vvxg9av0m().b[4][0]++, idx >= 0) && (cov_1vvxg9av0m().b[4][1]++, idx < arr.length)) {
        cov_1vvxg9av0m().b[3][0]++;
        cov_1vvxg9av0m().s[9]++;
        return arr[idx];
      } else {
        cov_1vvxg9av0m().b[3][1]++;
      }
    }

    cov_1vvxg9av0m().s[10]++;
    return undefined;
  }
  /**
   * Converts an array of key value pairs to a document.
   */

  function $arrayToObject(obj, expr) {
    cov_1vvxg9av0m().f[1]++;
    var arr = (cov_1vvxg9av0m().s[11]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[12]++;
    assert(isArray(arr), '$arrayToObject expression must resolve to an array');
    cov_1vvxg9av0m().s[13]++;
    return reduce(arr, function (newObj, val) {
      cov_1vvxg9av0m().f[2]++;
      cov_1vvxg9av0m().s[14]++;

      if ((cov_1vvxg9av0m().b[6][0]++, isArray(val)) && (cov_1vvxg9av0m().b[6][1]++, val.length == 2)) {
        cov_1vvxg9av0m().b[5][0]++;
        cov_1vvxg9av0m().s[15]++;
        newObj[val[0]] = val[1];
      } else {
        cov_1vvxg9av0m().b[5][1]++;
        cov_1vvxg9av0m().s[16]++;
        assert((cov_1vvxg9av0m().b[7][0]++, isObject(val)) && (cov_1vvxg9av0m().b[7][1]++, has(val, 'k')) && (cov_1vvxg9av0m().b[7][2]++, has(val, 'v')), '$arrayToObject expression is invalid.');
        cov_1vvxg9av0m().s[17]++;
        newObj[val.k] = val.v;
      }

      cov_1vvxg9av0m().s[18]++;
      return newObj;
    }, {});
  }
  /**
   * Concatenates arrays to return the concatenated array.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $concatArrays(obj, expr) {
    cov_1vvxg9av0m().f[3]++;
    var arr = (cov_1vvxg9av0m().s[19]++, computeValue(obj, expr, null));
    cov_1vvxg9av0m().s[20]++;
    assert(isArray(arr), '$concatArrays must resolve to an array');
    cov_1vvxg9av0m().s[21]++;

    if (arr.some(isNil)) {
      cov_1vvxg9av0m().b[8][0]++;
      cov_1vvxg9av0m().s[22]++;
      return null;
    } else {
      cov_1vvxg9av0m().b[8][1]++;
    }

    cov_1vvxg9av0m().s[23]++;
    return arr.reduce(function (acc, item) {
      cov_1vvxg9av0m().f[4]++;
      cov_1vvxg9av0m().s[24]++;
      return into(acc, item);
    }, []);
  }
  /**
   * Selects a subset of the array to return an array with only the elements that match the filter condition.
   *
   * @param  {Object} obj  [description]
   * @param  {*} expr [description]
   * @return {*}      [description]
   */

  function $filter(obj, expr) {
    cov_1vvxg9av0m().f[5]++;
    var input = (cov_1vvxg9av0m().s[25]++, computeValue(obj, expr.input));
    var asVar = (cov_1vvxg9av0m().s[26]++, expr['as']);
    var condExpr = (cov_1vvxg9av0m().s[27]++, expr['cond']);
    cov_1vvxg9av0m().s[28]++;
    assert(isArray(input), "$filter 'input' expression must resolve to an array");
    cov_1vvxg9av0m().s[29]++;
    return input.filter(function (o) {
      cov_1vvxg9av0m().f[6]++;
      // inject variable
      var tempObj = (cov_1vvxg9av0m().s[30]++, {});
      cov_1vvxg9av0m().s[31]++;
      tempObj['$' + asVar] = o;
      cov_1vvxg9av0m().s[32]++;
      return computeValue(tempObj, condExpr) === true;
    });
  }
  /**
   * Returns a boolean indicating whether a specified value is in an array.
   *
   * @param {Object} obj
   * @param {Array} expr
   */

  function $in(obj, expr) {
    cov_1vvxg9av0m().f[7]++;
    var val = (cov_1vvxg9av0m().s[33]++, computeValue(obj, expr[0]));
    var arr = (cov_1vvxg9av0m().s[34]++, computeValue(obj, expr[1]));
    cov_1vvxg9av0m().s[35]++;
    assert(isArray(arr), '$in second argument must be an array');
    cov_1vvxg9av0m().s[36]++;
    return arr.some(isEqual.bind(null, val));
  }
  /**
   * Searches an array for an occurrence of a specified value and returns the array index of the first occurrence.
   * If the substring is not found, returns -1.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $indexOfArray(obj, expr) {
    cov_1vvxg9av0m().f[8]++;
    var args = (cov_1vvxg9av0m().s[37]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[38]++;

    if (isNil(args)) {
      cov_1vvxg9av0m().b[9][0]++;
      cov_1vvxg9av0m().s[39]++;
      return null;
    } else {
      cov_1vvxg9av0m().b[9][1]++;
    }

    var arr = (cov_1vvxg9av0m().s[40]++, args[0]);
    var searchValue = (cov_1vvxg9av0m().s[41]++, args[1]);
    cov_1vvxg9av0m().s[42]++;

    if (isNil(arr)) {
      cov_1vvxg9av0m().b[10][0]++;
      cov_1vvxg9av0m().s[43]++;
      return null;
    } else {
      cov_1vvxg9av0m().b[10][1]++;
    }

    cov_1vvxg9av0m().s[44]++;
    assert(isArray(arr), '$indexOfArray expression must resolve to an array.');
    var start = (cov_1vvxg9av0m().s[45]++, (cov_1vvxg9av0m().b[11][0]++, args[2]) || (cov_1vvxg9av0m().b[11][1]++, 0));
    var end = (cov_1vvxg9av0m().s[46]++, args[3]);
    cov_1vvxg9av0m().s[47]++;

    if (isNil(end)) {
      cov_1vvxg9av0m().b[12][0]++;
      cov_1vvxg9av0m().s[48]++;
      end = arr.length;
    } else {
      cov_1vvxg9av0m().b[12][1]++;
    }

    cov_1vvxg9av0m().s[49]++;

    if (start > end) {
      cov_1vvxg9av0m().b[13][0]++;
      cov_1vvxg9av0m().s[50]++;
      return -1;
    } else {
      cov_1vvxg9av0m().b[13][1]++;
    }

    cov_1vvxg9av0m().s[51]++;
    assert((cov_1vvxg9av0m().b[14][0]++, start >= 0) && (cov_1vvxg9av0m().b[14][1]++, end >= 0), '$indexOfArray expression is invalid');
    cov_1vvxg9av0m().s[52]++;

    if ((cov_1vvxg9av0m().b[16][0]++, start > 0) || (cov_1vvxg9av0m().b[16][1]++, end < arr.length)) {
      cov_1vvxg9av0m().b[15][0]++;
      cov_1vvxg9av0m().s[53]++;
      arr = arr.slice(start, end);
    } else {
      cov_1vvxg9av0m().b[15][1]++;
    }

    cov_1vvxg9av0m().s[54]++;
    return arr.findIndex(isEqual.bind(null, searchValue)) + start;
  }
  /**
   * Determines if the operand is an array. Returns a boolean.
   *
   * @param  {Object}  obj
   * @param  {*}  expr
   * @return {Boolean}
   */

  function $isArray(obj, expr) {
    cov_1vvxg9av0m().f[9]++;
    cov_1vvxg9av0m().s[55]++;
    return isArray(computeValue(obj, expr[0]));
  }
  /**
   * Applies a sub-expression to each element of an array and returns the array of resulting values in order.
   *
   * @param obj
   * @param expr
   * @returns {Array|*}
   */

  function $map(obj, expr) {
    cov_1vvxg9av0m().f[10]++;
    var inputExpr = (cov_1vvxg9av0m().s[56]++, computeValue(obj, expr.input));
    cov_1vvxg9av0m().s[57]++;
    assert(isArray(inputExpr), "$map 'input' expression must resolve to an array");
    var asExpr = (cov_1vvxg9av0m().s[58]++, expr['as']);
    var inExpr = (cov_1vvxg9av0m().s[59]++, expr['in']); // HACK: add the "as" expression as a value on the object to take advantage of "resolve()"
    // which will reduce to that value when invoked. The reference to the as expression will be prefixed with "$$".
    // But since a "$" is stripped of before passing the name to "resolve()" we just need to prepend "$" to the key.

    var tempKey = (cov_1vvxg9av0m().s[60]++, '$' + asExpr);
    cov_1vvxg9av0m().s[61]++;
    return inputExpr.map(function (v) {
      cov_1vvxg9av0m().f[11]++;
      cov_1vvxg9av0m().s[62]++;
      obj[tempKey] = v;
      cov_1vvxg9av0m().s[63]++;
      return computeValue(obj, inExpr);
    });
  }
  /**
   * Converts a document to an array of documents representing key-value pairs.
   */

  function $objectToArray(obj, expr) {
    cov_1vvxg9av0m().f[12]++;
    var val = (cov_1vvxg9av0m().s[64]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[65]++;
    assert(isObject(val), '$objectToArray expression must resolve to an object');
    var arr = (cov_1vvxg9av0m().s[66]++, []);
    cov_1vvxg9av0m().s[67]++;
    each(val, function (v, k) {
      cov_1vvxg9av0m().f[13]++;
      cov_1vvxg9av0m().s[68]++;
      return arr.push({
        k: k,
        v: v
      });
    });
    cov_1vvxg9av0m().s[69]++;
    return arr;
  }
  /**
   * Returns an array whose elements are a generated sequence of numbers.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $range(obj, expr) {
    cov_1vvxg9av0m().f[14]++;
    var arr = (cov_1vvxg9av0m().s[70]++, computeValue(obj, expr));
    var start = (cov_1vvxg9av0m().s[71]++, arr[0]);
    var end = (cov_1vvxg9av0m().s[72]++, arr[1]);
    var step = (cov_1vvxg9av0m().s[73]++, (cov_1vvxg9av0m().b[17][0]++, arr[2]) || (cov_1vvxg9av0m().b[17][1]++, 1));
    var result = (cov_1vvxg9av0m().s[74]++, []);
    cov_1vvxg9av0m().s[75]++;

    while ((cov_1vvxg9av0m().b[18][0]++, start < end) && (cov_1vvxg9av0m().b[18][1]++, step > 0) || (cov_1vvxg9av0m().b[18][2]++, start > end) && (cov_1vvxg9av0m().b[18][3]++, step < 0)) {
      cov_1vvxg9av0m().s[76]++;
      result.push(start);
      cov_1vvxg9av0m().s[77]++;
      start += step;
    }

    cov_1vvxg9av0m().s[78]++;
    return result;
  }
  /**
   * Applies an expression to each element in an array and combines them into a single value.
   *
   * @param {Object} obj
   * @param {*} expr
   */

  function $reduce(obj, expr) {
    cov_1vvxg9av0m().f[15]++;
    var input = (cov_1vvxg9av0m().s[79]++, computeValue(obj, expr.input));
    var initialValue = (cov_1vvxg9av0m().s[80]++, computeValue(obj, expr.initialValue));
    var inExpr = (cov_1vvxg9av0m().s[81]++, expr['in']);
    cov_1vvxg9av0m().s[82]++;

    if (isNil(input)) {
      cov_1vvxg9av0m().b[19][0]++;
      cov_1vvxg9av0m().s[83]++;
      return null;
    } else {
      cov_1vvxg9av0m().b[19][1]++;
    }

    cov_1vvxg9av0m().s[84]++;
    assert(isArray(input), "$reduce 'input' expression must resolve to an array");
    cov_1vvxg9av0m().s[85]++;
    return reduce(input, function (acc, n) {
      cov_1vvxg9av0m().f[16]++;
      cov_1vvxg9av0m().s[86]++;
      return computeValue({
        '$value': acc,
        '$this': n
      }, inExpr);
    }, initialValue);
  }
  /**
   * Returns an array with the elements in reverse order.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $reverseArray(obj, expr) {
    cov_1vvxg9av0m().f[17]++;
    var arr = (cov_1vvxg9av0m().s[87]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[88]++;

    if (isNil(arr)) {
      cov_1vvxg9av0m().b[20][0]++;
      cov_1vvxg9av0m().s[89]++;
      return null;
    } else {
      cov_1vvxg9av0m().b[20][1]++;
    }

    cov_1vvxg9av0m().s[90]++;
    assert(isArray(arr), '$reverseArray expression must resolve to an array');
    var result = (cov_1vvxg9av0m().s[91]++, []);
    cov_1vvxg9av0m().s[92]++;
    into(result, arr);
    cov_1vvxg9av0m().s[93]++;
    result.reverse();
    cov_1vvxg9av0m().s[94]++;
    return result;
  }
  /**
   * Counts and returns the total the number of items in an array.
   *
   * @param obj
   * @param expr
   */

  function $size(obj, expr) {
    cov_1vvxg9av0m().f[18]++;
    var value = (cov_1vvxg9av0m().s[95]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[96]++;
    return isArray(value) ? (cov_1vvxg9av0m().b[21][0]++, value.length) : (cov_1vvxg9av0m().b[21][1]++, undefined);
  }
  /**
   * Returns a subset of an array.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $slice(obj, expr) {
    cov_1vvxg9av0m().f[19]++;
    var arr = (cov_1vvxg9av0m().s[97]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[98]++;
    return slice(arr[0], arr[1], arr[2]);
  }
  /**
   * Merge two lists together.
   *
   * Transposes an array of input arrays so that the first element of the output array would be an array containing,
   * the first element of the first input array, the first element of the second input array, etc.
   *
   * @param  {Obj} obj
   * @param  {*} expr
   * @return {*}
   */

  function $zip(obj, expr) {
    cov_1vvxg9av0m().f[20]++;
    var inputs = (cov_1vvxg9av0m().s[99]++, computeValue(obj, expr.inputs));
    var useLongestLength = (cov_1vvxg9av0m().s[100]++, (cov_1vvxg9av0m().b[22][0]++, expr.useLongestLength) || (cov_1vvxg9av0m().b[22][1]++, false));
    cov_1vvxg9av0m().s[101]++;
    assert(isArray(inputs), "'inputs' expression must resolve to an array");
    cov_1vvxg9av0m().s[102]++;
    assert(isBoolean(useLongestLength), "'useLongestLength' must be a boolean");
    cov_1vvxg9av0m().s[103]++;

    if (isArray(expr.defaults)) {
      cov_1vvxg9av0m().b[23][0]++;
      cov_1vvxg9av0m().s[104]++;
      assert(truthy(useLongestLength), "'useLongestLength' must be set to true to use 'defaults'");
    } else {
      cov_1vvxg9av0m().b[23][1]++;
    }

    var zipCount = (cov_1vvxg9av0m().s[105]++, 0);
    cov_1vvxg9av0m().s[106]++;

    for (var i = (cov_1vvxg9av0m().s[107]++, 0), len = (cov_1vvxg9av0m().s[108]++, inputs.length); i < len; i++) {
      var arr = (cov_1vvxg9av0m().s[109]++, inputs[i]);
      cov_1vvxg9av0m().s[110]++;

      if (isNil(arr)) {
        cov_1vvxg9av0m().b[24][0]++;
        cov_1vvxg9av0m().s[111]++;
        return null;
      } else {
        cov_1vvxg9av0m().b[24][1]++;
      }

      cov_1vvxg9av0m().s[112]++;
      assert(isArray(arr), "'inputs' expression values must resolve to an array or null");
      cov_1vvxg9av0m().s[113]++;
      zipCount = useLongestLength ? (cov_1vvxg9av0m().b[25][0]++, Math.max(zipCount, arr.length)) : (cov_1vvxg9av0m().b[25][1]++, Math.min((cov_1vvxg9av0m().b[26][0]++, zipCount) || (cov_1vvxg9av0m().b[26][1]++, arr.length), arr.length));
    }

    var result = (cov_1vvxg9av0m().s[114]++, []);
    var defaults = (cov_1vvxg9av0m().s[115]++, (cov_1vvxg9av0m().b[27][0]++, expr.defaults) || (cov_1vvxg9av0m().b[27][1]++, []));
    cov_1vvxg9av0m().s[116]++;

    var _loop = function _loop(_i) {
      var temp = (cov_1vvxg9av0m().s[118]++, inputs.map(function (val, index) {
        cov_1vvxg9av0m().f[21]++;
        cov_1vvxg9av0m().s[119]++;
        return isNil(val[_i]) ? (cov_1vvxg9av0m().b[28][0]++, (cov_1vvxg9av0m().b[29][0]++, defaults[index]) || (cov_1vvxg9av0m().b[29][1]++, null)) : (cov_1vvxg9av0m().b[28][1]++, val[_i]);
      }));
      cov_1vvxg9av0m().s[120]++;
      result.push(temp);
    };

    for (var _i = (cov_1vvxg9av0m().s[117]++, 0); _i < zipCount; _i++) {
      _loop(_i);
    }

    cov_1vvxg9av0m().s[121]++;
    return result;
  }
  /**
   * Combines multiple documents into a single document.
   * @param {*} obj
   * @param {*} expr
   */

  function $mergeObjects(obj, expr) {
    cov_1vvxg9av0m().f[22]++;
    var docs = (cov_1vvxg9av0m().s[122]++, computeValue(obj, expr));
    cov_1vvxg9av0m().s[123]++;

    if (isArray(docs)) {
      cov_1vvxg9av0m().b[30][0]++;
      cov_1vvxg9av0m().s[124]++;
      return reduce(docs, function (memo, o) {
        cov_1vvxg9av0m().f[23]++;
        cov_1vvxg9av0m().s[125]++;
        return Object.assign(memo, o);
      }, {});
    } else {
      cov_1vvxg9av0m().b[30][1]++;
    }

    cov_1vvxg9av0m().s[126]++;
    return {};
  }

  function cov_dps550dex() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/boolean.js";
    var hash = "2fe8a27ecc497a97cf81a3747136c19b359c526e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/boolean.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 16
          },
          end: {
            line: 11,
            column: 39
          }
        },
        "1": {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 48
          }
        },
        "2": {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 39
          }
        },
        "3": {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 47
          }
        },
        "4": {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 39
          }
        }
      },
      fnMap: {
        "0": {
          name: "$and",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 20
            }
          },
          loc: {
            start: {
              line: 10,
              column: 32
            },
            end: {
              line: 13,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "$or",
          decl: {
            start: {
              line: 21,
              column: 16
            },
            end: {
              line: 21,
              column: 19
            }
          },
          loc: {
            start: {
              line: 21,
              column: 31
            },
            end: {
              line: 24,
              column: 1
            }
          },
          line: 21
        },
        "2": {
          name: "$not",
          decl: {
            start: {
              line: 32,
              column: 16
            },
            end: {
              line: 32,
              column: 20
            }
          },
          loc: {
            start: {
              line: 32,
              column: 32
            },
            end: {
              line: 34,
              column: 1
            }
          },
          line: 32
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 47
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 24
            }
          }, {
            start: {
              line: 12,
              column: 28
            },
            end: {
              line: 12,
              column: 47
            }
          }],
          line: 12
        },
        "1": {
          loc: {
            start: {
              line: 23,
              column: 11
            },
            end: {
              line: 23,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 23,
              column: 11
            },
            end: {
              line: 23,
              column: 24
            }
          }, {
            start: {
              line: 23,
              column: 28
            },
            end: {
              line: 23,
              column: 46
            }
          }],
          line: 23
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "2fe8a27ecc497a97cf81a3747136c19b359c526e"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_dps550dex = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_dps550dex();
  /**
   * Returns true only when all its expressions evaluate to true. Accepts any number of argument expressions.
   *
   * @param obj
   * @param expr
   * @returns {boolean}
   */

  function $and(obj, expr) {
    cov_dps550dex().f[0]++;
    var value = (cov_dps550dex().s[0]++, computeValue(obj, expr));
    cov_dps550dex().s[1]++;
    return (cov_dps550dex().b[0][0]++, truthy(value)) && (cov_dps550dex().b[0][1]++, value.every(truthy));
  }
  /**
   * Returns true when any of its expressions evaluates to true. Accepts any number of argument expressions.
   *
   * @param obj
   * @param expr
   * @returns {boolean}
   */

  function $or(obj, expr) {
    cov_dps550dex().f[1]++;
    var value = (cov_dps550dex().s[2]++, computeValue(obj, expr));
    cov_dps550dex().s[3]++;
    return (cov_dps550dex().b[1][0]++, truthy(value)) && (cov_dps550dex().b[1][1]++, value.some(truthy));
  }
  /**
   * Returns the boolean value that is the opposite of its argument expression. Accepts a single argument expression.
   *
   * @param obj
   * @param expr
   * @returns {boolean}
   */

  function $not(obj, expr) {
    cov_dps550dex().f[2]++;
    cov_dps550dex().s[4]++;
    return !computeValue(obj, expr[0]);
  }

  function cov_10dmxtpein() {
    var path = "/Users/francis/workspace/mingo/lib/lazy.js";
    var hash = "de9e3a11558fc0db0eab9eccd0eb312710d65349";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/lazy.js",
      statementMap: {
        "0": {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 72
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 70
          }
        },
        "2": {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 33
          }
        },
        "3": {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 20
          }
        },
        "4": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 44
          }
        },
        "5": {
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 21,
            column: 24
          }
        },
        "6": {
          start: {
            line: 24,
            column: 0
          },
          end: {
            line: 29,
            column: 28
          }
        },
        "7": {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 38
          }
        },
        "8": {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 44
          }
        },
        "9": {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 40
          }
        },
        "10": {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 40
          }
        },
        "11": {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 20
          }
        },
        "12": {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 18
          }
        },
        "13": {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 27
          }
        },
        "14": {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 34,
            column: 18
          }
        },
        "15": {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 84,
            column: 6
          }
        },
        "16": {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        "17": {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        "18": {
          start: {
            line: 38,
            column: 19
          },
          end: {
            line: 75,
            column: 13
          }
        },
        "19": {
          start: {
            line: 39,
            column: 24
          },
          end: {
            line: 39,
            column: 32
          }
        },
        "20": {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 24
          }
        },
        "21": {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 41,
            column: 31
          }
        },
        "22": {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 42,
            column: 44
          }
        },
        "23": {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 37
          }
        },
        "24": {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 67,
            column: 17
          }
        },
        "25": {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 45,
            column: 50
          }
        },
        "26": {
          start: {
            line: 45,
            column: 60
          },
          end: {
            line: 45,
            column: 72
          }
        },
        "27": {
          start: {
            line: 45,
            column: 83
          },
          end: {
            line: 45,
            column: 96
          }
        },
        "28": {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 66,
            column: 21
          }
        },
        "29": {
          start: {
            line: 48,
            column: 28
          },
          end: {
            line: 48,
            column: 48
          }
        },
        "30": {
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 49,
            column: 34
          }
        },
        "31": {
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 52,
            column: 47
          }
        },
        "32": {
          start: {
            line: 52,
            column: 32
          },
          end: {
            line: 52,
            column: 47
          }
        },
        "33": {
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 53,
            column: 34
          }
        },
        "34": {
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 43
          }
        },
        "35": {
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 57,
            column: 49
          }
        },
        "36": {
          start: {
            line: 57,
            column: 32
          },
          end: {
            line: 57,
            column: 49
          }
        },
        "37": {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 58,
            column: 34
          }
        },
        "38": {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 60,
            column: 43
          }
        },
        "39": {
          start: {
            line: 61,
            column: 28
          },
          end: {
            line: 62,
            column: 60
          }
        },
        "40": {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 60
          }
        },
        "41": {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 63,
            column: 43
          }
        },
        "42": {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 65,
            column: 40
          }
        },
        "43": {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 68,
            column: 33
          }
        },
        "44": {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        },
        "45": {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 70,
            column: 41
          }
        },
        "46": {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 73,
            column: 53
          }
        },
        "47": {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 79,
            column: 24
          }
        },
        "48": {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 24
          }
        },
        "49": {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 81,
            column: 22
          }
        },
        "50": {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 82,
            column: 20
          }
        },
        "51": {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 83,
            column: 30
          }
        },
        "52": {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 30
          }
        },
        "53": {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 29
          }
        },
        "54": {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 28
          }
        },
        "55": {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 24
          }
        },
        "56": {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        "57": {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 38
          }
        },
        "58": {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        "59": {
          start: {
            line: 105,
            column: 24
          },
          end: {
            line: 105,
            column: 30
          }
        },
        "60": {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 111,
            column: 14
          }
        },
        "61": {
          start: {
            line: 107,
            column: 24
          },
          end: {
            line: 107,
            column: 34
          }
        },
        "62": {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 109,
            column: 31
          }
        },
        "63": {
          start: {
            line: 109,
            column: 20
          },
          end: {
            line: 109,
            column: 31
          }
        },
        "64": {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 110,
            column: 31
          }
        },
        "65": {
          start: {
            line: 113,
            column: 13
          },
          end: {
            line: 125,
            column: 9
          }
        },
        "66": {
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 31
          }
        },
        "67": {
          start: {
            line: 115,
            column: 25
          },
          end: {
            line: 115,
            column: 36
          }
        },
        "68": {
          start: {
            line: 116,
            column: 24
          },
          end: {
            line: 116,
            column: 25
          }
        },
        "69": {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 121,
            column: 14
          }
        },
        "70": {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 119,
            column: 41
          }
        },
        "71": {
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 119,
            column: 41
          }
        },
        "72": {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 120,
            column: 27
          }
        },
        "73": {
          start: {
            line: 123,
            column: 13
          },
          end: {
            line: 125,
            column: 9
          }
        },
        "74": {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 93
          }
        },
        "75": {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 127,
            column: 70
          }
        },
        "76": {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 131,
            column: 77
          }
        },
        "77": {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 131,
            column: 77
          }
        },
        "78": {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 138,
            column: 25
          }
        },
        "79": {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 139,
            column: 49
          }
        },
        "80": {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 140,
            column: 20
          }
        },
        "81": {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 29
          }
        },
        "82": {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 151,
            column: 41
          }
        },
        "83": {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 158,
            column: 52
          }
        },
        "84": {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 57
          }
        },
        "85": {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 57
          }
        },
        "86": {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 25
          }
        },
        "87": {
          start: {
            line: 183,
            column: 19
          },
          end: {
            line: 183,
            column: 23
          }
        },
        "88": {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 190,
            column: 11
          }
        },
        "89": {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        "90": {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 46
          }
        },
        "91": {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 189,
            column: 31
          }
        },
        "92": {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 197,
            column: 21
          }
        },
        "93": {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 198,
            column: 28
          }
        },
        "94": {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 20
          }
        },
        "95": {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        "96": {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 209,
            column: 49
          }
        },
        "97": {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 211,
            column: 57
          }
        },
        "98": {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        "99": {
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 220,
            column: 31
          }
        },
        "100": {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 222,
            column: 22
          }
        },
        "101": {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 222,
            column: 22
          }
        },
        "102": {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 224,
            column: 29
          }
        },
        "103": {
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 224,
            column: 29
          }
        },
        "104": {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 226,
            column: 20
          }
        },
        "105": {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 235,
            column: 27
          }
        },
        "106": {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        },
        "107": {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        "108": {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 238,
            column: 35
          }
        },
        "109": {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 239,
            column: 28
          }
        },
        "110": {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 16
          }
        },
        "111": {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        "112": {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 243,
            column: 57
          }
        },
        "113": {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 28
          }
        },
        "114": {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 246,
            column: 28
          }
        },
        "115": {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 49
          }
        },
        "116": {
          start: {
            line: 252,
            column: 39
          },
          end: {
            line: 252,
            column: 44
          }
        },
        "117": {
          start: {
            line: 255,
            column: 0
          },
          end: {
            line: 259,
            column: 1
          }
        },
        "118": {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 258,
            column: 6
          }
        },
        "119": {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 257,
            column: 20
          }
        }
      },
      fnMap: {
        "0": {
          name: "Lazy",
          decl: {
            start: {
              line: 5,
              column: 16
            },
            end: {
              line: 5,
              column: 20
            }
          },
          loc: {
            start: {
              line: 5,
              column: 29
            },
            end: {
              line: 7,
              column: 1
            }
          },
          line: 5
        },
        "1": {
          name: "isGenerator",
          decl: {
            start: {
              line: 12,
              column: 9
            },
            end: {
              line: 12,
              column: 20
            }
          },
          loc: {
            start: {
              line: 12,
              column: 24
            },
            end: {
              line: 14,
              column: 1
            }
          },
          line: 12
        },
        "2": {
          name: "dropItem",
          decl: {
            start: {
              line: 15,
              column: 9
            },
            end: {
              line: 15,
              column: 17
            }
          },
          loc: {
            start: {
              line: 15,
              column: 28
            },
            end: {
              line: 19,
              column: 1
            }
          },
          line: 15
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 24,
              column: 1
            },
            end: {
              line: 24,
              column: 2
            }
          },
          loc: {
            start: {
              line: 24,
              column: 19
            },
            end: {
              line: 29,
              column: 1
            }
          },
          line: 24
        },
        "4": {
          name: "baseIterator",
          decl: {
            start: {
              line: 30,
              column: 9
            },
            end: {
              line: 30,
              column: 21
            }
          },
          loc: {
            start: {
              line: 30,
              column: 49
            },
            end: {
              line: 85,
              column: 1
            }
          },
          line: 30
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 35,
              column: 11
            },
            end: {
              line: 35,
              column: 12
            }
          },
          loc: {
            start: {
              line: 35,
              column: 34
            },
            end: {
              line: 84,
              column: 5
            }
          },
          line: 35
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 94,
              column: 5
            }
          },
          loc: {
            start: {
              line: 94,
              column: 24
            },
            end: {
              line: 128,
              column: 5
            }
          },
          line: 94
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 106,
              column: 18
            },
            end: {
              line: 106,
              column: 19
            }
          },
          loc: {
            start: {
              line: 106,
              column: 24
            },
            end: {
              line: 111,
              column: 13
            }
          },
          line: 106
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 117,
              column: 18
            },
            end: {
              line: 117,
              column: 19
            }
          },
          loc: {
            start: {
              line: 117,
              column: 24
            },
            end: {
              line: 121,
              column: 13
            }
          },
          line: 117
        },
        "9": {
          name: "(anonymous_9)",
          decl: {
            start: {
              line: 129,
              column: 4
            },
            end: {
              line: 129,
              column: 5
            }
          },
          loc: {
            start: {
              line: 129,
              column: 16
            },
            end: {
              line: 132,
              column: 5
            }
          },
          line: 129
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 137,
              column: 4
            },
            end: {
              line: 137,
              column: 5
            }
          },
          loc: {
            start: {
              line: 137,
              column: 25
            },
            end: {
              line: 141,
              column: 5
            }
          },
          line: 137
        },
        "11": {
          name: "(anonymous_11)",
          decl: {
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 142,
              column: 5
            }
          },
          loc: {
            start: {
              line: 142,
              column: 11
            },
            end: {
              line: 144,
              column: 5
            }
          },
          line: 142
        },
        "12": {
          name: "(anonymous_12)",
          decl: {
            start: {
              line: 150,
              column: 4
            },
            end: {
              line: 150,
              column: 5
            }
          },
          loc: {
            start: {
              line: 150,
              column: 11
            },
            end: {
              line: 152,
              column: 5
            }
          },
          line: 150
        },
        "13": {
          name: "(anonymous_13)",
          decl: {
            start: {
              line: 157,
              column: 4
            },
            end: {
              line: 157,
              column: 5
            }
          },
          loc: {
            start: {
              line: 157,
              column: 22
            },
            end: {
              line: 159,
              column: 5
            }
          },
          line: 157
        },
        "14": {
          name: "(anonymous_14)",
          decl: {
            start: {
              line: 164,
              column: 4
            },
            end: {
              line: 164,
              column: 5
            }
          },
          loc: {
            start: {
              line: 164,
              column: 12
            },
            end: {
              line: 166,
              column: 5
            }
          },
          line: 164
        },
        "15": {
          name: "(anonymous_15)",
          decl: {
            start: {
              line: 171,
              column: 4
            },
            end: {
              line: 171,
              column: 5
            }
          },
          loc: {
            start: {
              line: 171,
              column: 12
            },
            end: {
              line: 173,
              column: 5
            }
          },
          line: 171
        },
        "16": {
          name: "(anonymous_16)",
          decl: {
            start: {
              line: 181,
              column: 4
            },
            end: {
              line: 181,
              column: 5
            }
          },
          loc: {
            start: {
              line: 181,
              column: 18
            },
            end: {
              line: 191,
              column: 5
            }
          },
          line: 181
        },
        "17": {
          name: "(anonymous_17)",
          decl: {
            start: {
              line: 185,
              column: 20
            },
            end: {
              line: 185,
              column: 21
            }
          },
          loc: {
            start: {
              line: 185,
              column: 26
            },
            end: {
              line: 190,
              column: 9
            }
          },
          line: 185
        },
        "18": {
          name: "(anonymous_18)",
          decl: {
            start: {
              line: 196,
              column: 4
            },
            end: {
              line: 196,
              column: 5
            }
          },
          loc: {
            start: {
              line: 196,
              column: 12
            },
            end: {
              line: 200,
              column: 5
            }
          },
          line: 196
        },
        "19": {
          name: "(anonymous_19)",
          decl: {
            start: {
              line: 207,
              column: 4
            },
            end: {
              line: 207,
              column: 5
            }
          },
          loc: {
            start: {
              line: 207,
              column: 12
            },
            end: {
              line: 212,
              column: 5
            }
          },
          line: 207
        },
        "20": {
          name: "(anonymous_20)",
          decl: {
            start: {
              line: 218,
              column: 4
            },
            end: {
              line: 218,
              column: 5
            }
          },
          loc: {
            start: {
              line: 218,
              column: 12
            },
            end: {
              line: 227,
              column: 5
            }
          },
          line: 218
        },
        "21": {
          name: "(anonymous_21)",
          decl: {
            start: {
              line: 234,
              column: 4
            },
            end: {
              line: 234,
              column: 5
            }
          },
          loc: {
            start: {
              line: 234,
              column: 28
            },
            end: {
              line: 247,
              column: 5
            }
          },
          line: 234
        },
        "22": {
          name: "(anonymous_22)",
          decl: {
            start: {
              line: 251,
              column: 4
            },
            end: {
              line: 251,
              column: 5
            }
          },
          loc: {
            start: {
              line: 251,
              column: 11
            },
            end: {
              line: 253,
              column: 5
            }
          },
          line: 251
        },
        "23": {
          name: "(anonymous_23)",
          decl: {
            start: {
              line: 252,
              column: 27
            },
            end: {
              line: 252,
              column: 28
            }
          },
          loc: {
            start: {
              line: 252,
              column: 39
            },
            end: {
              line: 252,
              column: 44
            }
          },
          line: 252
        },
        "24": {
          name: "(anonymous_24)",
          decl: {
            start: {
              line: 256,
              column: 42
            },
            end: {
              line: 256,
              column: 43
            }
          },
          loc: {
            start: {
              line: 256,
              column: 54
            },
            end: {
              line: 258,
              column: 5
            }
          },
          line: 256
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 6,
              column: 11
            },
            end: {
              line: 6,
              column: 71
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 6,
              column: 42
            },
            end: {
              line: 6,
              column: 48
            }
          }, {
            start: {
              line: 6,
              column: 51
            },
            end: {
              line: 6,
              column: 71
            }
          }],
          line: 6
        },
        "1": {
          loc: {
            start: {
              line: 13,
              column: 11
            },
            end: {
              line: 13,
              column: 69
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 13,
              column: 11
            },
            end: {
              line: 13,
              column: 14
            }
          }, {
            start: {
              line: 13,
              column: 18
            },
            end: {
              line: 13,
              column: 39
            }
          }, {
            start: {
              line: 13,
              column: 43
            },
            end: {
              line: 13,
              column: 69
            }
          }],
          line: 13
        },
        "2": {
          loc: {
            start: {
              line: 29,
              column: 3
            },
            end: {
              line: 29,
              column: 26
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 29,
              column: 3
            },
            end: {
              line: 29,
              column: 9
            }
          }, {
            start: {
              line: 29,
              column: 14
            },
            end: {
              line: 29,
              column: 25
            }
          }],
          line: 29
        },
        "3": {
          loc: {
            start: {
              line: 46,
              column: 20
            },
            end: {
              line: 66,
              column: 21
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 47,
              column: 24
            },
            end: {
              line: 49,
              column: 34
            }
          }, {
            start: {
              line: 50,
              column: 24
            },
            end: {
              line: 53,
              column: 34
            }
          }, {
            start: {
              line: 54,
              column: 24
            },
            end: {
              line: 58,
              column: 34
            }
          }, {
            start: {
              line: 59,
              column: 24
            },
            end: {
              line: 63,
              column: 43
            }
          }, {
            start: {
              line: 64,
              column: 24
            },
            end: {
              line: 65,
              column: 40
            }
          }],
          line: 46
        },
        "4": {
          loc: {
            start: {
              line: 51,
              column: 28
            },
            end: {
              line: 52,
              column: 47
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 51,
              column: 28
            },
            end: {
              line: 52,
              column: 47
            }
          }, {
            start: {
              line: 51,
              column: 28
            },
            end: {
              line: 52,
              column: 47
            }
          }],
          line: 51
        },
        "5": {
          loc: {
            start: {
              line: 56,
              column: 28
            },
            end: {
              line: 57,
              column: 49
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 56,
              column: 28
            },
            end: {
              line: 57,
              column: 49
            }
          }, {
            start: {
              line: 56,
              column: 28
            },
            end: {
              line: 57,
              column: 49
            }
          }],
          line: 56
        },
        "6": {
          loc: {
            start: {
              line: 61,
              column: 28
            },
            end: {
              line: 62,
              column: 60
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 61,
              column: 28
            },
            end: {
              line: 62,
              column: 60
            }
          }, {
            start: {
              line: 61,
              column: 28
            },
            end: {
              line: 62,
              column: 60
            }
          }],
          line: 61
        },
        "7": {
          loc: {
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 74,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 74,
              column: 17
            }
          }, {
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 74,
              column: 17
            }
          }],
          line: 69
        },
        "8": {
          loc: {
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 24
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 24
            }
          }, {
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 24
            }
          }],
          line: 78
        },
        "9": {
          loc: {
            start: {
              line: 100,
              column: 8
            },
            end: {
              line: 103,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 100,
              column: 8
            },
            end: {
              line: 103,
              column: 9
            }
          }, {
            start: {
              line: 100,
              column: 8
            },
            end: {
              line: 103,
              column: 9
            }
          }],
          line: 100
        },
        "10": {
          loc: {
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 125,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 125,
              column: 9
            }
          }, {
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 125,
              column: 9
            }
          }],
          line: 104
        },
        "11": {
          loc: {
            start: {
              line: 108,
              column: 16
            },
            end: {
              line: 109,
              column: 31
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 108,
              column: 16
            },
            end: {
              line: 109,
              column: 31
            }
          }, {
            start: {
              line: 108,
              column: 16
            },
            end: {
              line: 109,
              column: 31
            }
          }],
          line: 108
        },
        "12": {
          loc: {
            start: {
              line: 113,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 113,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          }, {
            start: {
              line: 113,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          }],
          line: 113
        },
        "13": {
          loc: {
            start: {
              line: 118,
              column: 16
            },
            end: {
              line: 119,
              column: 41
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 118,
              column: 16
            },
            end: {
              line: 119,
              column: 41
            }
          }, {
            start: {
              line: 118,
              column: 16
            },
            end: {
              line: 119,
              column: 41
            }
          }],
          line: 118
        },
        "14": {
          loc: {
            start: {
              line: 123,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 123,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          }, {
            start: {
              line: 123,
              column: 13
            },
            end: {
              line: 125,
              column: 9
            }
          }],
          line: 123
        },
        "15": {
          loc: {
            start: {
              line: 130,
              column: 8
            },
            end: {
              line: 131,
              column: 77
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 130,
              column: 8
            },
            end: {
              line: 131,
              column: 77
            }
          }, {
            start: {
              line: 130,
              column: 8
            },
            end: {
              line: 131,
              column: 77
            }
          }],
          line: 130
        },
        "16": {
          loc: {
            start: {
              line: 165,
              column: 15
            },
            end: {
              line: 165,
              column: 56
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 165,
              column: 23
            },
            end: {
              line: 165,
              column: 49
            }
          }, {
            start: {
              line: 165,
              column: 52
            },
            end: {
              line: 165,
              column: 56
            }
          }],
          line: 165
        },
        "17": {
          loc: {
            start: {
              line: 172,
              column: 15
            },
            end: {
              line: 172,
              column: 56
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 172,
              column: 23
            },
            end: {
              line: 172,
              column: 49
            }
          }, {
            start: {
              line: 172,
              column: 52
            },
            end: {
              line: 172,
              column: 56
            }
          }],
          line: 172
        },
        "18": {
          loc: {
            start: {
              line: 186,
              column: 12
            },
            end: {
              line: 188,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 186,
              column: 12
            },
            end: {
              line: 188,
              column: 13
            }
          }, {
            start: {
              line: 186,
              column: 12
            },
            end: {
              line: 188,
              column: 13
            }
          }],
          line: 186
        },
        "19": {
          loc: {
            start: {
              line: 208,
              column: 8
            },
            end: {
              line: 210,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 208,
              column: 8
            },
            end: {
              line: 210,
              column: 9
            }
          }, {
            start: {
              line: 208,
              column: 8
            },
            end: {
              line: 210,
              column: 9
            }
          }],
          line: 208
        },
        "20": {
          loc: {
            start: {
              line: 211,
              column: 15
            },
            end: {
              line: 211,
              column: 56
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 211,
              column: 30
            },
            end: {
              line: 211,
              column: 43
            }
          }, {
            start: {
              line: 211,
              column: 46
            },
            end: {
              line: 211,
              column: 56
            }
          }],
          line: 211
        },
        "21": {
          loc: {
            start: {
              line: 221,
              column: 12
            },
            end: {
              line: 222,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 221,
              column: 12
            },
            end: {
              line: 222,
              column: 22
            }
          }, {
            start: {
              line: 221,
              column: 12
            },
            end: {
              line: 222,
              column: 22
            }
          }],
          line: 221
        },
        "22": {
          loc: {
            start: {
              line: 223,
              column: 12
            },
            end: {
              line: 224,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 223,
              column: 12
            },
            end: {
              line: 224,
              column: 29
            }
          }, {
            start: {
              line: 223,
              column: 12
            },
            end: {
              line: 224,
              column: 29
            }
          }],
          line: 223
        },
        "23": {
          loc: {
            start: {
              line: 237,
              column: 8
            },
            end: {
              line: 241,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 237,
              column: 8
            },
            end: {
              line: 241,
              column: 9
            }
          }, {
            start: {
              line: 237,
              column: 8
            },
            end: {
              line: 241,
              column: 9
            }
          }],
          line: 237
        },
        "24": {
          loc: {
            start: {
              line: 237,
              column: 12
            },
            end: {
              line: 237,
              column: 49
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 237,
              column: 12
            },
            end: {
              line: 237,
              column: 38
            }
          }, {
            start: {
              line: 237,
              column: 42
            },
            end: {
              line: 237,
              column: 49
            }
          }],
          line: 237
        },
        "25": {
          loc: {
            start: {
              line: 255,
              column: 0
            },
            end: {
              line: 259,
              column: 1
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 255,
              column: 0
            },
            end: {
              line: 259,
              column: 1
            }
          }, {
            start: {
              line: 255,
              column: 0
            },
            end: {
              line: 259,
              column: 1
            }
          }],
          line: 255
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0,
        "85": 0,
        "86": 0,
        "87": 0,
        "88": 0,
        "89": 0,
        "90": 0,
        "91": 0,
        "92": 0,
        "93": 0,
        "94": 0,
        "95": 0,
        "96": 0,
        "97": 0,
        "98": 0,
        "99": 0,
        "100": 0,
        "101": 0,
        "102": 0,
        "103": 0,
        "104": 0,
        "105": 0,
        "106": 0,
        "107": 0,
        "108": 0,
        "109": 0,
        "110": 0,
        "111": 0,
        "112": 0,
        "113": 0,
        "114": 0,
        "115": 0,
        "116": 0,
        "117": 0,
        "118": 0,
        "119": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0, 0],
        "2": [0, 0],
        "3": [0, 0, 0, 0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0],
        "24": [0, 0],
        "25": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "de9e3a11558fc0db0eab9eccd0eb312710d65349"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_10dmxtpein = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_10dmxtpein();

  /**
   * Returns an iterator
   * @param {*} source An iterable source (Array, Function, Generator, or Iterator)
   */
  function Lazy(source) {
    cov_10dmxtpein().f[0]++;
    cov_10dmxtpein().s[0]++;
    return source instanceof Iterator ? (cov_10dmxtpein().b[0][0]++, source) : (cov_10dmxtpein().b[0][1]++, new Iterator(source));
  }
  /**
   * Checks whether the given object is compatible with a generator i.e Object{next:Function}
   * @param {*} o An object
   */

  function isGenerator(o) {
    cov_10dmxtpein().f[1]++;
    cov_10dmxtpein().s[1]++;
    return (cov_10dmxtpein().b[1][0]++, !!o) && (cov_10dmxtpein().b[1][1]++, _typeof(o) === 'object') && (cov_10dmxtpein().b[1][2]++, o.next instanceof Function);
  }

  function dropItem(array, i) {
    cov_10dmxtpein().f[2]++;
    var rest = (cov_10dmxtpein().s[2]++, array.slice(i + 1));
    cov_10dmxtpein().s[3]++;
    array.splice(i);
    cov_10dmxtpein().s[4]++;
    Array.prototype.push.apply(array, rest);
  } // stop iteration error


  var DONE = (cov_10dmxtpein().s[5]++, new Error()); // Lazy function actions

  var Action;
  cov_10dmxtpein().s[6]++;

  (function (Action) {
    cov_10dmxtpein().f[3]++;
    cov_10dmxtpein().s[7]++;
    Action[Action["MAP"] = 0] = "MAP";
    cov_10dmxtpein().s[8]++;
    Action[Action["FILTER"] = 1] = "FILTER";
    cov_10dmxtpein().s[9]++;
    Action[Action["TAKE"] = 2] = "TAKE";
    cov_10dmxtpein().s[10]++;
    Action[Action["DROP"] = 3] = "DROP";
  })((cov_10dmxtpein().b[2][0]++, Action) || (cov_10dmxtpein().b[2][1]++, Action = {}));

  function baseIterator(nextFn, iteratees, buffer) {
    cov_10dmxtpein().f[4]++;
    var done = (cov_10dmxtpein().s[11]++, false);
    var index = (cov_10dmxtpein().s[12]++, -1);
    var hashes = (cov_10dmxtpein().s[13]++, new Object()); // used for LAZY_UNIQ

    var bIndex = (cov_10dmxtpein().s[14]++, 0); // index for the buffer

    cov_10dmxtpein().s[15]++;
    return function (storeResult) {
      cov_10dmxtpein().f[5]++;
      cov_10dmxtpein().s[16]++;

      // special hack to collect all values into buffer
      try {
        cov_10dmxtpein().s[17]++;
        cov_10dmxtpein().s[18]++;

        outer: while (!done) {
          var o = (cov_10dmxtpein().s[19]++, nextFn());
          cov_10dmxtpein().s[20]++;
          index++;
          var mIndex = (cov_10dmxtpein().s[21]++, -1);
          var mSize = (cov_10dmxtpein().s[22]++, iteratees.length);
          var innerDone = (cov_10dmxtpein().s[23]++, false);
          cov_10dmxtpein().s[24]++;

          while (++mIndex < mSize) {
            var member = (cov_10dmxtpein().s[25]++, iteratees[mIndex]),
                value = (cov_10dmxtpein().s[26]++, member.value),
                action = (cov_10dmxtpein().s[27]++, member.action);
            cov_10dmxtpein().s[28]++;

            switch (action) {
              case Action.MAP:
                cov_10dmxtpein().b[3][0]++;
                cov_10dmxtpein().s[29]++;
                o = value(o, index);
                cov_10dmxtpein().s[30]++;
                break;

              case Action.FILTER:
                cov_10dmxtpein().b[3][1]++;
                cov_10dmxtpein().s[31]++;

                if (!value(o, index)) {
                  cov_10dmxtpein().b[4][0]++;
                  cov_10dmxtpein().s[32]++;
                  continue outer;
                } else {
                  cov_10dmxtpein().b[4][1]++;
                }

                cov_10dmxtpein().s[33]++;
                break;

              case Action.TAKE:
                cov_10dmxtpein().b[3][2]++;
                cov_10dmxtpein().s[34]++;
                --member.value;
                cov_10dmxtpein().s[35]++;

                if (!member.value) {
                  cov_10dmxtpein().b[5][0]++;
                  cov_10dmxtpein().s[36]++;
                  innerDone = true;
                } else {
                  cov_10dmxtpein().b[5][1]++;
                }

                cov_10dmxtpein().s[37]++;
                break;

              case Action.DROP:
                cov_10dmxtpein().b[3][3]++;
                cov_10dmxtpein().s[38]++;
                --member.value;
                cov_10dmxtpein().s[39]++;

                if (!member.value) {
                  cov_10dmxtpein().b[6][0]++;
                  cov_10dmxtpein().s[40]++;
                  dropItem(iteratees, mIndex);
                } else {
                  cov_10dmxtpein().b[6][1]++;
                }

                cov_10dmxtpein().s[41]++;
                continue outer;

              default:
                cov_10dmxtpein().b[3][4]++;
                cov_10dmxtpein().s[42]++;
                break outer;
            }
          }

          cov_10dmxtpein().s[43]++;
          done = innerDone;
          cov_10dmxtpein().s[44]++;

          if (storeResult) {
            cov_10dmxtpein().b[7][0]++;
            cov_10dmxtpein().s[45]++;
            buffer[bIndex++] = o;
          } else {
            cov_10dmxtpein().b[7][1]++;
            cov_10dmxtpein().s[46]++;
            return {
              value: o,
              done: false
            };
          }
        }
      } catch (e) {
        cov_10dmxtpein().s[47]++;

        if (e !== DONE) {
          cov_10dmxtpein().b[8][0]++;
          cov_10dmxtpein().s[48]++;
          throw e;
        } else {
          cov_10dmxtpein().b[8][1]++;
        }
      }

      cov_10dmxtpein().s[49]++;
      hashes = null; // clear the hash cache

      cov_10dmxtpein().s[50]++;
      done = true;
      cov_10dmxtpein().s[51]++;
      return {
        done: true
      };
    };
  }

  var Iterator = /*#__PURE__*/function () {
    /**
     * @param {*} source An iterable object or function.
     *    Array - return one element per cycle
     *    Object{next:Function} - call next() for the next value (this also handles generator functions)
     *    Function - call to return the next value
     * @param {Function} fn An optional transformation function
     */
    function Iterator(source) {
      _classCallCheck(this, Iterator);

      cov_10dmxtpein().f[6]++;
      cov_10dmxtpein().s[52]++;
      this.__iteratees = []; // lazy function chain

      cov_10dmxtpein().s[53]++;
      this.__first = false; // flag whether to return a single value

      cov_10dmxtpein().s[54]++;
      this.__done = false;
      cov_10dmxtpein().s[55]++;
      this.__buf = [];
      var gen;
      cov_10dmxtpein().s[56]++;

      if (source instanceof Function) {
        cov_10dmxtpein().b[9][0]++;
        cov_10dmxtpein().s[57]++;
        // make iterable
        source = {
          next: source
        };
      } else {
        cov_10dmxtpein().b[9][1]++;
      }

      cov_10dmxtpein().s[58]++;

      if (isGenerator(source)) {
        cov_10dmxtpein().b[10][0]++;
        var src = (cov_10dmxtpein().s[59]++, source);
        cov_10dmxtpein().s[60]++;

        gen = function gen() {
          cov_10dmxtpein().f[7]++;
          var o = (cov_10dmxtpein().s[61]++, src.next());
          cov_10dmxtpein().s[62]++;

          if (o.done) {
            cov_10dmxtpein().b[11][0]++;
            cov_10dmxtpein().s[63]++;
            throw DONE;
          } else {
            cov_10dmxtpein().b[11][1]++;
          }

          cov_10dmxtpein().s[64]++;
          return o.value;
        };
      } else {
        cov_10dmxtpein().b[10][1]++;
        cov_10dmxtpein().s[65]++;

        if (Array.isArray(source)) {
          cov_10dmxtpein().b[12][0]++;
          var data = (cov_10dmxtpein().s[66]++, source);
          var size = (cov_10dmxtpein().s[67]++, data.length);
          var index = (cov_10dmxtpein().s[68]++, 0);
          cov_10dmxtpein().s[69]++;

          gen = function gen() {
            cov_10dmxtpein().f[8]++;
            cov_10dmxtpein().s[70]++;

            if (index < size) {
              cov_10dmxtpein().b[13][0]++;
              cov_10dmxtpein().s[71]++;
              return data[index++];
            } else {
              cov_10dmxtpein().b[13][1]++;
            }

            cov_10dmxtpein().s[72]++;
            throw DONE;
          };
        } else {
          cov_10dmxtpein().b[12][1]++;
          cov_10dmxtpein().s[73]++;

          if (!(source instanceof Function)) {
            cov_10dmxtpein().b[14][0]++;
            cov_10dmxtpein().s[74]++;
            throw new Error("Source is not iterable. Must be Array, Function, or Generator");
          } else {
            cov_10dmxtpein().b[14][1]++;
          }
        }
      } // create next function


      cov_10dmxtpein().s[75]++;
      this.__next = baseIterator(gen, this.__iteratees, this.__buf);
    }

    _createClass(Iterator, [{
      key: "_validate",
      value: function _validate() {
        cov_10dmxtpein().f[9]++;
        cov_10dmxtpein().s[76]++;

        if (this.__first) {
          cov_10dmxtpein().b[15][0]++;
          cov_10dmxtpein().s[77]++;
          throw new Error("Cannot add iteratee/transform after `first()`");
        } else {
          cov_10dmxtpein().b[15][1]++;
        }
      }
      /**
       * Add an iteratee to this lazy sequence
       * @param {Object} iteratee
       */

    }, {
      key: "_push",
      value: function _push(action, value) {
        cov_10dmxtpein().f[10]++;
        cov_10dmxtpein().s[78]++;

        this._validate();

        cov_10dmxtpein().s[79]++;

        this.__iteratees.push({
          action: action,
          value: value
        });

        cov_10dmxtpein().s[80]++;
        return this;
      }
    }, {
      key: "next",
      value: function next() {
        cov_10dmxtpein().f[11]++;
        cov_10dmxtpein().s[81]++;
        return this.__next();
      } // Iteratees methods

      /**
       * Transform each item in the sequence to a new value
       * @param {Function} f
       */

    }, {
      key: "map",
      value: function map(f) {
        cov_10dmxtpein().f[12]++;
        cov_10dmxtpein().s[82]++;
        return this._push(Action.MAP, f);
      }
      /**
       * Select only items matching the given predicate
       * @param {Function} pred
       */

    }, {
      key: "filter",
      value: function filter(predicate) {
        cov_10dmxtpein().f[13]++;
        cov_10dmxtpein().s[83]++;
        return this._push(Action.FILTER, predicate);
      }
      /**
       * Take given numbe for values from sequence
       * @param {Number} n A number greater than 0
       */

    }, {
      key: "take",
      value: function take(n) {
        cov_10dmxtpein().f[14]++;
        cov_10dmxtpein().s[84]++;
        return n > 0 ? (cov_10dmxtpein().b[16][0]++, this._push(Action.TAKE, n)) : (cov_10dmxtpein().b[16][1]++, this);
      }
      /**
       * Drop a number of values from the sequence
       * @param {Number} n Number of items to drop greater than 0
       */

    }, {
      key: "drop",
      value: function drop(n) {
        cov_10dmxtpein().f[15]++;
        cov_10dmxtpein().s[85]++;
        return n > 0 ? (cov_10dmxtpein().b[17][0]++, this._push(Action.DROP, n)) : (cov_10dmxtpein().b[17][1]++, this);
      } // Transformations

      /**
       * Returns a new lazy object with results of the transformation
       * The entire sequence is realized.
       *
       * @param {Function} fn Tranform function of type (Array) => (Any)
       */

    }, {
      key: "transform",
      value: function transform(fn) {
        cov_10dmxtpein().f[16]++;
        cov_10dmxtpein().s[86]++;

        this._validate();

        var self = (cov_10dmxtpein().s[87]++, this);
        var iter;
        cov_10dmxtpein().s[88]++;
        return Lazy(function () {
          cov_10dmxtpein().f[17]++;
          cov_10dmxtpein().s[89]++;

          if (!iter) {
            cov_10dmxtpein().b[18][0]++;
            cov_10dmxtpein().s[90]++;
            iter = Lazy(fn(self.value()));
          } else {
            cov_10dmxtpein().b[18][1]++;
          }

          cov_10dmxtpein().s[91]++;
          return iter.next();
        });
      }
      /**
       * Mark this lazy object to return only the first result on `lazy.value()`.
       * No more iteratees or transformations can be added after this method is called.
       */

    }, {
      key: "first",
      value: function first() {
        cov_10dmxtpein().f[18]++;
        cov_10dmxtpein().s[92]++;
        this.take(1);
        cov_10dmxtpein().s[93]++;
        this.__first = true;
        cov_10dmxtpein().s[94]++;
        return this;
      } // Terminal methods

      /**
       * Returns the fully realized values of the iterators.
       * The return value will be an array unless `lazy.first()` was used.
       * The realized values are cached for subsequent calls
       */

    }, {
      key: "value",
      value: function value() {
        cov_10dmxtpein().f[19]++;
        cov_10dmxtpein().s[95]++;

        if (!this.__done) {
          cov_10dmxtpein().b[19][0]++;
          cov_10dmxtpein().s[96]++;
          this.__done = this.__next(true).done;
        } else {
          cov_10dmxtpein().b[19][1]++;
        }

        cov_10dmxtpein().s[97]++;
        return this.__first ? (cov_10dmxtpein().b[20][0]++, this.__buf[0]) : (cov_10dmxtpein().b[20][1]++, this.__buf);
      }
      /**
       * Execute the funcion for each value. Will stop when an execution returns false.
       * @param {Function} f
       * @returns {Boolean} false iff `f` return false for any execution, otherwise true
       */

    }, {
      key: "each",
      value: function each(f) {
        cov_10dmxtpein().f[20]++;
        cov_10dmxtpein().s[98]++;

        while (1) {
          var o = (cov_10dmxtpein().s[99]++, this.next());
          cov_10dmxtpein().s[100]++;

          if (o.done) {
            cov_10dmxtpein().b[21][0]++;
            cov_10dmxtpein().s[101]++;
            break;
          } else {
            cov_10dmxtpein().b[21][1]++;
          }

          cov_10dmxtpein().s[102]++;

          if (f(o.value) === false) {
            cov_10dmxtpein().b[22][0]++;
            cov_10dmxtpein().s[103]++;
            return false;
          } else {
            cov_10dmxtpein().b[22][1]++;
          }
        }

        cov_10dmxtpein().s[104]++;
        return true;
      }
      /**
       * Returns the reduction of sequence according the reducing function
       *
       * @param {*} f a reducing function
       * @param {*} init
       */

    }, {
      key: "reduce",
      value: function reduce(f, initialValue) {
        cov_10dmxtpein().f[21]++;
        var o = (cov_10dmxtpein().s[105]++, this.next());
        var i = (cov_10dmxtpein().s[106]++, 0);
        cov_10dmxtpein().s[107]++;

        if ((cov_10dmxtpein().b[24][0]++, initialValue === undefined) && (cov_10dmxtpein().b[24][1]++, !o.done)) {
          cov_10dmxtpein().b[23][0]++;
          cov_10dmxtpein().s[108]++;
          initialValue = o.value;
          cov_10dmxtpein().s[109]++;
          o = this.next();
          cov_10dmxtpein().s[110]++;
          i++;
        } else {
          cov_10dmxtpein().b[23][1]++;
        }

        cov_10dmxtpein().s[111]++;

        while (!o.done) {
          cov_10dmxtpein().s[112]++;
          initialValue = f(initialValue, o.value, i++);
          cov_10dmxtpein().s[113]++;
          o = this.next();
        }

        cov_10dmxtpein().s[114]++;
        return initialValue;
      }
      /**
       * Returns the number of matched items in the sequence
       */

    }, {
      key: "size",
      value: function size() {
        cov_10dmxtpein().f[22]++;
        cov_10dmxtpein().s[115]++;
        return this.reduce(function (acc, n) {
          cov_10dmxtpein().f[23]++;
          cov_10dmxtpein().s[116]++;
          return ++acc;
        }, 0);
      }
    }]);

    return Iterator;
  }();
  cov_10dmxtpein().s[117]++;

  if (typeof Symbol === 'function') {
    cov_10dmxtpein().b[25][0]++;
    cov_10dmxtpein().s[118]++;

    Iterator.prototype[Symbol.iterator] = function () {
      cov_10dmxtpein().f[24]++;
      cov_10dmxtpein().s[119]++;
      return this;
    };
  } else {
    cov_10dmxtpein().b[25][1]++;
  }

  function cov_swyy4kn8c() {
    var path = "/Users/francis/workspace/mingo/lib/aggregator.js";
    var hash = "b7075158a61cf66b3d0003bb32bb3a90870ff63d";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/aggregator.js",
      statementMap: {
        "0": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 37
          }
        },
        "1": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 33
          }
        },
        "2": {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 39
          }
        },
        "3": {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 26,
            column: 56
          }
        },
        "4": {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        "5": {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 39,
            column: 15
          }
        },
        "6": {
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 49
          }
        },
        "7": {
          start: {
            line: 31,
            column: 26
          },
          end: {
            line: 31,
            column: 41
          }
        },
        "8": {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 125
          }
        },
        "9": {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 38,
            column: 17
          }
        },
        "10": {
          start: {
            line: 34,
            column: 20
          },
          end: {
            line: 34,
            column: 107
          }
        },
        "11": {
          start: {
            line: 37,
            column: 20
          },
          end: {
            line: 37,
            column: 95
          }
        },
        "12": {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 24
          }
        },
        "13": {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 54
          }
        },
        "14": {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 71
          }
        },
        "15": {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 63
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 13,
              column: 5
            }
          },
          loc: {
            start: {
              line: 13,
              column: 36
            },
            end: {
              line: 16,
              column: 5
            }
          },
          line: 13
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 24,
              column: 4
            },
            end: {
              line: 24,
              column: 5
            }
          },
          loc: {
            start: {
              line: 24,
              column: 30
            },
            end: {
              line: 42,
              column: 5
            }
          },
          line: 24
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 29,
              column: 35
            },
            end: {
              line: 29,
              column: 36
            }
          },
          loc: {
            start: {
              line: 29,
              column: 49
            },
            end: {
              line: 39,
              column: 13
            }
          },
          line: 29
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 48,
              column: 4
            },
            end: {
              line: 48,
              column: 5
            }
          },
          loc: {
            start: {
              line: 48,
              column: 27
            },
            end: {
              line: 50,
              column: 5
            }
          },
          line: 48
        },
        "4": {
          name: "aggregate",
          decl: {
            start: {
              line: 60,
              column: 16
            },
            end: {
              line: 60,
              column: 25
            }
          },
          loc: {
            start: {
              line: 60,
              column: 57
            },
            end: {
              line: 63,
              column: 1
            }
          },
          line: 60
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 27,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 27,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          }, {
            start: {
              line: 27,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          }],
          line: 27
        },
        "1": {
          loc: {
            start: {
              line: 32,
              column: 23
            },
            end: {
              line: 32,
              column: 84
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 32,
              column: 23
            },
            end: {
              line: 32,
              column: 48
            }
          }, {
            start: {
              line: 32,
              column: 52
            },
            end: {
              line: 32,
              column: 84
            }
          }],
          line: 32
        },
        "2": {
          loc: {
            start: {
              line: 33,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 33,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          }, {
            start: {
              line: 33,
              column: 16
            },
            end: {
              line: 38,
              column: 17
            }
          }],
          line: 33
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "b7075158a61cf66b3d0003bb32bb3a90870ff63d"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_swyy4kn8c = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_swyy4kn8c();
  /**
   * Aggregator for defining filter using mongoDB aggregation pipeline syntax
   *
   * @param operators an Array of pipeline operators
   * @constructor
   */

  var Aggregator = /*#__PURE__*/function () {
    function Aggregator(operators, options) {
      _classCallCheck(this, Aggregator);

      cov_swyy4kn8c().f[0]++;
      cov_swyy4kn8c().s[0]++;
      this.__operators = operators;
      cov_swyy4kn8c().s[1]++;
      this.__options = options;
    }
    /**
     * Returns an `Lazy` iterator for processing results of pipeline
     *
     * @param {*} collection An array or iterator object
     * @param {Query} query the `Query` object to use as context
     * @returns {Iterator} an iterator object
     */


    _createClass(Aggregator, [{
      key: "stream",
      value: function stream(collection, query) {
        var _this = this;

        cov_swyy4kn8c().f[1]++;
        var iterator = (cov_swyy4kn8c().s[2]++, Lazy(collection));
        var pipelineOperators = (cov_swyy4kn8c().s[3]++, OPERATORS[OP_PIPELINE]);
        cov_swyy4kn8c().s[4]++;

        if (!isEmpty(this.__operators)) {
          cov_swyy4kn8c().b[0][0]++;
          cov_swyy4kn8c().s[5]++;
          // run aggregation pipeline
          each(this.__operators, function (operator) {
            cov_swyy4kn8c().f[2]++;
            var operatorKeys = (cov_swyy4kn8c().s[6]++, keys(operator));
            var key = (cov_swyy4kn8c().s[7]++, operatorKeys[0]);
            cov_swyy4kn8c().s[8]++;
            assert((cov_swyy4kn8c().b[1][0]++, operatorKeys.length === 1) && (cov_swyy4kn8c().b[1][1]++, has(OPERATORS[OP_PIPELINE], key)), "invalid aggregation operator ".concat(key));
            cov_swyy4kn8c().s[9]++;

            if (query instanceof Query) {
              cov_swyy4kn8c().b[2][0]++;
              cov_swyy4kn8c().s[10]++;
              iterator = pipelineOperators[key].call(query, iterator, operator[key], _this.__options);
            } else {
              cov_swyy4kn8c().b[2][1]++;
              cov_swyy4kn8c().s[11]++;
              iterator = pipelineOperators[key](iterator, operator[key], _this.__options);
            }
          });
        } else {
          cov_swyy4kn8c().b[0][1]++;
        }

        cov_swyy4kn8c().s[12]++;
        return iterator;
      }
      /**
       * Return the results of the aggregation as an array.
       * @param {*} collection
       * @param {*} query
       */

    }, {
      key: "run",
      value: function run(collection, query) {
        cov_swyy4kn8c().f[3]++;
        cov_swyy4kn8c().s[13]++;
        return this.stream(collection, query).value();
      }
    }]);

    return Aggregator;
  }();
  /**
   * Return the result collection after running the aggregation pipeline for the given collection.
   * Shorthand for `(new Aggregator(pipeline, options)).run(collection)`
   *
   * @param {Array} collection Collection or stream of objects
   * @param {Array} pipeline The pipeline operators to use
   * @returns {Array}
   */

  function aggregate(collection, pipeline, options) {
    cov_swyy4kn8c().f[4]++;
    cov_swyy4kn8c().s[14]++;
    assert(isArray(pipeline), 'Aggregation pipeline must be an array');
    cov_swyy4kn8c().s[15]++;
    return new Aggregator(pipeline, options).run(collection);
  }

  function cov_6f2mxhqqm() {
    var path = "/Users/francis/workspace/mingo/lib/cursor.js";
    var hash = "ef179ca48759a1f3df0b83ec6ddeda1512037e95";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/cursor.js",
      statementMap: {
        "0": {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 13,
            column: 49
          }
        },
        "1": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 29
          }
        },
        "2": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 31
          }
        },
        "3": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 61
          }
        },
        "4": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 30
          }
        },
        "5": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 29
          }
        },
        "6": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 26
          }
        },
        "7": {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 28
          }
        },
        "8": {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 24,
            column: 33
          }
        },
        "9": {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 33
          }
        },
        "10": {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 27,
            column: 69
          }
        },
        "11": {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 69
          }
        },
        "12": {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 68
          }
        },
        "13": {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        "14": {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 115
          }
        },
        "15": {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 29
          }
        },
        "16": {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 37
          }
        },
        "17": {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 33
          }
        },
        "18": {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 46
          }
        },
        "19": {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 20
          }
        },
        "20": {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 64,
            column: 47
          }
        },
        "21": {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 20
          }
        },
        "22": {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 73,
            column: 53
          }
        },
        "23": {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 20
          }
        },
        "24": {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 81,
            column: 46
          }
        },
        "25": {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 82,
            column: 20
          }
        },
        "26": {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 90,
            column: 19
          }
        },
        "27": {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 19
          }
        },
        "28": {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 92,
            column: 38
          }
        },
        "29": {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 38
          }
        },
        "30": {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 36
          }
        },
        "31": {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 95,
            column: 27
          }
        },
        "32": {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 27
          }
        },
        "33": {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 28
          }
        },
        "34": {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 15
          }
        },
        "35": {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 105,
            column: 25
          }
        },
        "36": {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 25
          }
        },
        "37": {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 107,
            column: 24
          }
        },
        "38": {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 24
          }
        },
        "39": {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 36
          }
        },
        "40": {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        "41": {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 39
          }
        },
        "42": {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 32
          }
        },
        "43": {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 30
          }
        },
        "44": {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 123,
            column: 51
          }
        },
        "45": {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 37
          }
        },
        "46": {
          start: {
            line: 133,
            column: 0
          },
          end: {
            line: 142,
            column: 1
          }
        },
        "47": {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 141,
            column: 6
          }
        },
        "48": {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 140,
            column: 29
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 12,
              column: 4
            },
            end: {
              line: 12,
              column: 5
            }
          },
          loc: {
            start: {
              line: 12,
              column: 43
            },
            end: {
              line: 21,
              column: 5
            }
          },
          line: 12
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 22,
              column: 4
            },
            end: {
              line: 22,
              column: 5
            }
          },
          loc: {
            start: {
              line: 22,
              column: 13
            },
            end: {
              line: 34,
              column: 5
            }
          },
          line: 22
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 39,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          },
          loc: {
            start: {
              line: 39,
              column: 10
            },
            end: {
              line: 41,
              column: 5
            }
          },
          line: 39
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 46,
              column: 4
            },
            end: {
              line: 46,
              column: 5
            }
          },
          loc: {
            start: {
              line: 46,
              column: 12
            },
            end: {
              line: 48,
              column: 5
            }
          },
          line: 46
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 54,
              column: 4
            },
            end: {
              line: 54,
              column: 5
            }
          },
          loc: {
            start: {
              line: 54,
              column: 12
            },
            end: {
              line: 57,
              column: 5
            }
          },
          line: 54
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 63,
              column: 4
            },
            end: {
              line: 63,
              column: 5
            }
          },
          loc: {
            start: {
              line: 63,
              column: 13
            },
            end: {
              line: 66,
              column: 5
            }
          },
          line: 63
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 72,
              column: 4
            },
            end: {
              line: 72,
              column: 5
            }
          },
          loc: {
            start: {
              line: 72,
              column: 19
            },
            end: {
              line: 75,
              column: 5
            }
          },
          line: 72
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 80,
              column: 4
            },
            end: {
              line: 80,
              column: 5
            }
          },
          loc: {
            start: {
              line: 80,
              column: 23
            },
            end: {
              line: 83,
              column: 5
            }
          },
          line: 80
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 88,
              column: 4
            },
            end: {
              line: 88,
              column: 5
            }
          },
          loc: {
            start: {
              line: 88,
              column: 11
            },
            end: {
              line: 98,
              column: 5
            }
          },
          line: 88
        },
        "9": {
          name: "(anonymous_9)",
          decl: {
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 103,
              column: 5
            }
          },
          loc: {
            start: {
              line: 103,
              column: 14
            },
            end: {
              line: 116,
              column: 5
            }
          },
          line: 103
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 122,
              column: 4
            },
            end: {
              line: 122,
              column: 5
            }
          },
          loc: {
            start: {
              line: 122,
              column: 18
            },
            end: {
              line: 124,
              column: 5
            }
          },
          line: 122
        },
        "11": {
          name: "(anonymous_11)",
          decl: {
            start: {
              line: 129,
              column: 4
            },
            end: {
              line: 129,
              column: 5
            }
          },
          loc: {
            start: {
              line: 129,
              column: 22
            },
            end: {
              line: 131,
              column: 5
            }
          },
          line: 129
        },
        "12": {
          name: "(anonymous_12)",
          decl: {
            start: {
              line: 139,
              column: 40
            },
            end: {
              line: 139,
              column: 41
            }
          },
          loc: {
            start: {
              line: 139,
              column: 52
            },
            end: {
              line: 141,
              column: 5
            }
          },
          line: 139
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 16,
              column: 28
            },
            end: {
              line: 16,
              column: 60
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 16,
              column: 28
            },
            end: {
              line: 16,
              column: 38
            }
          }, {
            start: {
              line: 16,
              column: 42
            },
            end: {
              line: 16,
              column: 60
            }
          }],
          line: 16
        },
        "1": {
          loc: {
            start: {
              line: 23,
              column: 8
            },
            end: {
              line: 24,
              column: 33
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 23,
              column: 8
            },
            end: {
              line: 24,
              column: 33
            }
          }, {
            start: {
              line: 23,
              column: 8
            },
            end: {
              line: 24,
              column: 33
            }
          }],
          line: 23
        },
        "2": {
          loc: {
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 27,
              column: 69
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 27,
              column: 69
            }
          }, {
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 27,
              column: 69
            }
          }],
          line: 26
        },
        "3": {
          loc: {
            start: {
              line: 30,
              column: 8
            },
            end: {
              line: 32,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 30,
              column: 8
            },
            end: {
              line: 32,
              column: 9
            }
          }, {
            start: {
              line: 30,
              column: 8
            },
            end: {
              line: 32,
              column: 9
            }
          }],
          line: 30
        },
        "4": {
          loc: {
            start: {
              line: 89,
              column: 8
            },
            end: {
              line: 90,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 89,
              column: 8
            },
            end: {
              line: 90,
              column: 19
            }
          }, {
            start: {
              line: 89,
              column: 8
            },
            end: {
              line: 90,
              column: 19
            }
          }],
          line: 89
        },
        "5": {
          loc: {
            start: {
              line: 91,
              column: 8
            },
            end: {
              line: 92,
              column: 38
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 91,
              column: 8
            },
            end: {
              line: 92,
              column: 38
            }
          }, {
            start: {
              line: 91,
              column: 8
            },
            end: {
              line: 92,
              column: 38
            }
          }],
          line: 91
        },
        "6": {
          loc: {
            start: {
              line: 94,
              column: 8
            },
            end: {
              line: 95,
              column: 27
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 94,
              column: 8
            },
            end: {
              line: 95,
              column: 27
            }
          }, {
            start: {
              line: 94,
              column: 8
            },
            end: {
              line: 95,
              column: 27
            }
          }],
          line: 94
        },
        "7": {
          loc: {
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 105,
              column: 25
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 105,
              column: 25
            }
          }, {
            start: {
              line: 104,
              column: 8
            },
            end: {
              line: 105,
              column: 25
            }
          }],
          line: 104
        },
        "8": {
          loc: {
            start: {
              line: 106,
              column: 8
            },
            end: {
              line: 107,
              column: 24
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 106,
              column: 8
            },
            end: {
              line: 107,
              column: 24
            }
          }, {
            start: {
              line: 106,
              column: 8
            },
            end: {
              line: 107,
              column: 24
            }
          }],
          line: 106
        },
        "9": {
          loc: {
            start: {
              line: 109,
              column: 8
            },
            end: {
              line: 114,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 109,
              column: 8
            },
            end: {
              line: 114,
              column: 9
            }
          }, {
            start: {
              line: 109,
              column: 8
            },
            end: {
              line: 114,
              column: 9
            }
          }],
          line: 109
        },
        "10": {
          loc: {
            start: {
              line: 133,
              column: 0
            },
            end: {
              line: 142,
              column: 1
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 133,
              column: 0
            },
            end: {
              line: 142,
              column: 1
            }
          }, {
            start: {
              line: 133,
              column: 0
            },
            end: {
              line: 142,
              column: 1
            }
          }],
          line: 133
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "ef179ca48759a1f3df0b83ec6ddeda1512037e95"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_6f2mxhqqm = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_6f2mxhqqm();
  /**
   * Cursor to iterate and perform filtering on matched objects
   * @param collection
   * @param query
   * @param projection
   * @constructor
   */

  var Cursor = /*#__PURE__*/function () {
    function Cursor(source, query, projection) {
      _classCallCheck(this, Cursor);

      cov_6f2mxhqqm().f[0]++;
      cov_6f2mxhqqm().s[0]++;
      this.__filterFn = query.test.bind(query);
      cov_6f2mxhqqm().s[1]++;
      this.__query = query;
      cov_6f2mxhqqm().s[2]++;
      this.__source = source;
      cov_6f2mxhqqm().s[3]++;
      this.__projection = (cov_6f2mxhqqm().b[0][0]++, projection) || (cov_6f2mxhqqm().b[0][1]++, query.__projection);
      cov_6f2mxhqqm().s[4]++;
      this.__operators = [];
      cov_6f2mxhqqm().s[5]++;
      this.__result = null;
      cov_6f2mxhqqm().s[6]++;
      this.__stack = [];
      cov_6f2mxhqqm().s[7]++;
      this.__options = {};
    }

    _createClass(Cursor, [{
      key: "_fetch",
      value: function _fetch() {
        cov_6f2mxhqqm().f[1]++;
        cov_6f2mxhqqm().s[8]++;

        if (!!this.__result) {
          cov_6f2mxhqqm().b[1][0]++;
          cov_6f2mxhqqm().s[9]++;
          return this.__result;
        } else {
          cov_6f2mxhqqm().b[1][1]++;
        } // add projection operator


        cov_6f2mxhqqm().s[10]++;

        if (isObject(this.__projection)) {
          cov_6f2mxhqqm().b[2][0]++;
          cov_6f2mxhqqm().s[11]++;

          this.__operators.push({
            '$project': this.__projection
          });
        } else {
          cov_6f2mxhqqm().b[2][1]++;
        } // filter collection


        cov_6f2mxhqqm().s[12]++;
        this.__result = Lazy(this.__source).filter(this.__filterFn);
        cov_6f2mxhqqm().s[13]++;

        if (this.__operators.length > 0) {
          cov_6f2mxhqqm().b[3][0]++;
          cov_6f2mxhqqm().s[14]++;
          this.__result = new Aggregator(this.__operators, this.__options).stream(this.__result, this.__query);
        } else {
          cov_6f2mxhqqm().b[3][1]++;
        }

        cov_6f2mxhqqm().s[15]++;
        return this.__result;
      }
      /**
       * Return remaining objects in the cursor as an array. This method exhausts the cursor
       * @returns {Array}
       */

    }, {
      key: "all",
      value: function all() {
        cov_6f2mxhqqm().f[2]++;
        cov_6f2mxhqqm().s[16]++;
        return this._fetch().value();
      }
      /**
       * Returns the number of objects return in the cursor. This method exhausts the cursor
       * @returns {Number}
       */

    }, {
      key: "count",
      value: function count() {
        cov_6f2mxhqqm().f[3]++;
        cov_6f2mxhqqm().s[17]++;
        return this.all().length;
      }
      /**
       * Returns a cursor that begins returning results only after passing or skipping a number of documents.
       * @param {Number} n the number of results to skip.
       * @return {Cursor} Returns the cursor, so you can chain this call.
       */

    }, {
      key: "skip",
      value: function skip(n) {
        cov_6f2mxhqqm().f[4]++;
        cov_6f2mxhqqm().s[18]++;

        this.__operators.push({
          '$skip': n
        });

        cov_6f2mxhqqm().s[19]++;
        return this;
      }
      /**
       * Constrains the size of a cursor's result set.
       * @param {Number} n the number of results to limit to.
       * @return {Cursor} Returns the cursor, so you can chain this call.
       */

    }, {
      key: "limit",
      value: function limit(n) {
        cov_6f2mxhqqm().f[5]++;
        cov_6f2mxhqqm().s[20]++;

        this.__operators.push({
          '$limit': n
        });

        cov_6f2mxhqqm().s[21]++;
        return this;
      }
      /**
       * Returns results ordered according to a sort specification.
       * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending
       * @return {Cursor} Returns the cursor, so you can chain this call.
       */

    }, {
      key: "sort",
      value: function sort(modifier) {
        cov_6f2mxhqqm().f[6]++;
        cov_6f2mxhqqm().s[22]++;

        this.__operators.push({
          '$sort': modifier
        });

        cov_6f2mxhqqm().s[23]++;
        return this;
      }
      /**
       * Specifies the collation for the cursor returned by the `mingo.Query.find`
       * @param {*} options
       */

    }, {
      key: "collation",
      value: function collation(options) {
        cov_6f2mxhqqm().f[7]++;
        cov_6f2mxhqqm().s[24]++;
        this.__options['collation'] = options;
        cov_6f2mxhqqm().s[25]++;
        return this;
      }
      /**
       * Returns the next document in a cursor.
       * @returns {Object | Boolean}
       */

    }, {
      key: "next",
      value: function next() {
        cov_6f2mxhqqm().f[8]++;
        cov_6f2mxhqqm().s[26]++;

        if (!this.__stack) {
          cov_6f2mxhqqm().b[4][0]++;
          cov_6f2mxhqqm().s[27]++;
          return;
        } else {
          cov_6f2mxhqqm().b[4][1]++;
        } // done


        cov_6f2mxhqqm().s[28]++;

        if (this.__stack.length > 0) {
          cov_6f2mxhqqm().b[5][0]++;
          cov_6f2mxhqqm().s[29]++;
          return this.__stack.pop();
        } else {
          cov_6f2mxhqqm().b[5][1]++;
        } // yield value obtains in hasNext()


        var o = (cov_6f2mxhqqm().s[30]++, this._fetch().next());
        cov_6f2mxhqqm().s[31]++;

        if (!o.done) {
          cov_6f2mxhqqm().b[6][0]++;
          cov_6f2mxhqqm().s[32]++;
          return o.value;
        } else {
          cov_6f2mxhqqm().b[6][1]++;
        }

        cov_6f2mxhqqm().s[33]++;
        this.__stack = null;
        cov_6f2mxhqqm().s[34]++;
        return;
      }
      /**
       * Returns true if the cursor has documents and can be iterated.
       * @returns {boolean}
       */

    }, {
      key: "hasNext",
      value: function hasNext() {
        cov_6f2mxhqqm().f[9]++;
        cov_6f2mxhqqm().s[35]++;

        if (!this.__stack) {
          cov_6f2mxhqqm().b[7][0]++;
          cov_6f2mxhqqm().s[36]++;
          return false;
        } else {
          cov_6f2mxhqqm().b[7][1]++;
        } // done


        cov_6f2mxhqqm().s[37]++;

        if (this.__stack.length > 0) {
          cov_6f2mxhqqm().b[8][0]++;
          cov_6f2mxhqqm().s[38]++;
          return true;
        } else {
          cov_6f2mxhqqm().b[8][1]++;
        } // there is a value on stack


        var o = (cov_6f2mxhqqm().s[39]++, this._fetch().next());
        cov_6f2mxhqqm().s[40]++;

        if (!o.done) {
          cov_6f2mxhqqm().b[9][0]++;
          cov_6f2mxhqqm().s[41]++;

          this.__stack.push(o.value);
        } else {
          cov_6f2mxhqqm().b[9][1]++;
          cov_6f2mxhqqm().s[42]++;
          this.__stack = null;
        }

        cov_6f2mxhqqm().s[43]++;
        return !!this.__stack;
      }
      /**
       * Applies a function to each document in a cursor and collects the return values in an array.
       * @param callback
       * @returns {Array}
       */

    }, {
      key: "map",
      value: function map(callback) {
        cov_6f2mxhqqm().f[10]++;
        cov_6f2mxhqqm().s[44]++;
        return this._fetch().map(callback).value();
      }
      /**
       * Applies a JavaScript function for every document in a cursor.
       * @param callback
       */

    }, {
      key: "forEach",
      value: function forEach(callback) {
        cov_6f2mxhqqm().f[11]++;
        cov_6f2mxhqqm().s[45]++;

        this._fetch().each(callback);
      }
    }]);

    return Cursor;
  }();
  cov_6f2mxhqqm().s[46]++;

  if (typeof Symbol === 'function') {
    cov_6f2mxhqqm().b[10][0]++;
    cov_6f2mxhqqm().s[47]++;

    /**
     * Applies an [ES2015 Iteration protocol][] compatible implementation
     * [ES2015 Iteration protocol]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols
     * @returns {Object}
     */
    Cursor.prototype[Symbol.iterator] = function () {
      cov_6f2mxhqqm().f[12]++;
      cov_6f2mxhqqm().s[48]++;
      return this._fetch();
    };
  } else {
    cov_6f2mxhqqm().b[10][1]++;
  }

  function cov_dk4vl3gyx() {
    var path = "/Users/francis/workspace/mingo/lib/query.js";
    var hash = "3ca82aa62d46145d55068e46d741fbde2033e118";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/query.js",
      statementMap: {
        "0": {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 13,
            column: 35
          }
        },
        "1": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 45
          }
        },
        "2": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 29
          }
        },
        "3": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 24
          }
        },
        "4": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 78
          }
        },
        "5": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 43,
            column: 11
          }
        },
        "6": {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        "7": {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 61
          }
        },
        "8": {
          start: {
            line: 26,
            column: 17
          },
          end: {
            line: 39,
            column: 13
          }
        },
        "9": {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 58
          }
        },
        "10": {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 39,
            column: 13
          }
        },
        "11": {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 58
          }
        },
        "12": {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 83
          }
        },
        "13": {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 39
          }
        },
        "14": {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 38,
            column: 19
          }
        },
        "15": {
          start: {
            line: 37,
            column: 20
          },
          end: {
            line: 37,
            column: 58
          }
        },
        "16": {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        "17": {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 100
          }
        },
        "18": {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 98
          }
        },
        "19": {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 74
          }
        },
        "20": {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        "21": {
          start: {
            line: 55,
            column: 21
          },
          end: {
            line: 55,
            column: 22
          }
        },
        "22": {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 52
          }
        },
        "23": {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        "24": {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 29
          }
        },
        "25": {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 60,
            column: 20
          }
        },
        "26": {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 56
          }
        },
        "27": {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 81,
            column: 15
          }
        },
        "28": {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 79,
            column: 30
          }
        },
        "29": {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 30
          }
        },
        "30": {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 23
          }
        },
        "31": {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 60
          }
        },
        "32": {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 50
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 12,
              column: 4
            },
            end: {
              line: 12,
              column: 5
            }
          },
          loc: {
            start: {
              line: 12,
              column: 38
            },
            end: {
              line: 17,
              column: 5
            }
          },
          line: 12
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 18,
              column: 4
            },
            end: {
              line: 18,
              column: 5
            }
          },
          loc: {
            start: {
              line: 18,
              column: 15
            },
            end: {
              line: 44,
              column: 5
            }
          },
          line: 18
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 21,
              column: 30
            },
            end: {
              line: 21,
              column: 31
            }
          },
          loc: {
            start: {
              line: 21,
              column: 47
            },
            end: {
              line: 43,
              column: 9
            }
          },
          line: 21
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 36,
              column: 27
            },
            end: {
              line: 36,
              column: 28
            }
          },
          loc: {
            start: {
              line: 36,
              column: 40
            },
            end: {
              line: 38,
              column: 17
            }
          },
          line: 36
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 45,
              column: 4
            },
            end: {
              line: 45,
              column: 5
            }
          },
          loc: {
            start: {
              line: 45,
              column: 45
            },
            end: {
              line: 48,
              column: 5
            }
          },
          line: 45
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 54,
              column: 4
            },
            end: {
              line: 54,
              column: 5
            }
          },
          loc: {
            start: {
              line: 54,
              column: 14
            },
            end: {
              line: 61,
              column: 5
            }
          },
          line: 54
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 68,
              column: 4
            },
            end: {
              line: 68,
              column: 5
            }
          },
          loc: {
            start: {
              line: 68,
              column: 33
            },
            end: {
              line: 70,
              column: 5
            }
          },
          line: 68
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 76,
              column: 4
            },
            end: {
              line: 76,
              column: 5
            }
          },
          loc: {
            start: {
              line: 76,
              column: 23
            },
            end: {
              line: 82,
              column: 5
            }
          },
          line: 76
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 77,
              column: 34
            },
            end: {
              line: 77,
              column: 35
            }
          },
          loc: {
            start: {
              line: 77,
              column: 48
            },
            end: {
              line: 81,
              column: 9
            }
          },
          line: 77
        },
        "9": {
          name: "find",
          decl: {
            start: {
              line: 92,
              column: 16
            },
            end: {
              line: 92,
              column: 20
            }
          },
          loc: {
            start: {
              line: 92,
              column: 55
            },
            end: {
              line: 94,
              column: 1
            }
          },
          line: 92
        },
        "10": {
          name: "remove",
          decl: {
            start: {
              line: 102,
              column: 16
            },
            end: {
              line: 102,
              column: 22
            }
          },
          loc: {
            start: {
              line: 102,
              column: 45
            },
            end: {
              line: 104,
              column: 1
            }
          },
          line: 102
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 14,
              column: 28
            },
            end: {
              line: 14,
              column: 44
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 14,
              column: 28
            },
            end: {
              line: 14,
              column: 38
            }
          }, {
            start: {
              line: 14,
              column: 42
            },
            end: {
              line: 14,
              column: 44
            }
          }],
          line: 14
        },
        "1": {
          loc: {
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 39,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 39,
              column: 13
            }
          }, {
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 39,
              column: 13
            }
          }],
          line: 23
        },
        "2": {
          loc: {
            start: {
              line: 26,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 26,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          }, {
            start: {
              line: 26,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          }],
          line: 26
        },
        "3": {
          loc: {
            start: {
              line: 29,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 29,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          }, {
            start: {
              line: 29,
              column: 17
            },
            end: {
              line: 39,
              column: 13
            }
          }],
          line: 29
        },
        "4": {
          loc: {
            start: {
              line: 40,
              column: 12
            },
            end: {
              line: 42,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 40,
              column: 12
            },
            end: {
              line: 42,
              column: 13
            }
          }, {
            start: {
              line: 40,
              column: 12
            },
            end: {
              line: 42,
              column: 13
            }
          }],
          line: 40
        },
        "5": {
          loc: {
            start: {
              line: 56,
              column: 12
            },
            end: {
              line: 58,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 56,
              column: 12
            },
            end: {
              line: 58,
              column: 13
            }
          }, {
            start: {
              line: 56,
              column: 12
            },
            end: {
              line: 58,
              column: 13
            }
          }],
          line: 56
        },
        "6": {
          loc: {
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 30
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 30
            }
          }, {
            start: {
              line: 78,
              column: 12
            },
            end: {
              line: 79,
              column: 30
            }
          }],
          line: 78
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "3ca82aa62d46145d55068e46d741fbde2033e118"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_dk4vl3gyx = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_dk4vl3gyx();
  /**
   * Query object to test collection elements with
   * @param criteria the pass criteria for the query
   * @param projection optional projection specifiers
   * @constructor
   */

  var Query = /*#__PURE__*/function () {
    function Query(criteria, projection) {
      _classCallCheck(this, Query);

      cov_dk4vl3gyx().f[0]++;
      cov_dk4vl3gyx().s[0]++;
      this.__criteria = criteria;
      cov_dk4vl3gyx().s[1]++;
      this.__projection = (cov_dk4vl3gyx().b[0][0]++, projection) || (cov_dk4vl3gyx().b[0][1]++, {});
      cov_dk4vl3gyx().s[2]++;
      this.__compiled = [];
      cov_dk4vl3gyx().s[3]++;

      this._compile();
    }

    _createClass(Query, [{
      key: "_compile",
      value: function _compile() {
        var _this = this;

        cov_dk4vl3gyx().f[1]++;
        cov_dk4vl3gyx().s[4]++;
        assert(isObject(this.__criteria), 'query criteria must be an object');
        var whereOperator;
        cov_dk4vl3gyx().s[5]++;
        each(this.__criteria, function (expr, field) {
          cov_dk4vl3gyx().f[2]++;
          cov_dk4vl3gyx().s[6]++;

          // save $where operators to be executed after other operators
          if ('$where' === field) {
            cov_dk4vl3gyx().b[1][0]++;
            cov_dk4vl3gyx().s[7]++;
            whereOperator = {
              field: field,
              expr: expr
            };
          } else {
            cov_dk4vl3gyx().b[1][1]++;
            cov_dk4vl3gyx().s[8]++;

            if ('$expr' === field) {
              cov_dk4vl3gyx().b[2][0]++;
              cov_dk4vl3gyx().s[9]++;

              _this._processOperator(field, field, expr);
            } else {
              cov_dk4vl3gyx().b[2][1]++;
              cov_dk4vl3gyx().s[10]++;

              if (inArray(['$and', '$or', '$nor'], field)) {
                cov_dk4vl3gyx().b[3][0]++;
                cov_dk4vl3gyx().s[11]++;

                _this._processOperator(field, field, expr);
              } else {
                cov_dk4vl3gyx().b[3][1]++;
                cov_dk4vl3gyx().s[12]++;
                // normalize expression
                assert(!isOperator(field), "unknown top level operator: ".concat(field));
                cov_dk4vl3gyx().s[13]++;
                expr = normalize(expr);
                cov_dk4vl3gyx().s[14]++;
                each(expr, function (val, op) {
                  cov_dk4vl3gyx().f[3]++;
                  cov_dk4vl3gyx().s[15]++;

                  _this._processOperator(field, op, val);
                });
              }
            }
          }

          cov_dk4vl3gyx().s[16]++;

          if (isObject(whereOperator)) {
            cov_dk4vl3gyx().b[4][0]++;
            cov_dk4vl3gyx().s[17]++;

            _this._processOperator(whereOperator.field, whereOperator.field, whereOperator.expr);
          } else {
            cov_dk4vl3gyx().b[4][1]++;
          }
        });
      }
    }, {
      key: "_processOperator",
      value: function _processOperator(field, operator, value) {
        cov_dk4vl3gyx().f[4]++;
        cov_dk4vl3gyx().s[18]++;
        assert(has(OPERATORS[OP_QUERY], operator), "invalid query operator ".concat(operator, " detected"));
        cov_dk4vl3gyx().s[19]++;

        this.__compiled.push(OPERATORS[OP_QUERY][operator](field, value));
      }
      /**
       * Checks if the object passes the query criteria. Returns true if so, false otherwise.
       * @param obj
       * @returns {boolean}
       */

    }, {
      key: "test",
      value: function test(obj) {
        cov_dk4vl3gyx().f[5]++;
        cov_dk4vl3gyx().s[20]++;

        for (var i = (cov_dk4vl3gyx().s[21]++, 0), len = (cov_dk4vl3gyx().s[22]++, this.__compiled.length); i < len; i++) {
          cov_dk4vl3gyx().s[23]++;

          if (!this.__compiled[i](obj)) {
            cov_dk4vl3gyx().b[5][0]++;
            cov_dk4vl3gyx().s[24]++;
            return false;
          } else {
            cov_dk4vl3gyx().b[5][1]++;
          }
        }

        cov_dk4vl3gyx().s[25]++;
        return true;
      }
      /**
       * Performs a query on a collection and returns a cursor object.
       * @param collection
       * @param projection
       * @returns {Cursor}
       */

    }, {
      key: "find",
      value: function find(collection, projection) {
        cov_dk4vl3gyx().f[6]++;
        cov_dk4vl3gyx().s[26]++;
        return new Cursor(collection, this, projection);
      }
      /**
       * Remove matched documents from the collection returning the remainder
       * @param collection
       * @returns {Array}
       */

    }, {
      key: "remove",
      value: function remove(collection) {
        var _this2 = this;

        cov_dk4vl3gyx().f[7]++;
        cov_dk4vl3gyx().s[27]++;
        return reduce(collection, function (acc, obj) {
          cov_dk4vl3gyx().f[8]++;
          cov_dk4vl3gyx().s[28]++;

          if (!_this2.test(obj)) {
            cov_dk4vl3gyx().b[6][0]++;
            cov_dk4vl3gyx().s[29]++;
            acc.push(obj);
          } else {
            cov_dk4vl3gyx().b[6][1]++;
          }

          cov_dk4vl3gyx().s[30]++;
          return acc;
        }, []);
      }
    }]);

    return Query;
  }();
  /**
   * Performs a query on a collection and returns a cursor object.
   *
   * @param collection
   * @param criteria
   * @param projection
   * @returns {Cursor}
   */

  function find(collection, criteria, projection) {
    cov_dk4vl3gyx().f[9]++;
    cov_dk4vl3gyx().s[31]++;
    return new Query(criteria).find(collection, projection);
  }
  /**
   * Returns a new array without objects which match the criteria
   *
   * @param collection
   * @param criteria
   * @returns {Array}
   */

  function remove(collection, criteria) {
    cov_dk4vl3gyx().f[10]++;
    cov_dk4vl3gyx().s[32]++;
    return new Query(criteria).remove(collection);
  }

  function cov_1oso1119ga() {
    var path = "/Users/francis/workspace/mingo/lib/operators/predicates.js";
    var hash = "19ab4ff62e5498b94e2985d6838f60318378fff2";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/predicates.js",
      statementMap: {
        "0": {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 17,
            column: 20
          }
        },
        "1": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 20
          }
        },
        "2": {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 20,
            column: 20
          }
        },
        "3": {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 20
          }
        },
        "4": {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        "5": {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 38
          }
        },
        "6": {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 52
          }
        },
        "7": {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 17
          }
        },
        "8": {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 22
          }
        },
        "9": {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 48,
            column: 30
          }
        },
        "10": {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 30
          }
        },
        "11": {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 54
          }
        },
        "12": {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 22
          }
        },
        "13": {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 42
          }
        },
        "14": {
          start: {
            line: 69,
            column: 35
          },
          end: {
            line: 69,
            column: 40
          }
        },
        "15": {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 43
          }
        },
        "16": {
          start: {
            line: 79,
            column: 35
          },
          end: {
            line: 79,
            column: 41
          }
        },
        "17": {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 42
          }
        },
        "18": {
          start: {
            line: 89,
            column: 35
          },
          end: {
            line: 89,
            column: 40
          }
        },
        "19": {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 43
          }
        },
        "20": {
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 41
          }
        },
        "21": {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 77
          }
        },
        "22": {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 109,
            column: 75
          }
        },
        "23": {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 23
          }
        },
        "24": {
          start: {
            line: 120,
            column: 17
          },
          end: {
            line: 120,
            column: 51
          }
        },
        "25": {
          start: {
            line: 120,
            column: 24
          },
          end: {
            line: 120,
            column: 51
          }
        },
        "26": {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 54
          }
        },
        "27": {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 105
          }
        },
        "28": {
          start: {
            line: 141,
            column: 18
          },
          end: {
            line: 141,
            column: 23
          }
        },
        "29": {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        "30": {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        "31": {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 143,
            column: 22
          }
        },
        "32": {
          start: {
            line: 143,
            column: 30
          },
          end: {
            line: 143,
            column: 38
          }
        },
        "33": {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        "34": {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 68
          }
        },
        "35": {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 57
          }
        },
        "36": {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 19
          }
        },
        "37": {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 26
          }
        },
        "38": {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        "39": {
          start: {
            line: 173,
            column: 21
          },
          end: {
            line: 173,
            column: 29
          }
        },
        "40": {
          start: {
            line: 173,
            column: 28
          },
          end: {
            line: 173,
            column: 29
          }
        },
        "41": {
          start: {
            line: 174,
            column: 23
          },
          end: {
            line: 174,
            column: 24
          }
        },
        "42": {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        "43": {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 35
          }
        },
        "44": {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 40
          }
        },
        "45": {
          start: {
            line: 179,
            column: 27
          },
          end: {
            line: 179,
            column: 38
          }
        },
        "46": {
          start: {
            line: 181,
            column: 20
          },
          end: {
            line: 181,
            column: 39
          }
        },
        "47": {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        "48": {
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 182,
            column: 22
          }
        },
        "49": {
          start: {
            line: 182,
            column: 30
          },
          end: {
            line: 182,
            column: 38
          }
        },
        "50": {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        "51": {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 184,
            column: 28
          }
        },
        "52": {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 17
          }
        },
        "53": {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        "54": {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 201,
            column: 67
          }
        },
        "55": {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 204,
            column: 31
          }
        },
        "56": {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 31
          }
        },
        "57": {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 30
          }
        },
        "58": {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 28
          }
        },
        "59": {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 216,
            column: 32
          }
        },
        "60": {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 29
          }
        },
        "61": {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 222,
            column: 29
          }
        },
        "62": {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 225,
            column: 31
          }
        },
        "63": {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 99
          }
        },
        "64": {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 101
          }
        },
        "65": {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 31
          }
        },
        "66": {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 236,
            column: 25
          }
        },
        "67": {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 74
          }
        },
        "68": {
          start: {
            line: 240,
            column: 36
          },
          end: {
            line: 240,
            column: 72
          }
        }
      },
      fnMap: {
        "0": {
          name: "$eq",
          decl: {
            start: {
              line: 14,
              column: 16
            },
            end: {
              line: 14,
              column: 19
            }
          },
          loc: {
            start: {
              line: 14,
              column: 26
            },
            end: {
              line: 27,
              column: 1
            }
          },
          line: 14
        },
        "1": {
          name: "$ne",
          decl: {
            start: {
              line: 35,
              column: 16
            },
            end: {
              line: 35,
              column: 19
            }
          },
          loc: {
            start: {
              line: 35,
              column: 26
            },
            end: {
              line: 37,
              column: 1
            }
          },
          line: 35
        },
        "2": {
          name: "$in",
          decl: {
            start: {
              line: 45,
              column: 16
            },
            end: {
              line: 45,
              column: 19
            }
          },
          loc: {
            start: {
              line: 45,
              column: 26
            },
            end: {
              line: 50,
              column: 1
            }
          },
          line: 45
        },
        "3": {
          name: "$nin",
          decl: {
            start: {
              line: 58,
              column: 16
            },
            end: {
              line: 58,
              column: 20
            }
          },
          loc: {
            start: {
              line: 58,
              column: 27
            },
            end: {
              line: 60,
              column: 1
            }
          },
          line: 58
        },
        "4": {
          name: "$lt",
          decl: {
            start: {
              line: 68,
              column: 16
            },
            end: {
              line: 68,
              column: 19
            }
          },
          loc: {
            start: {
              line: 68,
              column: 26
            },
            end: {
              line: 70,
              column: 1
            }
          },
          line: 68
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 69,
              column: 25
            },
            end: {
              line: 69,
              column: 26
            }
          },
          loc: {
            start: {
              line: 69,
              column: 35
            },
            end: {
              line: 69,
              column: 40
            }
          },
          line: 69
        },
        "6": {
          name: "$lte",
          decl: {
            start: {
              line: 78,
              column: 16
            },
            end: {
              line: 78,
              column: 20
            }
          },
          loc: {
            start: {
              line: 78,
              column: 27
            },
            end: {
              line: 80,
              column: 1
            }
          },
          line: 78
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 79,
              column: 25
            },
            end: {
              line: 79,
              column: 26
            }
          },
          loc: {
            start: {
              line: 79,
              column: 35
            },
            end: {
              line: 79,
              column: 41
            }
          },
          line: 79
        },
        "8": {
          name: "$gt",
          decl: {
            start: {
              line: 88,
              column: 16
            },
            end: {
              line: 88,
              column: 19
            }
          },
          loc: {
            start: {
              line: 88,
              column: 26
            },
            end: {
              line: 90,
              column: 1
            }
          },
          line: 88
        },
        "9": {
          name: "(anonymous_9)",
          decl: {
            start: {
              line: 89,
              column: 25
            },
            end: {
              line: 89,
              column: 26
            }
          },
          loc: {
            start: {
              line: 89,
              column: 35
            },
            end: {
              line: 89,
              column: 40
            }
          },
          line: 89
        },
        "10": {
          name: "$gte",
          decl: {
            start: {
              line: 98,
              column: 16
            },
            end: {
              line: 98,
              column: 20
            }
          },
          loc: {
            start: {
              line: 98,
              column: 27
            },
            end: {
              line: 100,
              column: 1
            }
          },
          line: 98
        },
        "11": {
          name: "(anonymous_11)",
          decl: {
            start: {
              line: 99,
              column: 25
            },
            end: {
              line: 99,
              column: 26
            }
          },
          loc: {
            start: {
              line: 99,
              column: 35
            },
            end: {
              line: 99,
              column: 41
            }
          },
          line: 99
        },
        "12": {
          name: "$mod",
          decl: {
            start: {
              line: 108,
              column: 16
            },
            end: {
              line: 108,
              column: 20
            }
          },
          loc: {
            start: {
              line: 108,
              column: 27
            },
            end: {
              line: 110,
              column: 1
            }
          },
          line: 108
        },
        "13": {
          name: "(anonymous_13)",
          decl: {
            start: {
              line: 109,
              column: 31
            },
            end: {
              line: 109,
              column: 32
            }
          },
          loc: {
            start: {
              line: 109,
              column: 38
            },
            end: {
              line: 109,
              column: 75
            }
          },
          line: 109
        },
        "14": {
          name: "$regex",
          decl: {
            start: {
              line: 118,
              column: 16
            },
            end: {
              line: 118,
              column: 22
            }
          },
          loc: {
            start: {
              line: 118,
              column: 29
            },
            end: {
              line: 122,
              column: 1
            }
          },
          line: 118
        },
        "15": {
          name: "(anonymous_15)",
          decl: {
            start: {
              line: 120,
              column: 17
            },
            end: {
              line: 120,
              column: 18
            }
          },
          loc: {
            start: {
              line: 120,
              column: 24
            },
            end: {
              line: 120,
              column: 51
            }
          },
          line: 120
        },
        "16": {
          name: "$exists",
          decl: {
            start: {
              line: 130,
              column: 16
            },
            end: {
              line: 130,
              column: 23
            }
          },
          loc: {
            start: {
              line: 130,
              column: 30
            },
            end: {
              line: 132,
              column: 1
            }
          },
          line: 130
        },
        "17": {
          name: "$all",
          decl: {
            start: {
              line: 140,
              column: 16
            },
            end: {
              line: 140,
              column: 20
            }
          },
          loc: {
            start: {
              line: 140,
              column: 27
            },
            end: {
              line: 154,
              column: 1
            }
          },
          line: 140
        },
        "18": {
          name: "$size",
          decl: {
            start: {
              line: 162,
              column: 16
            },
            end: {
              line: 162,
              column: 21
            }
          },
          loc: {
            start: {
              line: 162,
              column: 28
            },
            end: {
              line: 164,
              column: 1
            }
          },
          line: 162
        },
        "19": {
          name: "$elemMatch",
          decl: {
            start: {
              line: 171,
              column: 16
            },
            end: {
              line: 171,
              column: 26
            }
          },
          loc: {
            start: {
              line: 171,
              column: 33
            },
            end: {
              line: 189,
              column: 1
            }
          },
          line: 171
        },
        "20": {
          name: "(anonymous_20)",
          decl: {
            start: {
              line: 173,
              column: 21
            },
            end: {
              line: 173,
              column: 22
            }
          },
          loc: {
            start: {
              line: 173,
              column: 28
            },
            end: {
              line: 173,
              column: 29
            }
          },
          line: 173
        },
        "21": {
          name: "(anonymous_21)",
          decl: {
            start: {
              line: 179,
              column: 21
            },
            end: {
              line: 179,
              column: 22
            }
          },
          loc: {
            start: {
              line: 179,
              column: 27
            },
            end: {
              line: 179,
              column: 38
            }
          },
          line: 179
        },
        "22": {
          name: "$type",
          decl: {
            start: {
              line: 197,
              column: 16
            },
            end: {
              line: 197,
              column: 21
            }
          },
          loc: {
            start: {
              line: 197,
              column: 28
            },
            end: {
              line: 238,
              column: 1
            }
          },
          line: 197
        },
        "23": {
          name: "compare",
          decl: {
            start: {
              line: 239,
              column: 9
            },
            end: {
              line: 239,
              column: 16
            }
          },
          loc: {
            start: {
              line: 239,
              column: 26
            },
            end: {
              line: 241,
              column: 1
            }
          },
          line: 239
        },
        "24": {
          name: "(anonymous_24)",
          decl: {
            start: {
              line: 240,
              column: 31
            },
            end: {
              line: 240,
              column: 32
            }
          },
          loc: {
            start: {
              line: 240,
              column: 36
            },
            end: {
              line: 240,
              column: 72
            }
          },
          line: 240
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 16,
              column: 4
            },
            end: {
              line: 17,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 16,
              column: 4
            },
            end: {
              line: 17,
              column: 20
            }
          }, {
            start: {
              line: 16,
              column: 4
            },
            end: {
              line: 17,
              column: 20
            }
          }],
          line: 16
        },
        "1": {
          loc: {
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 20
            }
          }, {
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 20
            }
          }],
          line: 19
        },
        "2": {
          loc: {
            start: {
              line: 19,
              column: 8
            },
            end: {
              line: 19,
              column: 28
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 19,
              column: 8
            },
            end: {
              line: 19,
              column: 16
            }
          }, {
            start: {
              line: 19,
              column: 20
            },
            end: {
              line: 19,
              column: 28
            }
          }],
          line: 19
        },
        "3": {
          loc: {
            start: {
              line: 22,
              column: 4
            },
            end: {
              line: 25,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 22,
              column: 4
            },
            end: {
              line: 25,
              column: 5
            }
          }, {
            start: {
              line: 22,
              column: 4
            },
            end: {
              line: 25,
              column: 5
            }
          }],
          line: 22
        },
        "4": {
          loc: {
            start: {
              line: 24,
              column: 15
            },
            end: {
              line: 24,
              column: 51
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 24,
              column: 15
            },
            end: {
              line: 24,
              column: 25
            }
          }, {
            start: {
              line: 24,
              column: 29
            },
            end: {
              line: 24,
              column: 51
            }
          }],
          line: 24
        },
        "5": {
          loc: {
            start: {
              line: 47,
              column: 4
            },
            end: {
              line: 48,
              column: 30
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 47,
              column: 4
            },
            end: {
              line: 48,
              column: 30
            }
          }, {
            start: {
              line: 47,
              column: 4
            },
            end: {
              line: 48,
              column: 30
            }
          }],
          line: 47
        },
        "6": {
          loc: {
            start: {
              line: 109,
              column: 38
            },
            end: {
              line: 109,
              column: 75
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 109,
              column: 38
            },
            end: {
              line: 109,
              column: 52
            }
          }, {
            start: {
              line: 109,
              column: 56
            },
            end: {
              line: 109,
              column: 75
            }
          }],
          line: 109
        },
        "7": {
          loc: {
            start: {
              line: 120,
              column: 24
            },
            end: {
              line: 120,
              column: 51
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 120,
              column: 24
            },
            end: {
              line: 120,
              column: 35
            }
          }, {
            start: {
              line: 120,
              column: 39
            },
            end: {
              line: 120,
              column: 51
            }
          }],
          line: 120
        },
        "8": {
          loc: {
            start: {
              line: 121,
              column: 11
            },
            end: {
              line: 121,
              column: 53
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 121,
              column: 11
            },
            end: {
              line: 121,
              column: 24
            }
          }, {
            start: {
              line: 121,
              column: 28
            },
            end: {
              line: 121,
              column: 53
            }
          }],
          line: 121
        },
        "9": {
          loc: {
            start: {
              line: 131,
              column: 11
            },
            end: {
              line: 131,
              column: 104
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 131,
              column: 13
            },
            end: {
              line: 131,
              column: 24
            }
          }, {
            start: {
              line: 131,
              column: 28
            },
            end: {
              line: 131,
              column: 35
            }
          }, {
            start: {
              line: 131,
              column: 40
            },
            end: {
              line: 131,
              column: 55
            }
          }, {
            start: {
              line: 131,
              column: 62
            },
            end: {
              line: 131,
              column: 72
            }
          }, {
            start: {
              line: 131,
              column: 76
            },
            end: {
              line: 131,
              column: 83
            }
          }, {
            start: {
              line: 131,
              column: 88
            },
            end: {
              line: 131,
              column: 103
            }
          }],
          line: 131
        },
        "10": {
          loc: {
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 152,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 152,
              column: 5
            }
          }, {
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 152,
              column: 5
            }
          }],
          line: 142
        },
        "11": {
          loc: {
            start: {
              line: 142,
              column: 8
            },
            end: {
              line: 142,
              column: 48
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 142,
              column: 8
            },
            end: {
              line: 142,
              column: 26
            }
          }, {
            start: {
              line: 142,
              column: 30
            },
            end: {
              line: 142,
              column: 48
            }
          }],
          line: 142
        },
        "12": {
          loc: {
            start: {
              line: 144,
              column: 12
            },
            end: {
              line: 150,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 144,
              column: 12
            },
            end: {
              line: 150,
              column: 13
            }
          }, {
            start: {
              line: 144,
              column: 12
            },
            end: {
              line: 150,
              column: 13
            }
          }],
          line: 144
        },
        "13": {
          loc: {
            start: {
              line: 144,
              column: 16
            },
            end: {
              line: 144,
              column: 67
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 144,
              column: 16
            },
            end: {
              line: 144,
              column: 30
            }
          }, {
            start: {
              line: 144,
              column: 34
            },
            end: {
              line: 144,
              column: 67
            }
          }],
          line: 144
        },
        "14": {
          loc: {
            start: {
              line: 145,
              column: 26
            },
            end: {
              line: 145,
              column: 67
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 145,
              column: 26
            },
            end: {
              line: 145,
              column: 33
            }
          }, {
            start: {
              line: 145,
              column: 37
            },
            end: {
              line: 145,
              column: 67
            }
          }],
          line: 145
        },
        "15": {
          loc: {
            start: {
              line: 172,
              column: 4
            },
            end: {
              line: 187,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 172,
              column: 4
            },
            end: {
              line: 187,
              column: 5
            }
          }, {
            start: {
              line: 172,
              column: 4
            },
            end: {
              line: 187,
              column: 5
            }
          }],
          line: 172
        },
        "16": {
          loc: {
            start: {
              line: 177,
              column: 8
            },
            end: {
              line: 180,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 177,
              column: 8
            },
            end: {
              line: 180,
              column: 9
            }
          }, {
            start: {
              line: 177,
              column: 8
            },
            end: {
              line: 180,
              column: 9
            }
          }],
          line: 177
        },
        "17": {
          loc: {
            start: {
              line: 183,
              column: 12
            },
            end: {
              line: 185,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 183,
              column: 12
            },
            end: {
              line: 185,
              column: 13
            }
          }, {
            start: {
              line: 183,
              column: 12
            },
            end: {
              line: 185,
              column: 13
            }
          }],
          line: 183
        },
        "18": {
          loc: {
            start: {
              line: 198,
              column: 4
            },
            end: {
              line: 237,
              column: 5
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 199,
              column: 8
            },
            end: {
              line: 199,
              column: 15
            }
          }, {
            start: {
              line: 200,
              column: 8
            },
            end: {
              line: 201,
              column: 67
            }
          }, {
            start: {
              line: 202,
              column: 8
            },
            end: {
              line: 202,
              column: 15
            }
          }, {
            start: {
              line: 203,
              column: 8
            },
            end: {
              line: 204,
              column: 31
            }
          }, {
            start: {
              line: 205,
              column: 8
            },
            end: {
              line: 205,
              column: 15
            }
          }, {
            start: {
              line: 206,
              column: 8
            },
            end: {
              line: 207,
              column: 31
            }
          }, {
            start: {
              line: 208,
              column: 8
            },
            end: {
              line: 208,
              column: 15
            }
          }, {
            start: {
              line: 209,
              column: 8
            },
            end: {
              line: 210,
              column: 30
            }
          }, {
            start: {
              line: 211,
              column: 8
            },
            end: {
              line: 211,
              column: 15
            }
          }, {
            start: {
              line: 212,
              column: 8
            },
            end: {
              line: 213,
              column: 28
            }
          }, {
            start: {
              line: 214,
              column: 8
            },
            end: {
              line: 214,
              column: 15
            }
          }, {
            start: {
              line: 215,
              column: 8
            },
            end: {
              line: 216,
              column: 32
            }
          }, {
            start: {
              line: 217,
              column: 8
            },
            end: {
              line: 217,
              column: 15
            }
          }, {
            start: {
              line: 218,
              column: 8
            },
            end: {
              line: 219,
              column: 29
            }
          }, {
            start: {
              line: 220,
              column: 8
            },
            end: {
              line: 220,
              column: 16
            }
          }, {
            start: {
              line: 221,
              column: 8
            },
            end: {
              line: 222,
              column: 29
            }
          }, {
            start: {
              line: 223,
              column: 8
            },
            end: {
              line: 223,
              column: 16
            }
          }, {
            start: {
              line: 224,
              column: 8
            },
            end: {
              line: 225,
              column: 31
            }
          }, {
            start: {
              line: 226,
              column: 8
            },
            end: {
              line: 226,
              column: 16
            }
          }, {
            start: {
              line: 227,
              column: 8
            },
            end: {
              line: 228,
              column: 99
            }
          }, {
            start: {
              line: 229,
              column: 8
            },
            end: {
              line: 229,
              column: 16
            }
          }, {
            start: {
              line: 230,
              column: 8
            },
            end: {
              line: 231,
              column: 101
            }
          }, {
            start: {
              line: 232,
              column: 8
            },
            end: {
              line: 232,
              column: 16
            }
          }, {
            start: {
              line: 233,
              column: 8
            },
            end: {
              line: 234,
              column: 31
            }
          }, {
            start: {
              line: 235,
              column: 8
            },
            end: {
              line: 236,
              column: 25
            }
          }],
          line: 198
        },
        "19": {
          loc: {
            start: {
              line: 201,
              column: 19
            },
            end: {
              line: 201,
              column: 66
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 201,
              column: 19
            },
            end: {
              line: 201,
              column: 30
            }
          }, {
            start: {
              line: 201,
              column: 34
            },
            end: {
              line: 201,
              column: 66
            }
          }],
          line: 201
        },
        "20": {
          loc: {
            start: {
              line: 228,
              column: 19
            },
            end: {
              line: 228,
              column: 98
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 228,
              column: 19
            },
            end: {
              line: 228,
              column: 30
            }
          }, {
            start: {
              line: 228,
              column: 34
            },
            end: {
              line: 228,
              column: 46
            }
          }, {
            start: {
              line: 228,
              column: 50
            },
            end: {
              line: 228,
              column: 62
            }
          }, {
            start: {
              line: 228,
              column: 66
            },
            end: {
              line: 228,
              column: 98
            }
          }],
          line: 228
        },
        "21": {
          loc: {
            start: {
              line: 231,
              column: 19
            },
            end: {
              line: 231,
              column: 100
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 231,
              column: 19
            },
            end: {
              line: 231,
              column: 30
            }
          }, {
            start: {
              line: 231,
              column: 34
            },
            end: {
              line: 231,
              column: 47
            }
          }, {
            start: {
              line: 231,
              column: 51
            },
            end: {
              line: 231,
              column: 64
            }
          }, {
            start: {
              line: 231,
              column: 68
            },
            end: {
              line: 231,
              column: 100
            }
          }],
          line: 231
        },
        "22": {
          loc: {
            start: {
              line: 240,
              column: 36
            },
            end: {
              line: 240,
              column: 72
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 240,
              column: 36
            },
            end: {
              line: 240,
              column: 61
            }
          }, {
            start: {
              line: 240,
              column: 65
            },
            end: {
              line: 240,
              column: 72
            }
          }],
          line: 240
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0, 0, 0, 0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        "19": [0, 0],
        "20": [0, 0, 0, 0],
        "21": [0, 0, 0, 0],
        "22": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "19ab4ff62e5498b94e2985d6838f60318378fff2"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1oso1119ga = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1oso1119ga();
  /**
   * Checks that two values are equal.
   *
   * @param a         The lhs operand as resolved from the object by the given selector
   * @param b         The rhs operand provided by the user
   * @returns {*}
   */

  function $eq(a, b) {
    cov_1oso1119ga().f[0]++;
    cov_1oso1119ga().s[0]++;

    // start with simple equality check
    if (isEqual(a, b)) {
      cov_1oso1119ga().b[0][0]++;
      cov_1oso1119ga().s[1]++;
      return true;
    } else {
      cov_1oso1119ga().b[0][1]++;
    } // https://docs.mongodb.com/manual/tutorial/query-for-null-fields/


    cov_1oso1119ga().s[2]++;

    if ((cov_1oso1119ga().b[2][0]++, isNil(a)) && (cov_1oso1119ga().b[2][1]++, isNil(b))) {
      cov_1oso1119ga().b[1][0]++;
      cov_1oso1119ga().s[3]++;
      return true;
    } else {
      cov_1oso1119ga().b[1][1]++;
    } // check


    cov_1oso1119ga().s[4]++;

    if (a instanceof Array) {
      cov_1oso1119ga().b[3][0]++;
      var eq = (cov_1oso1119ga().s[5]++, isEqual.bind(null, b));
      cov_1oso1119ga().s[6]++;
      return (cov_1oso1119ga().b[4][0]++, a.some(eq)) || (cov_1oso1119ga().b[4][1]++, flatten(a, 1).some(eq));
    } else {
      cov_1oso1119ga().b[3][1]++;
    }

    cov_1oso1119ga().s[7]++;
    return false;
  }
  /**
   * Matches all values that are not equal to the value specified in the query.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $ne(a, b) {
    cov_1oso1119ga().f[1]++;
    cov_1oso1119ga().s[8]++;
    return !$eq(a, b);
  }
  /**
   * Matches any of the values that exist in an array specified in the query.
   *
   * @param a
   * @param b
   * @returns {*}
   */

  function $in$1(a, b) {
    cov_1oso1119ga().f[2]++;
    cov_1oso1119ga().s[9]++;

    // queries for null should be able to find undefined fields
    if (isNil(a)) {
      cov_1oso1119ga().b[5][0]++;
      cov_1oso1119ga().s[10]++;
      return b.some(isNull);
    } else {
      cov_1oso1119ga().b[5][1]++;
    }

    cov_1oso1119ga().s[11]++;
    return intersection(ensureArray(a), b).length > 0;
  }
  /**
   * Matches values that do not exist in an array specified to the query.
   *
   * @param a
   * @param b
   * @returns {*|boolean}
   */

  function $nin(a, b) {
    cov_1oso1119ga().f[3]++;
    cov_1oso1119ga().s[12]++;
    return !$in$1(a, b);
  }
  /**
   * Matches values that are less than the value specified in the query.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $lt(a, b) {
    cov_1oso1119ga().f[4]++;
    cov_1oso1119ga().s[13]++;
    return compare$1(a, b, function (x, y) {
      cov_1oso1119ga().f[5]++;
      cov_1oso1119ga().s[14]++;
      return x < y;
    });
  }
  /**
   * Matches values that are less than or equal to the value specified in the query.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $lte(a, b) {
    cov_1oso1119ga().f[6]++;
    cov_1oso1119ga().s[15]++;
    return compare$1(a, b, function (x, y) {
      cov_1oso1119ga().f[7]++;
      cov_1oso1119ga().s[16]++;
      return x <= y;
    });
  }
  /**
   * Matches values that are greater than the value specified in the query.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $gt(a, b) {
    cov_1oso1119ga().f[8]++;
    cov_1oso1119ga().s[17]++;
    return compare$1(a, b, function (x, y) {
      cov_1oso1119ga().f[9]++;
      cov_1oso1119ga().s[18]++;
      return x > y;
    });
  }
  /**
   * Matches values that are greater than or equal to the value specified in the query.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $gte(a, b) {
    cov_1oso1119ga().f[10]++;
    cov_1oso1119ga().s[19]++;
    return compare$1(a, b, function (x, y) {
      cov_1oso1119ga().f[11]++;
      cov_1oso1119ga().s[20]++;
      return x >= y;
    });
  }
  /**
   * Performs a modulo operation on the value of a field and selects documents with a specified result.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $mod$1(a, b) {
    cov_1oso1119ga().f[12]++;
    cov_1oso1119ga().s[21]++;
    return ensureArray(a).some(function (x) {
      cov_1oso1119ga().f[13]++;
      cov_1oso1119ga().s[22]++;
      return (cov_1oso1119ga().b[6][0]++, b.length === 2) && (cov_1oso1119ga().b[6][1]++, x % b[0] === b[1]);
    });
  }
  /**
   * Selects documents where values match a specified regular expression.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $regex(a, b) {
    cov_1oso1119ga().f[14]++;
    cov_1oso1119ga().s[23]++;
    a = ensureArray(a);
    cov_1oso1119ga().s[24]++;

    var match = function match(x) {
      cov_1oso1119ga().f[15]++;
      cov_1oso1119ga().s[25]++;
      return (cov_1oso1119ga().b[7][0]++, isString(x)) && (cov_1oso1119ga().b[7][1]++, !!x.match(b));
    };

    cov_1oso1119ga().s[26]++;
    return (cov_1oso1119ga().b[8][0]++, a.some(match)) || (cov_1oso1119ga().b[8][1]++, flatten(a, 1).some(match));
  }
  /**
   * Matches documents that have the specified field.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $exists(a, b) {
    cov_1oso1119ga().f[16]++;
    cov_1oso1119ga().s[27]++;
    return ((cov_1oso1119ga().b[9][0]++, b === false) || (cov_1oso1119ga().b[9][1]++, b === 0)) && (cov_1oso1119ga().b[9][2]++, a === undefined) || ((cov_1oso1119ga().b[9][3]++, b === true) || (cov_1oso1119ga().b[9][4]++, b === 1)) && (cov_1oso1119ga().b[9][5]++, a !== undefined);
  }
  /**
   * Matches arrays that contain all elements specified in the query.
   *
   * @param a
   * @param b
   * @returns boolean
   */

  function $all(a, b) {
    cov_1oso1119ga().f[17]++;
    var matched = (cov_1oso1119ga().s[28]++, false);
    cov_1oso1119ga().s[29]++;

    if ((cov_1oso1119ga().b[11][0]++, a instanceof Array) && (cov_1oso1119ga().b[11][1]++, b instanceof Array)) {
      cov_1oso1119ga().b[10][0]++;
      cov_1oso1119ga().s[30]++;

      for (var i = (cov_1oso1119ga().s[31]++, 0), len = (cov_1oso1119ga().s[32]++, b.length); i < len; i++) {
        cov_1oso1119ga().s[33]++;

        if ((cov_1oso1119ga().b[13][0]++, isObject(b[i])) && (cov_1oso1119ga().b[13][1]++, inArray(keys(b[i]), '$elemMatch'))) {
          cov_1oso1119ga().b[12][0]++;
          cov_1oso1119ga().s[34]++;
          matched = (cov_1oso1119ga().b[14][0]++, matched) || (cov_1oso1119ga().b[14][1]++, $elemMatch(a, b[i].$elemMatch));
        } else {
          cov_1oso1119ga().b[12][1]++;
          cov_1oso1119ga().s[35]++;
          // order of arguments matter
          return intersection(b, a).length === len;
        }
      }
    } else {
      cov_1oso1119ga().b[10][1]++;
    }

    cov_1oso1119ga().s[36]++;
    return matched;
  }
  /**
   * Selects documents if the array field is a specified size.
   *
   * @param a
   * @param b
   * @returns {*|boolean}
   */

  function $size$1(a, b) {
    cov_1oso1119ga().f[18]++;
    cov_1oso1119ga().s[37]++;
    return a.length === b;
  }
  /**
   * Selects documents if element in the array field matches all the specified $elemMatch condition.
   *
   * @param a {Array} element to match against
   * @param b {Object} subquery
   */

  function $elemMatch(a, b) {
    cov_1oso1119ga().f[19]++;
    cov_1oso1119ga().s[38]++;

    if (a.length > 0) {
      cov_1oso1119ga().b[15][0]++;
      cov_1oso1119ga().s[39]++;

      var format = function format(x) {
        cov_1oso1119ga().f[20]++;
        cov_1oso1119ga().s[40]++;
        return x;
      };

      var criteria = (cov_1oso1119ga().s[41]++, b); // If we find an operator in the subquery, we fake a field to point to it.
      // This is an attempt to ensure that it a valid criteria.

      cov_1oso1119ga().s[42]++;

      if (keys(b).every(isOperator)) {
        cov_1oso1119ga().b[16][0]++;
        cov_1oso1119ga().s[43]++;
        criteria = {
          temp: b
        };
        cov_1oso1119ga().s[44]++;

        format = function format(x) {
          cov_1oso1119ga().f[21]++;
          cov_1oso1119ga().s[45]++;
          return {
            temp: x
          };
        };
      } else {
        cov_1oso1119ga().b[16][1]++;
      }

      var query = (cov_1oso1119ga().s[46]++, new Query(criteria));
      cov_1oso1119ga().s[47]++;

      for (var i = (cov_1oso1119ga().s[48]++, 0), len = (cov_1oso1119ga().s[49]++, a.length); i < len; i++) {
        cov_1oso1119ga().s[50]++;

        if (query.test(format(a[i]))) {
          cov_1oso1119ga().b[17][0]++;
          cov_1oso1119ga().s[51]++;
          return true;
        } else {
          cov_1oso1119ga().b[17][1]++;
        }
      }
    } else {
      cov_1oso1119ga().b[15][1]++;
    }

    cov_1oso1119ga().s[52]++;
    return false;
  }
  /**
   * Selects documents if a field is of the specified type.
   *
   * @param a
   * @param b
   * @returns {boolean}
   */

  function $type(a, b) {
    cov_1oso1119ga().f[22]++;
    cov_1oso1119ga().s[53]++;

    switch (b) {
      case 1:
        cov_1oso1119ga().b[18][0]++;

      case 'double':
        cov_1oso1119ga().b[18][1]++;
        cov_1oso1119ga().s[54]++;
        return (cov_1oso1119ga().b[19][0]++, isNumber(a)) && (cov_1oso1119ga().b[19][1]++, a.toString().indexOf('.') !== -1);

      case 2:
        cov_1oso1119ga().b[18][2]++;

      case T_STRING:
        cov_1oso1119ga().b[18][3]++;
        cov_1oso1119ga().s[55]++;
        return isString(a);

      case 3:
        cov_1oso1119ga().b[18][4]++;

      case T_OBJECT:
        cov_1oso1119ga().b[18][5]++;
        cov_1oso1119ga().s[56]++;
        return isObject(a);

      case 4:
        cov_1oso1119ga().b[18][6]++;

      case T_ARRAY:
        cov_1oso1119ga().b[18][7]++;
        cov_1oso1119ga().s[57]++;
        return isArray(a);

      case 6:
        cov_1oso1119ga().b[18][8]++;

      case T_UNDEFINED:
        cov_1oso1119ga().b[18][9]++;
        cov_1oso1119ga().s[58]++;
        return isNil(a);

      case 8:
        cov_1oso1119ga().b[18][10]++;

      case T_BOOL:
        cov_1oso1119ga().b[18][11]++;
        cov_1oso1119ga().s[59]++;
        return isBoolean(a);

      case 9:
        cov_1oso1119ga().b[18][12]++;

      case T_DATE:
        cov_1oso1119ga().b[18][13]++;
        cov_1oso1119ga().s[60]++;
        return isDate(a);

      case 10:
        cov_1oso1119ga().b[18][14]++;

      case T_NULL:
        cov_1oso1119ga().b[18][15]++;
        cov_1oso1119ga().s[61]++;
        return isNull(a);

      case 11:
        cov_1oso1119ga().b[18][16]++;

      case T_REGEX:
        cov_1oso1119ga().b[18][17]++;
        cov_1oso1119ga().s[62]++;
        return isRegExp(a);

      case 16:
        cov_1oso1119ga().b[18][18]++;

      case 'int':
        cov_1oso1119ga().b[18][19]++;
        cov_1oso1119ga().s[63]++;
        return (cov_1oso1119ga().b[20][0]++, isNumber(a)) && (cov_1oso1119ga().b[20][1]++, a >= MIN_INT) && (cov_1oso1119ga().b[20][2]++, a <= MAX_INT) && (cov_1oso1119ga().b[20][3]++, a.toString().indexOf('.') === -1);

      case 18:
        cov_1oso1119ga().b[18][20]++;

      case 'long':
        cov_1oso1119ga().b[18][21]++;
        cov_1oso1119ga().s[64]++;
        return (cov_1oso1119ga().b[21][0]++, isNumber(a)) && (cov_1oso1119ga().b[21][1]++, a >= MIN_LONG) && (cov_1oso1119ga().b[21][2]++, a <= MAX_LONG) && (cov_1oso1119ga().b[21][3]++, a.toString().indexOf('.') === -1);

      case 19:
        cov_1oso1119ga().b[18][22]++;

      case 'decimal':
        cov_1oso1119ga().b[18][23]++;
        cov_1oso1119ga().s[65]++;
        return isNumber(a);

      default:
        cov_1oso1119ga().b[18][24]++;
        cov_1oso1119ga().s[66]++;
        return false;
    }
  }

  function compare$1(a, b, f) {
    cov_1oso1119ga().f[23]++;
    cov_1oso1119ga().s[67]++;
    return ensureArray(a).some(function (x) {
      cov_1oso1119ga().f[24]++;
      cov_1oso1119ga().s[68]++;
      return (cov_1oso1119ga().b[22][0]++, getType(x) === getType(b)) && (cov_1oso1119ga().b[22][1]++, f(x, b));
    });
  }

  function cov_3dlh53b5v() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/comparison.js";
    var hash = "2e3737f9c647c294a177c87ececd2deb3ade24f2";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/comparison.js",
      statementMap: {
        "0": {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 7,
            column: 6
          }
        },
        "1": {
          start: {
            line: 5,
            column: 19
          },
          end: {
            line: 5,
            column: 42
          }
        },
        "2": {
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 6,
            column: 35
          }
        },
        "3": {
          start: {
            line: 9,
            column: 19
          },
          end: {
            line: 9,
            column: 51
          }
        },
        "4": {
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 51
          }
        },
        "5": {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 53
          }
        },
        "6": {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 51
          }
        },
        "7": {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 53
          }
        },
        "8": {
          start: {
            line: 14,
            column: 19
          },
          end: {
            line: 14,
            column: 51
          }
        },
        "9": {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 53
          }
        },
        "10": {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 38
          }
        },
        "11": {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 26,
            column: 17
          }
        },
        "12": {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 17
          }
        },
        "13": {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 28,
            column: 18
          }
        },
        "14": {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 18
          }
        },
        "15": {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 13
          }
        }
      },
      fnMap: {
        "0": {
          name: "createComparison",
          decl: {
            start: {
              line: 3,
              column: 9
            },
            end: {
              line: 3,
              column: 25
            }
          },
          loc: {
            start: {
              line: 3,
              column: 29
            },
            end: {
              line: 8,
              column: 1
            }
          },
          line: 3
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 4,
              column: 11
            },
            end: {
              line: 4,
              column: 12
            }
          },
          loc: {
            start: {
              line: 4,
              column: 26
            },
            end: {
              line: 7,
              column: 5
            }
          },
          line: 4
        },
        "2": {
          name: "$cmp",
          decl: {
            start: {
              line: 23,
              column: 16
            },
            end: {
              line: 23,
              column: 20
            }
          },
          loc: {
            start: {
              line: 23,
              column: 32
            },
            end: {
              line: 30,
              column: 1
            }
          },
          line: 23
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 25,
              column: 4
            },
            end: {
              line: 26,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 25,
              column: 4
            },
            end: {
              line: 26,
              column: 17
            }
          }, {
            start: {
              line: 25,
              column: 4
            },
            end: {
              line: 26,
              column: 17
            }
          }],
          line: 25
        },
        "1": {
          loc: {
            start: {
              line: 27,
              column: 4
            },
            end: {
              line: 28,
              column: 18
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 27,
              column: 4
            },
            end: {
              line: 28,
              column: 18
            }
          }, {
            start: {
              line: 27,
              column: 4
            },
            end: {
              line: 28,
              column: 18
            }
          }],
          line: 27
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "2e3737f9c647c294a177c87ececd2deb3ade24f2"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_3dlh53b5v = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_3dlh53b5v();

  function createComparison(f) {
    cov_3dlh53b5v().f[0]++;
    cov_3dlh53b5v().s[0]++;
    return function (obj, expr) {
      cov_3dlh53b5v().f[1]++;
      var args = (cov_3dlh53b5v().s[1]++, computeValue(obj, expr));
      cov_3dlh53b5v().s[2]++;
      return f(args[0], args[1]);
    };
  }

  var $eq$1 = (cov_3dlh53b5v().s[3]++, createComparison($eq));
  var $gt$1 = (cov_3dlh53b5v().s[4]++, createComparison($gt));
  var $gte$1 = (cov_3dlh53b5v().s[5]++, createComparison($gte));
  var $lt$1 = (cov_3dlh53b5v().s[6]++, createComparison($lt));
  var $lte$1 = (cov_3dlh53b5v().s[7]++, createComparison($lte));
  var $ne$1 = (cov_3dlh53b5v().s[8]++, createComparison($ne));
  var $nin$1 = (cov_3dlh53b5v().s[9]++, createComparison($nin));
  /**
   * Compares two values and returns the result of the comparison as an integer.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $cmp(obj, expr) {
    cov_3dlh53b5v().f[2]++;
    var args = (cov_3dlh53b5v().s[10]++, computeValue(obj, expr));
    cov_3dlh53b5v().s[11]++;

    if (args[0] > args[1]) {
      cov_3dlh53b5v().b[0][0]++;
      cov_3dlh53b5v().s[12]++;
      return 1;
    } else {
      cov_3dlh53b5v().b[0][1]++;
    }

    cov_3dlh53b5v().s[13]++;

    if (args[0] < args[1]) {
      cov_3dlh53b5v().b[1][0]++;
      cov_3dlh53b5v().s[14]++;
      return -1;
    } else {
      cov_3dlh53b5v().b[1][1]++;
    }

    cov_3dlh53b5v().s[15]++;
    return 0;
  }

  function cov_2bfks1tl9o() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/conditional.js";
    var hash = "0e53f9b7e19e284f77d55812767dad3c9656c4bd";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/conditional.js",
      statementMap: {
        "0": {
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 47
          }
        },
        "1": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        "2": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 44
          }
        },
        "3": {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 25
          }
        },
        "4": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 27
          }
        },
        "5": {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 27
          }
        },
        "6": {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 41
          }
        },
        "7": {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 25
          }
        },
        "8": {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 29
          }
        },
        "9": {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 29
          }
        },
        "10": {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 45
          }
        },
        "11": {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 81
          }
        },
        "12": {
          start: {
            line: 42,
            column: 22
          },
          end: {
            line: 44,
            column: 6
          }
        },
        "13": {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 46
          }
        },
        "14": {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 78
          }
        },
        "15": {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 94
          }
        },
        "16": {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 57,
            column: 38
          }
        },
        "17": {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 46
          }
        }
      },
      fnMap: {
        "0": {
          name: "$cond",
          decl: {
            start: {
              line: 13,
              column: 16
            },
            end: {
              line: 13,
              column: 21
            }
          },
          loc: {
            start: {
              line: 13,
              column: 33
            },
            end: {
              line: 32,
              column: 1
            }
          },
          line: 13
        },
        "1": {
          name: "$switch",
          decl: {
            start: {
              line: 41,
              column: 16
            },
            end: {
              line: 41,
              column: 23
            }
          },
          loc: {
            start: {
              line: 41,
              column: 35
            },
            end: {
              line: 46,
              column: 1
            }
          },
          line: 41
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 42,
              column: 41
            },
            end: {
              line: 42,
              column: 42
            }
          },
          loc: {
            start: {
              line: 42,
              column: 53
            },
            end: {
              line: 44,
              column: 5
            }
          },
          line: 42
        },
        "3": {
          name: "$ifNull",
          decl: {
            start: {
              line: 55,
              column: 16
            },
            end: {
              line: 55,
              column: 23
            }
          },
          loc: {
            start: {
              line: 55,
              column: 35
            },
            end: {
              line: 59,
              column: 1
            }
          },
          line: 55
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 18,
              column: 4
            },
            end: {
              line: 29,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 18,
              column: 4
            },
            end: {
              line: 29,
              column: 5
            }
          }, {
            start: {
              line: 18,
              column: 4
            },
            end: {
              line: 29,
              column: 5
            }
          }],
          line: 18
        },
        "1": {
          loc: {
            start: {
              line: 31,
              column: 11
            },
            end: {
              line: 31,
              column: 80
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 31,
              column: 23
            },
            end: {
              line: 31,
              column: 50
            }
          }, {
            start: {
              line: 31,
              column: 53
            },
            end: {
              line: 31,
              column: 80
            }
          }],
          line: 31
        },
        "2": {
          loc: {
            start: {
              line: 45,
              column: 29
            },
            end: {
              line: 45,
              column: 76
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 45,
              column: 45
            },
            end: {
              line: 45,
              column: 61
            }
          }, {
            start: {
              line: 45,
              column: 64
            },
            end: {
              line: 45,
              column: 76
            }
          }],
          line: 45
        },
        "3": {
          loc: {
            start: {
              line: 56,
              column: 11
            },
            end: {
              line: 56,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 56,
              column: 11
            },
            end: {
              line: 56,
              column: 24
            }
          }, {
            start: {
              line: 56,
              column: 28
            },
            end: {
              line: 56,
              column: 45
            }
          }],
          line: 56
        },
        "4": {
          loc: {
            start: {
              line: 58,
              column: 11
            },
            end: {
              line: 58,
              column: 45
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 58,
              column: 28
            },
            end: {
              line: 58,
              column: 35
            }
          }, {
            start: {
              line: 58,
              column: 38
            },
            end: {
              line: 58,
              column: 45
            }
          }],
          line: 58
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "0e53f9b7e19e284f77d55812767dad3c9656c4bd"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2bfks1tl9o = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2bfks1tl9o();
  /**
   * A ternary operator that evaluates one expression,
   * and depending on the result returns the value of one following expressions.
   *
   * @param obj
   * @param expr
   */

  function $cond(obj, expr) {
    cov_2bfks1tl9o().f[0]++;
    var ifExpr;
    var thenExpr;
    var elseExpr;
    var errorMsg = (cov_2bfks1tl9o().s[0]++, '$cond: invalid arguments');
    cov_2bfks1tl9o().s[1]++;

    if (expr instanceof Array) {
      cov_2bfks1tl9o().b[0][0]++;
      cov_2bfks1tl9o().s[2]++;
      assert(expr.length === 3, errorMsg);
      cov_2bfks1tl9o().s[3]++;
      ifExpr = expr[0];
      cov_2bfks1tl9o().s[4]++;
      thenExpr = expr[1];
      cov_2bfks1tl9o().s[5]++;
      elseExpr = expr[2];
    } else {
      cov_2bfks1tl9o().b[0][1]++;
      cov_2bfks1tl9o().s[6]++;
      assert(isObject(expr), errorMsg);
      cov_2bfks1tl9o().s[7]++;
      ifExpr = expr["if"];
      cov_2bfks1tl9o().s[8]++;
      thenExpr = expr.then;
      cov_2bfks1tl9o().s[9]++;
      elseExpr = expr["else"];
    }

    var condition = (cov_2bfks1tl9o().s[10]++, computeValue(obj, ifExpr));
    cov_2bfks1tl9o().s[11]++;
    return condition ? (cov_2bfks1tl9o().b[1][0]++, computeValue(obj, thenExpr)) : (cov_2bfks1tl9o().b[1][1]++, computeValue(obj, elseExpr));
  }
  /**
   * An operator that evaluates a series of case expressions. When it finds an expression which
   * evaluates to true, it returns the resulting expression for that case. If none of the cases
   * evaluate to true, it returns the default expression.
   *
   * @param obj
   * @param expr
   */

  function $switch(obj, expr) {
    cov_2bfks1tl9o().f[1]++;
    var validBranch = (cov_2bfks1tl9o().s[12]++, expr.branches.find(function (branch) {
      cov_2bfks1tl9o().f[2]++;
      cov_2bfks1tl9o().s[13]++;
      return computeValue(obj, branch["case"]);
    }));
    cov_2bfks1tl9o().s[14]++;
    return computeValue(obj, !!validBranch ? (cov_2bfks1tl9o().b[2][0]++, validBranch.then) : (cov_2bfks1tl9o().b[2][1]++, expr["default"]));
  }
  /**
   * Evaluates an expression and returns the first expression if it evaluates to a non-null value.
   * Otherwise, $ifNull returns the second expression's value.
   *
   * @param obj
   * @param expr
   * @returns {*}
   */

  function $ifNull(obj, expr) {
    cov_2bfks1tl9o().f[3]++;
    cov_2bfks1tl9o().s[15]++;
    assert((cov_2bfks1tl9o().b[3][0]++, isArray(expr)) && (cov_2bfks1tl9o().b[3][1]++, expr.length === 2), '$ifNull expression must resolve to array(2)');
    var args = (cov_2bfks1tl9o().s[16]++, computeValue(obj, expr));
    cov_2bfks1tl9o().s[17]++;
    return isNil(args[0]) ? (cov_2bfks1tl9o().b[4][0]++, args[1]) : (cov_2bfks1tl9o().b[4][1]++, args[0]);
  }

  function cov_17tdgv1005() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/date.js";
    var hash = "e2390fe74032a9d9689135b8b97cfa8d373cd870";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/date.js",
      statementMap: {
        "0": {
          start: {
            line: 3,
            column: 23
          },
          end: {
            line: 3,
            column: 42
          }
        },
        "1": {
          start: {
            line: 8,
            column: 12
          },
          end: {
            line: 8,
            column: 35
          }
        },
        "2": {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 10,
            column: 17
          }
        },
        "3": {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 17
          }
        },
        "4": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 12,
            column: 59
          }
        },
        "5": {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 59
          }
        },
        "6": {
          start: {
            line: 13,
            column: 13
          },
          end: {
            line: 13,
            column: 14
          }
        },
        "7": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        "8": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 58
          }
        },
        "9": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 38
          }
        },
        "10": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 20
          }
        },
        "11": {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 20,
            column: 53
          }
        },
        "12": {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 53
          }
        },
        "13": {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 40
          }
        },
        "14": {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 13
          }
        },
        "15": {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 34
          }
        },
        "16": {
          start: {
            line: 31,
            column: 16
          },
          end: {
            line: 31,
            column: 50
          }
        },
        "17": {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 44
          }
        },
        "18": {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 45
          }
        },
        "19": {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 41,
            column: 34
          }
        },
        "20": {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 26
          }
        },
        "21": {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 34
          }
        },
        "22": {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 29
          }
        },
        "23": {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 34
          }
        },
        "24": {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 30
          }
        },
        "25": {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 34
          }
        },
        "26": {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 31
          }
        },
        "27": {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 34
          }
        },
        "28": {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 21
          }
        },
        "29": {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 24
          }
        },
        "30": {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 51
          }
        },
        "31": {
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 87,
            column: 51
          }
        },
        "32": {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 80
          }
        },
        "33": {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 34
          }
        },
        "34": {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 27
          }
        },
        "35": {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 34
          }
        },
        "36": {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 29
          }
        },
        "37": {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 115,
            column: 34
          }
        },
        "38": {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 29
          }
        },
        "39": {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 34
          }
        },
        "40": {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 34
          }
        },
        "41": {
          start: {
            line: 128,
            column: 23
          },
          end: {
            line: 142,
            column: 1
          }
        },
        "42": {
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 148,
            column: 36
          }
        },
        "43": {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 150,
            column: 17
          }
        },
        "44": {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 150,
            column: 17
          }
        },
        "45": {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 152,
            column: 81
          }
        },
        "46": {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 81
          }
        },
        "47": {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 40
          }
        },
        "48": {
          start: {
            line: 176,
            column: 17
          },
          end: {
            line: 176,
            column: 47
          }
        },
        "49": {
          start: {
            line: 177,
            column: 15
          },
          end: {
            line: 177,
            column: 43
          }
        },
        "50": {
          start: {
            line: 178,
            column: 18
          },
          end: {
            line: 178,
            column: 75
          }
        },
        "51": {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        "52": {
          start: {
            line: 179,
            column: 17
          },
          end: {
            line: 179,
            column: 18
          }
        },
        "53": {
          start: {
            line: 179,
            column: 26
          },
          end: {
            line: 179,
            column: 40
          }
        },
        "54": {
          start: {
            line: 180,
            column: 19
          },
          end: {
            line: 180,
            column: 45
          }
        },
        "55": {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        "56": {
          start: {
            line: 184,
            column: 21
          },
          end: {
            line: 184,
            column: 28
          }
        },
        "57": {
          start: {
            line: 185,
            column: 22
          },
          end: {
            line: 185,
            column: 29
          }
        },
        "58": {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 50
          }
        },
        "59": {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 189,
            column: 25
          }
        },
        "60": {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 192,
            column: 51
          }
        },
        "61": {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 18
          }
        },
        "62": {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 79
          }
        },
        "63": {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 202,
            column: 7
          }
        },
        "64": {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 35
          }
        },
        "65": {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 13
          }
        },
        "66": {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 51
          }
        },
        "67": {
          start: {
            line: 208,
            column: 33
          },
          end: {
            line: 208,
            column: 90
          }
        },
        "68": {
          start: {
            line: 215,
            column: 14
          },
          end: {
            line: 215,
            column: 31
          }
        },
        "69": {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 218,
            column: 7
          }
        },
        "70": {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 217,
            column: 44
          }
        },
        "71": {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 55
          }
        },
        "72": {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 36
          }
        },
        "73": {
          start: {
            line: 221,
            column: 21
          },
          end: {
            line: 221,
            column: 35
          }
        },
        "74": {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 223,
            column: 26
          }
        },
        "75": {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 223,
            column: 26
          }
        },
        "76": {
          start: {
            line: 225,
            column: 21
          },
          end: {
            line: 225,
            column: 56
          }
        },
        "77": {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 25
          }
        },
        "78": {
          start: {
            line: 227,
            column: 18
          },
          end: {
            line: 227,
            column: 79
          }
        },
        "79": {
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 228,
            column: 37
          }
        },
        "80": {
          start: {
            line: 230,
            column: 26
          },
          end: {
            line: 230,
            column: 28
          }
        },
        "81": {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        "82": {
          start: {
            line: 231,
            column: 17
          },
          end: {
            line: 231,
            column: 18
          }
        },
        "83": {
          start: {
            line: 231,
            column: 26
          },
          end: {
            line: 231,
            column: 40
          }
        },
        "84": {
          start: {
            line: 232,
            column: 30
          },
          end: {
            line: 232,
            column: 40
          }
        },
        "85": {
          start: {
            line: 233,
            column: 19
          },
          end: {
            line: 233,
            column: 50
          }
        },
        "86": {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        "87": {
          start: {
            line: 236,
            column: 23
          },
          end: {
            line: 236,
            column: 30
          }
        },
        "88": {
          start: {
            line: 237,
            column: 26
          },
          end: {
            line: 237,
            column: 33
          }
        },
        "89": {
          start: {
            line: 238,
            column: 20
          },
          end: {
            line: 238,
            column: 45
          }
        },
        "90": {
          start: {
            line: 240,
            column: 28
          },
          end: {
            line: 240,
            column: 50
          }
        },
        "91": {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        "92": {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 243,
            column: 78
          }
        },
        "93": {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 102
          }
        },
        "94": {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 92
          }
        },
        "95": {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 39
          }
        },
        "96": {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 259,
            column: 27
          }
        },
        "97": {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 259,
            column: 27
          }
        },
        "98": {
          start: {
            line: 260,
            column: 13
          },
          end: {
            line: 260,
            column: 40
          }
        },
        "99": {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 262,
            column: 92
          }
        },
        "100": {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 264,
            column: 43
          }
        },
        "101": {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 264,
            column: 43
          }
        },
        "102": {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 266,
            column: 42
          }
        },
        "103": {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 42
          }
        },
        "104": {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 268,
            column: 42
          }
        },
        "105": {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 42
          }
        },
        "106": {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 270,
            column: 52
          }
        },
        "107": {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 270,
            column: 52
          }
        },
        "108": {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 13
          }
        }
      },
      fnMap: {
        "0": {
          name: "computeDate",
          decl: {
            start: {
              line: 7,
              column: 9
            },
            end: {
              line: 7,
              column: 20
            }
          },
          loc: {
            start: {
              line: 7,
              column: 32
            },
            end: {
              line: 23,
              column: 1
            }
          },
          line: 7
        },
        "1": {
          name: "$dayOfYear",
          decl: {
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 29,
              column: 26
            }
          },
          loc: {
            start: {
              line: 29,
              column: 38
            },
            end: {
              line: 34,
              column: 1
            }
          },
          line: 29
        },
        "2": {
          name: "$dayOfMonth",
          decl: {
            start: {
              line: 40,
              column: 16
            },
            end: {
              line: 40,
              column: 27
            }
          },
          loc: {
            start: {
              line: 40,
              column: 39
            },
            end: {
              line: 43,
              column: 1
            }
          },
          line: 40
        },
        "3": {
          name: "$dayOfWeek",
          decl: {
            start: {
              line: 49,
              column: 16
            },
            end: {
              line: 49,
              column: 26
            }
          },
          loc: {
            start: {
              line: 49,
              column: 38
            },
            end: {
              line: 52,
              column: 1
            }
          },
          line: 49
        },
        "4": {
          name: "$year",
          decl: {
            start: {
              line: 58,
              column: 16
            },
            end: {
              line: 58,
              column: 21
            }
          },
          loc: {
            start: {
              line: 58,
              column: 33
            },
            end: {
              line: 61,
              column: 1
            }
          },
          line: 58
        },
        "5": {
          name: "$month",
          decl: {
            start: {
              line: 67,
              column: 16
            },
            end: {
              line: 67,
              column: 22
            }
          },
          loc: {
            start: {
              line: 67,
              column: 34
            },
            end: {
              line: 70,
              column: 1
            }
          },
          line: 67
        },
        "6": {
          name: "$week",
          decl: {
            start: {
              line: 77,
              column: 16
            },
            end: {
              line: 77,
              column: 21
            }
          },
          loc: {
            start: {
              line: 77,
              column: 33
            },
            end: {
              line: 90,
              column: 1
            }
          },
          line: 77
        },
        "7": {
          name: "$hour",
          decl: {
            start: {
              line: 96,
              column: 16
            },
            end: {
              line: 96,
              column: 21
            }
          },
          loc: {
            start: {
              line: 96,
              column: 33
            },
            end: {
              line: 99,
              column: 1
            }
          },
          line: 96
        },
        "8": {
          name: "$minute",
          decl: {
            start: {
              line: 105,
              column: 16
            },
            end: {
              line: 105,
              column: 23
            }
          },
          loc: {
            start: {
              line: 105,
              column: 35
            },
            end: {
              line: 108,
              column: 1
            }
          },
          line: 105
        },
        "9": {
          name: "$second",
          decl: {
            start: {
              line: 114,
              column: 16
            },
            end: {
              line: 114,
              column: 23
            }
          },
          loc: {
            start: {
              line: 114,
              column: 35
            },
            end: {
              line: 117,
              column: 1
            }
          },
          line: 114
        },
        "10": {
          name: "$millisecond",
          decl: {
            start: {
              line: 123,
              column: 16
            },
            end: {
              line: 123,
              column: 28
            }
          },
          loc: {
            start: {
              line: 123,
              column: 40
            },
            end: {
              line: 126,
              column: 1
            }
          },
          line: 123
        },
        "11": {
          name: "parseTimezone",
          decl: {
            start: {
              line: 147,
              column: 9
            },
            end: {
              line: 147,
              column: 22
            }
          },
          loc: {
            start: {
              line: 147,
              column: 30
            },
            end: {
              line: 154,
              column: 1
            }
          },
          line: 147
        },
        "12": {
          name: "$dateToString",
          decl: {
            start: {
              line: 175,
              column: 16
            },
            end: {
              line: 175,
              column: 29
            }
          },
          loc: {
            start: {
              line: 175,
              column: 41
            },
            end: {
              line: 195,
              column: 1
            }
          },
          line: 175
        },
        "13": {
          name: "padDigits",
          decl: {
            start: {
              line: 196,
              column: 9
            },
            end: {
              line: 196,
              column: 18
            }
          },
          loc: {
            start: {
              line: 196,
              column: 30
            },
            end: {
              line: 198,
              column: 1
            }
          },
          line: 196
        },
        "14": {
          name: "regexQuote",
          decl: {
            start: {
              line: 199,
              column: 9
            },
            end: {
              line: 199,
              column: 19
            }
          },
          loc: {
            start: {
              line: 199,
              column: 23
            },
            end: {
              line: 204,
              column: 1
            }
          },
          line: 199
        },
        "15": {
          name: "(anonymous_15)",
          decl: {
            start: {
              line: 200,
              column: 32
            },
            end: {
              line: 200,
              column: 33
            }
          },
          loc: {
            start: {
              line: 200,
              column: 39
            },
            end: {
              line: 202,
              column: 5
            }
          },
          line: 200
        },
        "16": {
          name: "regexStrip",
          decl: {
            start: {
              line: 205,
              column: 9
            },
            end: {
              line: 205,
              column: 19
            }
          },
          loc: {
            start: {
              line: 205,
              column: 23
            },
            end: {
              line: 207,
              column: 1
            }
          },
          line: 205
        },
        "17": {
          name: "$dateFromString",
          decl: {
            start: {
              line: 214,
              column: 16
            },
            end: {
              line: 214,
              column: 31
            }
          },
          loc: {
            start: {
              line: 214,
              column: 43
            },
            end: {
              line: 272,
              column: 1
            }
          },
          line: 214
        },
        "18": {
          name: "(anonymous_18)",
          decl: {
            start: {
              line: 216,
              column: 37
            },
            end: {
              line: 216,
              column: 38
            }
          },
          loc: {
            start: {
              line: 216,
              column: 44
            },
            end: {
              line: 218,
              column: 5
            }
          },
          line: 216
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 9,
              column: 4
            },
            end: {
              line: 10,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 9,
              column: 4
            },
            end: {
              line: 10,
              column: 17
            }
          }, {
            start: {
              line: 9,
              column: 4
            },
            end: {
              line: 10,
              column: 17
            }
          }],
          line: 9
        },
        "1": {
          loc: {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 59
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 59
            }
          }, {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 59
            }
          }],
          line: 11
        },
        "2": {
          loc: {
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 17,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 17,
              column: 5
            }
          }, {
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 17,
              column: 5
            }
          }],
          line: 14
        },
        "3": {
          loc: {
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 53
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 53
            }
          }, {
            start: {
              line: 19,
              column: 4
            },
            end: {
              line: 20,
              column: 53
            }
          }],
          line: 19
        },
        "4": {
          loc: {
            start: {
              line: 85,
              column: 33
            },
            end: {
              line: 85,
              column: 48
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 85,
              column: 33
            },
            end: {
              line: 85,
              column: 43
            }
          }, {
            start: {
              line: 85,
              column: 47
            },
            end: {
              line: 85,
              column: 48
            }
          }],
          line: 85
        },
        "5": {
          loc: {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 150,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 150,
              column: 17
            }
          }, {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 150,
              column: 17
            }
          }],
          line: 149
        },
        "6": {
          loc: {
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 22
            }
          }, {
            start: {
              line: 149,
              column: 26
            },
            end: {
              line: 149,
              column: 45
            }
          }],
          line: 149
        },
        "7": {
          loc: {
            start: {
              line: 151,
              column: 4
            },
            end: {
              line: 152,
              column: 81
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 151,
              column: 4
            },
            end: {
              line: 152,
              column: 81
            }
          }, {
            start: {
              line: 151,
              column: 4
            },
            end: {
              line: 152,
              column: 81
            }
          }],
          line: 151
        },
        "8": {
          loc: {
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 151,
              column: 48
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 151,
              column: 28
            }
          }, {
            start: {
              line: 151,
              column: 32
            },
            end: {
              line: 151,
              column: 48
            }
          }],
          line: 151
        },
        "9": {
          loc: {
            start: {
              line: 182,
              column: 8
            },
            end: {
              line: 190,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 182,
              column: 8
            },
            end: {
              line: 190,
              column: 9
            }
          }, {
            start: {
              line: 182,
              column: 8
            },
            end: {
              line: 190,
              column: 9
            }
          }],
          line: 182
        },
        "10": {
          loc: {
            start: {
              line: 219,
              column: 17
            },
            end: {
              line: 219,
              column: 54
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 219,
              column: 17
            },
            end: {
              line: 219,
              column: 27
            }
          }, {
            start: {
              line: 219,
              column: 31
            },
            end: {
              line: 219,
              column: 54
            }
          }],
          line: 219
        },
        "11": {
          loc: {
            start: {
              line: 220,
              column: 17
            },
            end: {
              line: 220,
              column: 35
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 220,
              column: 17
            },
            end: {
              line: 220,
              column: 27
            }
          }, {
            start: {
              line: 220,
              column: 31
            },
            end: {
              line: 220,
              column: 35
            }
          }],
          line: 220
        },
        "12": {
          loc: {
            start: {
              line: 222,
              column: 4
            },
            end: {
              line: 223,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 222,
              column: 4
            },
            end: {
              line: 223,
              column: 26
            }
          }, {
            start: {
              line: 222,
              column: 4
            },
            end: {
              line: 223,
              column: 26
            }
          }],
          line: 222
        },
        "13": {
          loc: {
            start: {
              line: 222,
              column: 8
            },
            end: {
              line: 222,
              column: 55
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 222,
              column: 8
            },
            end: {
              line: 222,
              column: 27
            }
          }, {
            start: {
              line: 222,
              column: 31
            },
            end: {
              line: 222,
              column: 55
            }
          }],
          line: 222
        },
        "14": {
          loc: {
            start: {
              line: 234,
              column: 8
            },
            end: {
              line: 251,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 234,
              column: 8
            },
            end: {
              line: 251,
              column: 9
            }
          }, {
            start: {
              line: 234,
              column: 8
            },
            end: {
              line: 251,
              column: 9
            }
          }],
          line: 234
        },
        "15": {
          loc: {
            start: {
              line: 240,
              column: 28
            },
            end: {
              line: 240,
              column: 50
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 240,
              column: 28
            },
            end: {
              line: 240,
              column: 44
            }
          }, {
            start: {
              line: 240,
              column: 48
            },
            end: {
              line: 240,
              column: 50
            }
          }],
          line: 240
        },
        "16": {
          loc: {
            start: {
              line: 241,
              column: 12
            },
            end: {
              line: 250,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 241,
              column: 12
            },
            end: {
              line: 250,
              column: 13
            }
          }, {
            start: {
              line: 241,
              column: 12
            },
            end: {
              line: 250,
              column: 13
            }
          }],
          line: 241
        },
        "17": {
          loc: {
            start: {
              line: 243,
              column: 34
            },
            end: {
              line: 243,
              column: 77
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 243,
              column: 56
            },
            end: {
              line: 243,
              column: 70
            }
          }, {
            start: {
              line: 243,
              column: 73
            },
            end: {
              line: 243,
              column: 77
            }
          }],
          line: 243
        },
        "18": {
          loc: {
            start: {
              line: 255,
              column: 4
            },
            end: {
              line: 259,
              column: 27
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 255,
              column: 4
            },
            end: {
              line: 259,
              column: 27
            }
          }, {
            start: {
              line: 255,
              column: 4
            },
            end: {
              line: 259,
              column: 27
            }
          }],
          line: 255
        },
        "19": {
          loc: {
            start: {
              line: 255,
              column: 8
            },
            end: {
              line: 258,
              column: 73
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 255,
              column: 8
            },
            end: {
              line: 255,
              column: 31
            }
          }, {
            start: {
              line: 256,
              column: 11
            },
            end: {
              line: 256,
              column: 35
            }
          }, {
            start: {
              line: 257,
              column: 11
            },
            end: {
              line: 257,
              column: 33
            }
          }, {
            start: {
              line: 258,
              column: 11
            },
            end: {
              line: 258,
              column: 73
            }
          }],
          line: 255
        },
        "20": {
          loc: {
            start: {
              line: 263,
              column: 4
            },
            end: {
              line: 264,
              column: 43
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 263,
              column: 4
            },
            end: {
              line: 264,
              column: 43
            }
          }, {
            start: {
              line: 263,
              column: 4
            },
            end: {
              line: 264,
              column: 43
            }
          }],
          line: 263
        },
        "21": {
          loc: {
            start: {
              line: 265,
              column: 4
            },
            end: {
              line: 266,
              column: 42
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 265,
              column: 4
            },
            end: {
              line: 266,
              column: 42
            }
          }, {
            start: {
              line: 265,
              column: 4
            },
            end: {
              line: 266,
              column: 42
            }
          }],
          line: 265
        },
        "22": {
          loc: {
            start: {
              line: 267,
              column: 4
            },
            end: {
              line: 268,
              column: 42
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 267,
              column: 4
            },
            end: {
              line: 268,
              column: 42
            }
          }, {
            start: {
              line: 267,
              column: 4
            },
            end: {
              line: 268,
              column: 42
            }
          }],
          line: 267
        },
        "23": {
          loc: {
            start: {
              line: 269,
              column: 4
            },
            end: {
              line: 270,
              column: 52
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 269,
              column: 4
            },
            end: {
              line: 270,
              column: 52
            }
          }, {
            start: {
              line: 269,
              column: 4
            },
            end: {
              line: 270,
              column: 52
            }
          }],
          line: 269
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0,
        "85": 0,
        "86": 0,
        "87": 0,
        "88": 0,
        "89": 0,
        "90": 0,
        "91": 0,
        "92": 0,
        "93": 0,
        "94": 0,
        "95": 0,
        "96": 0,
        "97": 0,
        "98": 0,
        "99": 0,
        "100": 0,
        "101": 0,
        "102": 0,
        "103": 0,
        "104": 0,
        "105": 0,
        "106": 0,
        "107": 0,
        "108": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0, 0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "e2390fe74032a9d9689135b8b97cfa8d373cd870"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_17tdgv1005 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_17tdgv1005();
  var ONE_DAY_MILLIS = (cov_17tdgv1005().s[0]++, 1000 * 60 * 60 * 24);
  /**
   * Computes a date expression
   */

  function computeDate(obj, expr) {
    cov_17tdgv1005().f[0]++;
    var d = (cov_17tdgv1005().s[1]++, computeValue(obj, expr));
    cov_17tdgv1005().s[2]++;

    if (d instanceof Date) {
      cov_17tdgv1005().b[0][0]++;
      cov_17tdgv1005().s[3]++;
      return d;
    } else {
      cov_17tdgv1005().b[0][1]++;
    }

    cov_17tdgv1005().s[4]++;

    if (isString(decodeURI)) {
      cov_17tdgv1005().b[1][0]++;
      cov_17tdgv1005().s[5]++;
      throw Error('cannot take a string as an argument');
    } else {
      cov_17tdgv1005().b[1][1]++;
    }

    var tz = (cov_17tdgv1005().s[6]++, 0);
    cov_17tdgv1005().s[7]++;

    if (isObject(d)) {
      cov_17tdgv1005().b[2][0]++;
      cov_17tdgv1005().s[8]++;
      tz = parseTimezone(computeValue(obj, d.timezone));
      cov_17tdgv1005().s[9]++;
      d = computeValue(obj, d.date);
    } else {
      cov_17tdgv1005().b[2][1]++;
    }

    cov_17tdgv1005().s[10]++;
    d = new Date(d);
    cov_17tdgv1005().s[11]++;

    if (isNaN(d.getTime())) {
      cov_17tdgv1005().b[3][0]++;
      cov_17tdgv1005().s[12]++;
      throw Error("cannot convert ".concat(obj, " to date"));
    } else {
      cov_17tdgv1005().b[3][1]++;
    }

    cov_17tdgv1005().s[13]++;
    d.setUTCHours(d.getUTCHours() + tz);
    cov_17tdgv1005().s[14]++;
    return d;
  }
  /**
   * Returns the day of the year for a date as a number between 1 and 366 (leap year).
   * @param obj
   * @param expr
   */


  function $dayOfYear(obj, expr) {
    cov_17tdgv1005().f[1]++;
    var d = (cov_17tdgv1005().s[15]++, computeDate(obj, expr));
    var start = (cov_17tdgv1005().s[16]++, new Date(d.getUTCFullYear(), 0, 0));
    var diff = (cov_17tdgv1005().s[17]++, d.getTime() - start.getTime());
    cov_17tdgv1005().s[18]++;
    return Math.round(diff / ONE_DAY_MILLIS);
  }
  /**
   * Returns the day of the month for a date as a number between 1 and 31.
   * @param obj
   * @param expr
   */

  function $dayOfMonth(obj, expr) {
    cov_17tdgv1005().f[2]++;
    var d = (cov_17tdgv1005().s[19]++, computeDate(obj, expr));
    cov_17tdgv1005().s[20]++;
    return d.getUTCDate();
  }
  /**
   * Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).
   * @param obj
   * @param expr
   */

  function $dayOfWeek(obj, expr) {
    cov_17tdgv1005().f[3]++;
    var d = (cov_17tdgv1005().s[21]++, computeDate(obj, expr));
    cov_17tdgv1005().s[22]++;
    return d.getUTCDay() + 1;
  }
  /**
   * Returns the year for a date as a number (e.g. 2014).
   * @param obj
   * @param expr
   */

  function $year(obj, expr) {
    cov_17tdgv1005().f[4]++;
    var d = (cov_17tdgv1005().s[23]++, computeDate(obj, expr));
    cov_17tdgv1005().s[24]++;
    return d.getUTCFullYear();
  }
  /**
   * Returns the month for a date as a number between 1 (January) and 12 (December).
   * @param obj
   * @param expr
   */

  function $month(obj, expr) {
    cov_17tdgv1005().f[5]++;
    var d = (cov_17tdgv1005().s[25]++, computeDate(obj, expr));
    cov_17tdgv1005().s[26]++;
    return d.getUTCMonth() + 1;
  }
  /**
   * Returns the week number for a date as a number between 0
   * (the partial week that precedes the first Sunday of the year) and 53 (leap year).
   * @param obj
   * @param expr
   */

  function $week(obj, expr) {
    cov_17tdgv1005().f[6]++;
    // source: http://stackoverflow.com/a/6117889/1370481
    var d = (cov_17tdgv1005().s[27]++, computeDate(obj, expr)); // Copy date so don't modify original

    cov_17tdgv1005().s[28]++;
    d = new Date(+d);
    cov_17tdgv1005().s[29]++;
    d.setHours(0, 0, 0); // Set to nearest Thursday: current date + 4 - current day number
    // Make Sunday's day number 7

    cov_17tdgv1005().s[30]++;
    d.setDate(d.getDate() + 4 - ((cov_17tdgv1005().b[4][0]++, d.getDay()) || (cov_17tdgv1005().b[4][1]++, 7))); // Get first day of year

    var yearStart = (cov_17tdgv1005().s[31]++, new Date(d.getFullYear(), 0, 1)); // Calculate full weeks to nearest Thursday

    cov_17tdgv1005().s[32]++;
    return Math.floor(((d.getTime() - yearStart.getTime()) / 8.64e7 + 1) / 7);
  }
  /**
   * Returns the hour for a date as a number between 0 and 23.
   * @param obj
   * @param expr
   */

  function $hour(obj, expr) {
    cov_17tdgv1005().f[7]++;
    var d = (cov_17tdgv1005().s[33]++, computeDate(obj, expr));
    cov_17tdgv1005().s[34]++;
    return d.getUTCHours();
  }
  /**
   * Returns the minute for a date as a number between 0 and 59.
   * @param obj
   * @param expr
   */

  function $minute(obj, expr) {
    cov_17tdgv1005().f[8]++;
    var d = (cov_17tdgv1005().s[35]++, computeDate(obj, expr));
    cov_17tdgv1005().s[36]++;
    return d.getUTCMinutes();
  }
  /**
   * Returns the seconds for a date as a number between 0 and 60 (leap seconds).
   * @param obj
   * @param expr
   */

  function $second(obj, expr) {
    cov_17tdgv1005().f[9]++;
    var d = (cov_17tdgv1005().s[37]++, computeDate(obj, expr));
    cov_17tdgv1005().s[38]++;
    return d.getUTCSeconds();
  }
  /**
   * Returns the milliseconds of a date as a number between 0 and 999.
   * @param obj
   * @param expr
   */

  function $millisecond(obj, expr) {
    cov_17tdgv1005().f[10]++;
    var d = (cov_17tdgv1005().s[39]++, computeDate(obj, expr));
    cov_17tdgv1005().s[40]++;
    return d.getUTCMilliseconds();
  } // used for formatting dates in $dateToString operator

  var DATE_SYM_TABLE = (cov_17tdgv1005().s[41]++, {
    '%Y': ['year', $year, 4, /([0-9]{4})/],
    '%G': ['year', $year, 4, /([0-9]{4})/],
    '%m': ['month', $month, 2, /(0[1-9]|1[012])/],
    '%d': ['day', $dayOfMonth, 2, /(0[1-9]|[12][0-9]|3[01])/],
    '%H': ['hour', $hour, 2, /([01][0-9]|2[0-3])/],
    '%M': ['minute', $minute, 2, /([0-5][0-9])/],
    '%S': ['second', $second, 2, /([0-5][0-9]|60)/],
    '%L': ['millisecond', $millisecond, 3, /([0-9]{3})/],
    '%u': ['weekDay', $dayOfWeek, 1, /([1-7])/],
    '%V': ['week', $week, 1, /([1-4][0-9]?|5[0-3]?)/],
    '%z': ['timezone', null, 0, /([+-]([01][0-9]|2[0-3]):?([0-5][0-9])?)/],
    '%Z': ['minuteOffset', null, 0, /([+-][0-9]{3})/],
    '%%': '%'
  });
  /**
   * Parse and return the timezone string as a number
   * @param tzStr Timezone string matching '+/-hh[:][mm]'
   */

  function parseTimezone(tzStr) {
    cov_17tdgv1005().f[11]++;
    var re = (cov_17tdgv1005().s[42]++, DATE_SYM_TABLE['%z'][3]);
    cov_17tdgv1005().s[43]++;

    if ((cov_17tdgv1005().b[6][0]++, tzStr === null) || (cov_17tdgv1005().b[6][1]++, tzStr === undefined)) {
      cov_17tdgv1005().b[5][0]++;
      cov_17tdgv1005().s[44]++;
      return 0;
    } else {
      cov_17tdgv1005().b[5][1]++;
    }

    cov_17tdgv1005().s[45]++;

    if ((cov_17tdgv1005().b[8][0]++, re instanceof RegExp) && (cov_17tdgv1005().b[8][1]++, !tzStr.match(re))) {
      cov_17tdgv1005().b[7][0]++;
      cov_17tdgv1005().s[46]++;
      throw Error("invalid or location-based timezone ".concat(tzStr, " not supported"));
    } else {
      cov_17tdgv1005().b[7][1]++;
    }

    cov_17tdgv1005().s[47]++;
    return parseInt(tzStr.substr(0, 3));
  }
  /**
   * Returns the date as a formatted string.
   *
   * %d	Day of Month (2 digits, zero padded)	01-31
   * %G	Year in ISO 8601 format	0000-9999
   * %H	Hour (2 digits, zero padded, 24-hour clock)	00-23
   * %L	Millisecond (3 digits, zero padded)	000-999
   * %m	Month (2 digits, zero padded)	01-12
   * %M	Minute (2 digits, zero padded)	00-59
   * %S	Second (2 digits, zero padded)	00-60
   * %u	Day of week number in ISO 8601 format (1-Monday, 7-Sunday)	1-7
   * %V	Week of Year in ISO 8601 format	1-53
   * %Y	Year (4 digits, zero padded)	0000-9999
   * %z	The timezone offset from UTC.	+/-[hh][mm]
   * %Z	The minutes offset from UTC as a number. For example, if the timezone offset (+/-[hhmm]) was +0445, the minutes offset is +285.	+/-mmm
   * %%	Percent Character as a Literal	%
   *
   * @param obj current object
   * @param expr operator expression
   */


  function $dateToString(obj, expr) {
    cov_17tdgv1005().f[12]++;
    var format = (cov_17tdgv1005().s[48]++, computeValue(obj, expr.format));
    var date = (cov_17tdgv1005().s[49]++, computeValue(obj, expr.date));
    var matches = (cov_17tdgv1005().s[50]++, format.match(/(%%|%Y|%G|%m|%d|%H|%M|%S|%L|%u|%V|%z|%Z)/g));
    cov_17tdgv1005().s[51]++;

    for (var i = (cov_17tdgv1005().s[52]++, 0), len = (cov_17tdgv1005().s[53]++, matches.length); i < len; i++) {
      var hdlr = (cov_17tdgv1005().s[54]++, DATE_SYM_TABLE[matches[i]]);
      var value = void 0;
      cov_17tdgv1005().s[55]++;

      if (Array.isArray(hdlr)) {
        cov_17tdgv1005().b[9][0]++;
        // reuse date operators
        var fn = (cov_17tdgv1005().s[56]++, hdlr[1]);
        var pad = (cov_17tdgv1005().s[57]++, hdlr[2]);
        cov_17tdgv1005().s[58]++;
        value = padDigits(fn(obj, date), pad);
      } else {
        cov_17tdgv1005().b[9][1]++;
        cov_17tdgv1005().s[59]++;
        value = hdlr;
      } // replace the match with resolved value


      cov_17tdgv1005().s[60]++;
      format = format.replace(matches[i], value);
    }

    cov_17tdgv1005().s[61]++;
    return format;
  }

  function padDigits(n, digits) {
    cov_17tdgv1005().f[13]++;
    cov_17tdgv1005().s[62]++;
    return new Array(Math.max(digits - String(n).length + 1, 0)).join('0') + n;
  }

  function regexQuote(s) {
    cov_17tdgv1005().f[14]++;
    cov_17tdgv1005().s[63]++;
    "^.\-*?$".split('').forEach(function (c) {
      cov_17tdgv1005().f[15]++;
      cov_17tdgv1005().s[64]++;
      s = s.replace(c, "\\".concat(c));
    });
    cov_17tdgv1005().s[65]++;
    return s;
  }

  function regexStrip(s) {
    cov_17tdgv1005().f[16]++;
    cov_17tdgv1005().s[66]++;
    return s.replace(/^\//, '').replace(/\/$/, '');
  }

  var PARAMS__DATE_FROM_STRING = (cov_17tdgv1005().s[67]++, ['dateString', 'format', 'timezone', 'onError', 'onNull']);
  /**
   * Converts a date/time string to a date object.
   * @param obj
   * @param expr
   */

  function $dateFromString(obj, expr) {
    cov_17tdgv1005().f[17]++;
    var ctx = (cov_17tdgv1005().s[68]++, Object.create({}));
    cov_17tdgv1005().s[69]++;
    PARAMS__DATE_FROM_STRING.forEach(function (k) {
      cov_17tdgv1005().f[18]++;
      cov_17tdgv1005().s[70]++;
      ctx[k] = computeValue(obj, expr[k]);
    });
    cov_17tdgv1005().s[71]++;
    ctx.format = (cov_17tdgv1005().b[10][0]++, ctx.format) || (cov_17tdgv1005().b[10][1]++, "%Y-%m-%dT%H:%M:%S.%LZ");
    cov_17tdgv1005().s[72]++;
    ctx.onNull = (cov_17tdgv1005().b[11][0]++, ctx.onNull) || (cov_17tdgv1005().b[11][1]++, null);
    var dateString = (cov_17tdgv1005().s[73]++, ctx.dateString);
    cov_17tdgv1005().s[74]++;

    if ((cov_17tdgv1005().b[13][0]++, dateString === null) || (cov_17tdgv1005().b[13][1]++, dateString === undefined)) {
      cov_17tdgv1005().b[12][0]++;
      cov_17tdgv1005().s[75]++;
      return ctx.onNull;
    } else {
      cov_17tdgv1005().b[12][1]++;
    } // collect all separators of the format string


    var separators = (cov_17tdgv1005().s[76]++, ctx.format.split(/%[YGmdHMSLuVzZ]/));
    cov_17tdgv1005().s[77]++;
    separators.reverse();
    var matches = (cov_17tdgv1005().s[78]++, ctx.format.match(/(%%|%Y|%G|%m|%d|%H|%M|%S|%L|%u|%V|%z|%Z)/g));
    var dateParts = (cov_17tdgv1005().s[79]++, Object.create({})); // holds the valid regex of parts that matches input date string

    var expectedPattern = (cov_17tdgv1005().s[80]++, '');
    cov_17tdgv1005().s[81]++;

    for (var i = (cov_17tdgv1005().s[82]++, 0), len = (cov_17tdgv1005().s[83]++, matches.length); i < len; i++) {
      var formatSpecifier = (cov_17tdgv1005().s[84]++, matches[i]);
      var hdlr = (cov_17tdgv1005().s[85]++, DATE_SYM_TABLE[formatSpecifier]);
      cov_17tdgv1005().s[86]++;

      if (Array.isArray(hdlr)) {
        cov_17tdgv1005().b[14][0]++;
        // get pattern and alias from table
        var name = (cov_17tdgv1005().s[87]++, hdlr[0]);
        var pattern = (cov_17tdgv1005().s[88]++, hdlr[3]);
        var m = (cov_17tdgv1005().s[89]++, dateString.match(pattern)); // get the next separtor

        var delimiter = (cov_17tdgv1005().s[90]++, (cov_17tdgv1005().b[15][0]++, separators.pop()) || (cov_17tdgv1005().b[15][1]++, ''));
        cov_17tdgv1005().s[91]++;

        if (m !== null) {
          cov_17tdgv1005().b[16][0]++;
          cov_17tdgv1005().s[92]++;
          // store and cut out matched part
          dateParts[name] = m[0].match(/^\d+$/) ? (cov_17tdgv1005().b[17][0]++, parseInt(m[0])) : (cov_17tdgv1005().b[17][1]++, m[0]);
          cov_17tdgv1005().s[93]++;
          dateString = dateString.substr(0, m.index) + dateString.substr(m.index + m[0].length); // construct expected pattern

          cov_17tdgv1005().s[94]++;
          expectedPattern += regexQuote(delimiter) + regexStrip(pattern.toString());
        } else {
          cov_17tdgv1005().b[16][1]++;
          cov_17tdgv1005().s[95]++;
          dateParts[name] = null;
        }
      } else {
        cov_17tdgv1005().b[14][1]++;
      }
    } // 1. validate all required date parts exists
    // 2. validate original dateString against expected pattern.


    cov_17tdgv1005().s[96]++;

    if ((cov_17tdgv1005().b[19][0]++, dateParts.year === null) || (cov_17tdgv1005().b[19][1]++, dateParts.month === null) || (cov_17tdgv1005().b[19][2]++, dateParts.day === null) || (cov_17tdgv1005().b[19][3]++, !ctx.dateString.match(new RegExp('^' + expectedPattern + '$')))) {
      cov_17tdgv1005().b[18][0]++;
      cov_17tdgv1005().s[97]++;
      return ctx.onError;
    } else {
      cov_17tdgv1005().b[18][1]++;
    }

    var tz = (cov_17tdgv1005().s[98]++, parseTimezone(ctx.timezone)); // create the date. month is 0-based in Date

    var d = (cov_17tdgv1005().s[99]++, new Date(Date.UTC(dateParts.year, dateParts.month - 1, dateParts.day, tz, 0, 0)));
    cov_17tdgv1005().s[100]++;

    if (dateParts.hour !== null) {
      cov_17tdgv1005().b[20][0]++;
      cov_17tdgv1005().s[101]++;
      d.setUTCHours(dateParts.hour + tz);
    } else {
      cov_17tdgv1005().b[20][1]++;
    }

    cov_17tdgv1005().s[102]++;

    if (dateParts.minute !== null) {
      cov_17tdgv1005().b[21][0]++;
      cov_17tdgv1005().s[103]++;
      d.setUTCMinutes(dateParts.minute);
    } else {
      cov_17tdgv1005().b[21][1]++;
    }

    cov_17tdgv1005().s[104]++;

    if (dateParts.second !== null) {
      cov_17tdgv1005().b[22][0]++;
      cov_17tdgv1005().s[105]++;
      d.setUTCSeconds(dateParts.second);
    } else {
      cov_17tdgv1005().b[22][1]++;
    }

    cov_17tdgv1005().s[106]++;

    if (dateParts.millisecond !== null) {
      cov_17tdgv1005().b[23][0]++;
      cov_17tdgv1005().s[107]++;
      d.setUTCMilliseconds(dateParts.millisecond);
    } else {
      cov_17tdgv1005().b[23][1]++;
    }

    cov_17tdgv1005().s[108]++;
    return d;
  }

  function cov_270i2fb3tu() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/type.js";
    var hash = "e1bd95504b30f49b1f268219047d3d2643c61b6c";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/type.js",
      statementMap: {
        "0": {
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 7,
            column: 23
          }
        },
        "1": {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 11,
            column: 37
          }
        },
        "2": {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 30
          }
        },
        "3": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        "4": {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 26
          }
        },
        "5": {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 18,
            column: 32
          }
        },
        "6": {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 32
          }
        },
        "7": {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 19,
            column: 69
          }
        },
        "8": {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 27
          }
        },
        "9": {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 28
          }
        },
        "10": {
          start: {
            line: 33,
            column: 14
          },
          end: {
            line: 33,
            column: 37
          }
        },
        "11": {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 35,
            column: 20
          }
        },
        "12": {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 35,
            column: 20
          }
        },
        "13": {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 24
          }
        },
        "14": {
          start: {
            line: 39,
            column: 14
          },
          end: {
            line: 39,
            column: 37
          }
        },
        "15": {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 41,
            column: 20
          }
        },
        "16": {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 20
          }
        },
        "17": {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        "18": {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 46,
            column: 9
          }
        },
        "19": {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 44
          }
        },
        "20": {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 30
          }
        },
        "21": {
          start: {
            line: 54,
            column: 14
          },
          end: {
            line: 54,
            column: 37
          }
        },
        "22": {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 56,
            column: 20
          }
        },
        "23": {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 56,
            column: 20
          }
        },
        "24": {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 58,
            column: 29
          }
        },
        "25": {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 29
          }
        },
        "26": {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 35
          }
        },
        "27": {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 61,
            column: 17
          }
        },
        "28": {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 17
          }
        },
        "29": {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 73
          }
        },
        "30": {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 57
          }
        },
        "31": {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 60
          }
        },
        "32": {
          start: {
            line: 85,
            column: 14
          },
          end: {
            line: 85,
            column: 37
          }
        },
        "33": {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 87,
            column: 20
          }
        },
        "34": {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 87,
            column: 20
          }
        },
        "35": {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 89,
            column: 29
          }
        },
        "36": {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 29
          }
        },
        "37": {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 23
          }
        },
        "38": {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 92,
            column: 17
          }
        },
        "39": {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 92,
            column: 17
          }
        },
        "40": {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 76
          }
        },
        "41": {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 35
          }
        },
        "42": {
          start: {
            line: 107,
            column: 14
          },
          end: {
            line: 107,
            column: 37
          }
        },
        "43": {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 109,
            column: 19
          }
        },
        "44": {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 109,
            column: 19
          }
        },
        "45": {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 111,
            column: 20
          }
        },
        "46": {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 20
          }
        },
        "47": {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 25
          }
        },
        "48": {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 23
          }
        },
        "49": {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 115,
            column: 17
          }
        },
        "50": {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 17
          }
        },
        "51": {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 66
          }
        },
        "52": {
          start: {
            line: 118,
            column: 24
          },
          end: {
            line: 118,
            column: 60
          }
        },
        "53": {
          start: {
            line: 126,
            column: 14
          },
          end: {
            line: 126,
            column: 31
          }
        },
        "54": {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 129,
            column: 7
          }
        },
        "55": {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 128,
            column: 44
          }
        },
        "56": {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 62
          }
        },
        "57": {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 132,
            column: 26
          }
        },
        "58": {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 132,
            column: 26
          }
        },
        "59": {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        "60": {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        "61": {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 49
          }
        },
        "62": {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 47
          }
        },
        "63": {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 143,
            column: 47
          }
        },
        "64": {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 148,
            column: 49
          }
        },
        "65": {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 46
          }
        },
        "66": {
          start: {
            line: 154,
            column: 16
          },
          end: {
            line: 154,
            column: 47
          }
        },
        "67": {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 31
          }
        },
        "68": {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 31
          }
        },
        "69": {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 78
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 6,
              column: 4
            },
            end: {
              line: 6,
              column: 5
            }
          },
          loc: {
            start: {
              line: 6,
              column: 25
            },
            end: {
              line: 8,
              column: 5
            }
          },
          line: 6
        },
        "1": {
          name: "$type",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 21
            }
          },
          loc: {
            start: {
              line: 10,
              column: 33
            },
            end: {
              line: 25,
              column: 1
            }
          },
          line: 10
        },
        "2": {
          name: "$toBool",
          decl: {
            start: {
              line: 32,
              column: 16
            },
            end: {
              line: 32,
              column: 23
            }
          },
          loc: {
            start: {
              line: 32,
              column: 35
            },
            end: {
              line: 37,
              column: 1
            }
          },
          line: 32
        },
        "3": {
          name: "$toString",
          decl: {
            start: {
              line: 38,
              column: 16
            },
            end: {
              line: 38,
              column: 25
            }
          },
          loc: {
            start: {
              line: 38,
              column: 37
            },
            end: {
              line: 52,
              column: 1
            }
          },
          line: 38
        },
        "4": {
          name: "toInteger",
          decl: {
            start: {
              line: 53,
              column: 16
            },
            end: {
              line: 53,
              column: 25
            }
          },
          loc: {
            start: {
              line: 53,
              column: 57
            },
            end: {
              line: 63,
              column: 1
            }
          },
          line: 53
        },
        "5": {
          name: "$toInt",
          decl: {
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 69,
              column: 22
            }
          },
          loc: {
            start: {
              line: 69,
              column: 34
            },
            end: {
              line: 71,
              column: 1
            }
          },
          line: 69
        },
        "6": {
          name: "$toLong",
          decl: {
            start: {
              line: 75,
              column: 16
            },
            end: {
              line: 75,
              column: 23
            }
          },
          loc: {
            start: {
              line: 75,
              column: 35
            },
            end: {
              line: 77,
              column: 1
            }
          },
          line: 75
        },
        "7": {
          name: "$toDouble",
          decl: {
            start: {
              line: 84,
              column: 16
            },
            end: {
              line: 84,
              column: 25
            }
          },
          loc: {
            start: {
              line: 84,
              column: 37
            },
            end: {
              line: 94,
              column: 1
            }
          },
          line: 84
        },
        "8": {
          name: "$toDate",
          decl: {
            start: {
              line: 106,
              column: 16
            },
            end: {
              line: 106,
              column: 23
            }
          },
          loc: {
            start: {
              line: 106,
              column: 35
            },
            end: {
              line: 117,
              column: 1
            }
          },
          line: 106
        },
        "9": {
          name: "$convert",
          decl: {
            start: {
              line: 125,
              column: 16
            },
            end: {
              line: 125,
              column: 24
            }
          },
          loc: {
            start: {
              line: 125,
              column: 36
            },
            end: {
              line: 162,
              column: 1
            }
          },
          line: 125
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 127,
              column: 28
            },
            end: {
              line: 127,
              column: 29
            }
          },
          loc: {
            start: {
              line: 127,
              column: 35
            },
            end: {
              line: 129,
              column: 5
            }
          },
          line: 127
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 24,
              column: 5
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 14,
              column: 8
            },
            end: {
              line: 15,
              column: 26
            }
          }, {
            start: {
              line: 16,
              column: 8
            },
            end: {
              line: 19,
              column: 69
            }
          }, {
            start: {
              line: 20,
              column: 8
            },
            end: {
              line: 21,
              column: 27
            }
          }, {
            start: {
              line: 22,
              column: 8
            },
            end: {
              line: 23,
              column: 28
            }
          }],
          line: 13
        },
        "1": {
          loc: {
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 18,
              column: 32
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 18,
              column: 32
            }
          }, {
            start: {
              line: 17,
              column: 12
            },
            end: {
              line: 18,
              column: 32
            }
          }],
          line: 17
        },
        "2": {
          loc: {
            start: {
              line: 19,
              column: 19
            },
            end: {
              line: 19,
              column: 68
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 19,
              column: 54
            },
            end: {
              line: 19,
              column: 59
            }
          }, {
            start: {
              line: 19,
              column: 62
            },
            end: {
              line: 19,
              column: 68
            }
          }],
          line: 19
        },
        "3": {
          loc: {
            start: {
              line: 19,
              column: 19
            },
            end: {
              line: 19,
              column: 51
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 19,
              column: 19
            },
            end: {
              line: 19,
              column: 33
            }
          }, {
            start: {
              line: 19,
              column: 37
            },
            end: {
              line: 19,
              column: 51
            }
          }],
          line: 19
        },
        "4": {
          loc: {
            start: {
              line: 34,
              column: 4
            },
            end: {
              line: 35,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 34,
              column: 4
            },
            end: {
              line: 35,
              column: 20
            }
          }, {
            start: {
              line: 34,
              column: 4
            },
            end: {
              line: 35,
              column: 20
            }
          }],
          line: 34
        },
        "5": {
          loc: {
            start: {
              line: 34,
              column: 8
            },
            end: {
              line: 34,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 34,
              column: 8
            },
            end: {
              line: 34,
              column: 20
            }
          }, {
            start: {
              line: 34,
              column: 24
            },
            end: {
              line: 34,
              column: 41
            }
          }],
          line: 34
        },
        "6": {
          loc: {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 20
            }
          }, {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 20
            }
          }],
          line: 40
        },
        "7": {
          loc: {
            start: {
              line: 40,
              column: 8
            },
            end: {
              line: 40,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 40,
              column: 8
            },
            end: {
              line: 40,
              column: 20
            }
          }, {
            start: {
              line: 40,
              column: 24
            },
            end: {
              line: 40,
              column: 41
            }
          }],
          line: 40
        },
        "8": {
          loc: {
            start: {
              line: 42,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 42,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          }, {
            start: {
              line: 42,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          }],
          line: 42
        },
        "9": {
          loc: {
            start: {
              line: 55,
              column: 4
            },
            end: {
              line: 56,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 55,
              column: 4
            },
            end: {
              line: 56,
              column: 20
            }
          }, {
            start: {
              line: 55,
              column: 4
            },
            end: {
              line: 56,
              column: 20
            }
          }],
          line: 55
        },
        "10": {
          loc: {
            start: {
              line: 55,
              column: 8
            },
            end: {
              line: 55,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 55,
              column: 8
            },
            end: {
              line: 55,
              column: 20
            }
          }, {
            start: {
              line: 55,
              column: 24
            },
            end: {
              line: 55,
              column: 41
            }
          }],
          line: 55
        },
        "11": {
          loc: {
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 29
            }
          }, {
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 29
            }
          }],
          line: 57
        },
        "12": {
          loc: {
            start: {
              line: 60,
              column: 4
            },
            end: {
              line: 61,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 60,
              column: 4
            },
            end: {
              line: 61,
              column: 17
            }
          }, {
            start: {
              line: 60,
              column: 4
            },
            end: {
              line: 61,
              column: 17
            }
          }],
          line: 60
        },
        "13": {
          loc: {
            start: {
              line: 60,
              column: 8
            },
            end: {
              line: 60,
              column: 82
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 60,
              column: 8
            },
            end: {
              line: 60,
              column: 17
            }
          }, {
            start: {
              line: 60,
              column: 21
            },
            end: {
              line: 60,
              column: 29
            }
          }, {
            start: {
              line: 60,
              column: 33
            },
            end: {
              line: 60,
              column: 41
            }
          }, {
            start: {
              line: 60,
              column: 46
            },
            end: {
              line: 60,
              column: 60
            }
          }, {
            start: {
              line: 60,
              column: 64
            },
            end: {
              line: 60,
              column: 81
            }
          }],
          line: 60
        },
        "14": {
          loc: {
            start: {
              line: 86,
              column: 4
            },
            end: {
              line: 87,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 86,
              column: 4
            },
            end: {
              line: 87,
              column: 20
            }
          }, {
            start: {
              line: 86,
              column: 4
            },
            end: {
              line: 87,
              column: 20
            }
          }],
          line: 86
        },
        "15": {
          loc: {
            start: {
              line: 86,
              column: 8
            },
            end: {
              line: 86,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 86,
              column: 8
            },
            end: {
              line: 86,
              column: 20
            }
          }, {
            start: {
              line: 86,
              column: 24
            },
            end: {
              line: 86,
              column: 41
            }
          }],
          line: 86
        },
        "16": {
          loc: {
            start: {
              line: 88,
              column: 4
            },
            end: {
              line: 89,
              column: 29
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 88,
              column: 4
            },
            end: {
              line: 89,
              column: 29
            }
          }, {
            start: {
              line: 88,
              column: 4
            },
            end: {
              line: 89,
              column: 29
            }
          }],
          line: 88
        },
        "17": {
          loc: {
            start: {
              line: 91,
              column: 4
            },
            end: {
              line: 92,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 91,
              column: 4
            },
            end: {
              line: 92,
              column: 17
            }
          }, {
            start: {
              line: 91,
              column: 4
            },
            end: {
              line: 92,
              column: 17
            }
          }],
          line: 91
        },
        "18": {
          loc: {
            start: {
              line: 91,
              column: 8
            },
            end: {
              line: 91,
              column: 52
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 91,
              column: 8
            },
            end: {
              line: 91,
              column: 17
            }
          }, {
            start: {
              line: 91,
              column: 21
            },
            end: {
              line: 91,
              column: 52
            }
          }],
          line: 91
        },
        "19": {
          loc: {
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 19
            }
          }, {
            start: {
              line: 108,
              column: 4
            },
            end: {
              line: 109,
              column: 19
            }
          }],
          line: 108
        },
        "20": {
          loc: {
            start: {
              line: 110,
              column: 4
            },
            end: {
              line: 111,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 110,
              column: 4
            },
            end: {
              line: 111,
              column: 20
            }
          }, {
            start: {
              line: 110,
              column: 4
            },
            end: {
              line: 111,
              column: 20
            }
          }],
          line: 110
        },
        "21": {
          loc: {
            start: {
              line: 110,
              column: 8
            },
            end: {
              line: 110,
              column: 41
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 110,
              column: 8
            },
            end: {
              line: 110,
              column: 20
            }
          }, {
            start: {
              line: 110,
              column: 24
            },
            end: {
              line: 110,
              column: 41
            }
          }],
          line: 110
        },
        "22": {
          loc: {
            start: {
              line: 114,
              column: 4
            },
            end: {
              line: 115,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 114,
              column: 4
            },
            end: {
              line: 115,
              column: 17
            }
          }, {
            start: {
              line: 114,
              column: 4
            },
            end: {
              line: 115,
              column: 17
            }
          }],
          line: 114
        },
        "23": {
          loc: {
            start: {
              line: 130,
              column: 17
            },
            end: {
              line: 130,
              column: 61
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 130,
              column: 44
            },
            end: {
              line: 130,
              column: 48
            }
          }, {
            start: {
              line: 130,
              column: 51
            },
            end: {
              line: 130,
              column: 61
            }
          }],
          line: 130
        },
        "24": {
          loc: {
            start: {
              line: 131,
              column: 4
            },
            end: {
              line: 132,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 131,
              column: 4
            },
            end: {
              line: 132,
              column: 26
            }
          }, {
            start: {
              line: 131,
              column: 4
            },
            end: {
              line: 132,
              column: 26
            }
          }],
          line: 131
        },
        "25": {
          loc: {
            start: {
              line: 131,
              column: 8
            },
            end: {
              line: 131,
              column: 53
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 131,
              column: 8
            },
            end: {
              line: 131,
              column: 26
            }
          }, {
            start: {
              line: 131,
              column: 30
            },
            end: {
              line: 131,
              column: 53
            }
          }],
          line: 131
        },
        "26": {
          loc: {
            start: {
              line: 134,
              column: 8
            },
            end: {
              line: 155,
              column: 9
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 135,
              column: 12
            },
            end: {
              line: 135,
              column: 19
            }
          }, {
            start: {
              line: 136,
              column: 12
            },
            end: {
              line: 137,
              column: 49
            }
          }, {
            start: {
              line: 138,
              column: 12
            },
            end: {
              line: 138,
              column: 19
            }
          }, {
            start: {
              line: 139,
              column: 12
            },
            end: {
              line: 140,
              column: 47
            }
          }, {
            start: {
              line: 141,
              column: 12
            },
            end: {
              line: 141,
              column: 19
            }
          }, {
            start: {
              line: 142,
              column: 12
            },
            end: {
              line: 143,
              column: 47
            }
          }, {
            start: {
              line: 144,
              column: 12
            },
            end: {
              line: 144,
              column: 19
            }
          }, {
            start: {
              line: 145,
              column: 12
            },
            end: {
              line: 145,
              column: 20
            }
          }, {
            start: {
              line: 146,
              column: 12
            },
            end: {
              line: 146,
              column: 26
            }
          }, {
            start: {
              line: 147,
              column: 12
            },
            end: {
              line: 148,
              column: 49
            }
          }, {
            start: {
              line: 149,
              column: 12
            },
            end: {
              line: 149,
              column: 20
            }
          }, {
            start: {
              line: 150,
              column: 12
            },
            end: {
              line: 151,
              column: 46
            }
          }, {
            start: {
              line: 152,
              column: 12
            },
            end: {
              line: 152,
              column: 20
            }
          }, {
            start: {
              line: 153,
              column: 12
            },
            end: {
              line: 154,
              column: 47
            }
          }],
          line: 134
        },
        "27": {
          loc: {
            start: {
              line: 158,
              column: 8
            },
            end: {
              line: 159,
              column: 31
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 158,
              column: 8
            },
            end: {
              line: 159,
              column: 31
            }
          }, {
            start: {
              line: 158,
              column: 8
            },
            end: {
              line: 159,
              column: 31
            }
          }],
          line: 158
        },
        "28": {
          loc: {
            start: {
              line: 158,
              column: 12
            },
            end: {
              line: 158,
              column: 70
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 158,
              column: 12
            },
            end: {
              line: 158,
              column: 41
            }
          }, {
            start: {
              line: 158,
              column: 45
            },
            end: {
              line: 158,
              column: 70
            }
          }],
          line: 158
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0
      },
      b: {
        "0": [0, 0, 0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0, 0, 0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0],
        "24": [0, 0],
        "25": [0, 0],
        "26": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        "27": [0, 0],
        "28": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "e1bd95504b30f49b1f268219047d3d2643c61b6c"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_270i2fb3tu = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_270i2fb3tu();

  function _createSuper(Derived) {
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;

      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    return function () {
      var Super = _getPrototypeOf(Derived),
          result;

      if (isNativeReflectConstruct()) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  var TypeConvertError = /*#__PURE__*/function (_Error) {
    _inherits(TypeConvertError, _Error);

    var _super = _createSuper(TypeConvertError);

    function TypeConvertError(message) {
      _classCallCheck(this, TypeConvertError);

      cov_270i2fb3tu().f[0]++;
      cov_270i2fb3tu().s[0]++;
      return _super.call(this, message);
    }

    return TypeConvertError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  function $type$1(obj, expr) {
    cov_270i2fb3tu().f[1]++;
    var val = (cov_270i2fb3tu().s[1]++, computeValue(obj, expr));
    var typename = (cov_270i2fb3tu().s[2]++, jsType(val));
    cov_270i2fb3tu().s[3]++;

    switch (typename) {
      case T_BOOLEAN:
        cov_270i2fb3tu().b[0][0]++;
        cov_270i2fb3tu().s[4]++;
        return T_BOOL;

      case T_NUMBER:
        cov_270i2fb3tu().b[0][1]++;
        cov_270i2fb3tu().s[5]++;

        if (val.toString().indexOf('.') >= 0) {
          cov_270i2fb3tu().b[1][0]++;
          cov_270i2fb3tu().s[6]++;
          return 'double';
        } else {
          cov_270i2fb3tu().b[1][1]++;
        }

        cov_270i2fb3tu().s[7]++;
        return (cov_270i2fb3tu().b[3][0]++, val >= MIN_INT) && (cov_270i2fb3tu().b[3][1]++, val <= MAX_INT) ? (cov_270i2fb3tu().b[2][0]++, 'int') : (cov_270i2fb3tu().b[2][1]++, 'long');

      case T_REGEXP:
        cov_270i2fb3tu().b[0][2]++;
        cov_270i2fb3tu().s[8]++;
        return T_REGEX;

      default:
        cov_270i2fb3tu().b[0][3]++;
        cov_270i2fb3tu().s[9]++;
        return typename;
    }
  }
  /**
   * Converts a value to a boolean.
   *
   * @param obj
   * @param expr
   */

  function $toBool(obj, expr) {
    cov_270i2fb3tu().f[2]++;
    var val = (cov_270i2fb3tu().s[10]++, computeValue(obj, expr));
    cov_270i2fb3tu().s[11]++;

    if ((cov_270i2fb3tu().b[5][0]++, val === null) || (cov_270i2fb3tu().b[5][1]++, val === undefined)) {
      cov_270i2fb3tu().b[4][0]++;
      cov_270i2fb3tu().s[12]++;
      return null;
    } else {
      cov_270i2fb3tu().b[4][1]++;
    }

    cov_270i2fb3tu().s[13]++;
    return Boolean(val);
  }
  function $toString(obj, expr) {
    cov_270i2fb3tu().f[3]++;
    var val = (cov_270i2fb3tu().s[14]++, computeValue(obj, expr));
    cov_270i2fb3tu().s[15]++;

    if ((cov_270i2fb3tu().b[7][0]++, val === null) || (cov_270i2fb3tu().b[7][1]++, val === undefined)) {
      cov_270i2fb3tu().b[6][0]++;
      cov_270i2fb3tu().s[16]++;
      return null;
    } else {
      cov_270i2fb3tu().b[6][1]++;
    }

    cov_270i2fb3tu().s[17]++;

    if (val instanceof Date) {
      cov_270i2fb3tu().b[8][0]++;
      var dateExpr = (cov_270i2fb3tu().s[18]++, {
        date: expr,
        format: "%Y-%m-%dT%H:%M:%S.%LZ"
      });
      cov_270i2fb3tu().s[19]++;
      return $dateToString(obj, dateExpr);
    } else {
      cov_270i2fb3tu().b[8][1]++;
      cov_270i2fb3tu().s[20]++;
      return val.toString();
    }
  }
  function toInteger(obj, expr, max, min, typename) {
    cov_270i2fb3tu().f[4]++;
    var val = (cov_270i2fb3tu().s[21]++, computeValue(obj, expr));
    cov_270i2fb3tu().s[22]++;

    if ((cov_270i2fb3tu().b[10][0]++, val === null) || (cov_270i2fb3tu().b[10][1]++, val === undefined)) {
      cov_270i2fb3tu().b[9][0]++;
      cov_270i2fb3tu().s[23]++;
      return null;
    } else {
      cov_270i2fb3tu().b[9][1]++;
    }

    cov_270i2fb3tu().s[24]++;

    if (val instanceof Date) {
      cov_270i2fb3tu().b[11][0]++;
      cov_270i2fb3tu().s[25]++;
      return val.getTime();
    } else {
      cov_270i2fb3tu().b[11][1]++;
    }

    var n = (cov_270i2fb3tu().s[26]++, Math.trunc(Number(val)));
    cov_270i2fb3tu().s[27]++;

    if ((cov_270i2fb3tu().b[13][0]++, !isNaN(n)) && (cov_270i2fb3tu().b[13][1]++, n >= min) && (cov_270i2fb3tu().b[13][2]++, n <= max) && ((cov_270i2fb3tu().b[13][3]++, !isString(val)) || (cov_270i2fb3tu().b[13][4]++, /^\d+$/.test(val)))) {
      cov_270i2fb3tu().b[12][0]++;
      cov_270i2fb3tu().s[28]++;
      return n;
    } else {
      cov_270i2fb3tu().b[12][1]++;
    }

    cov_270i2fb3tu().s[29]++;
    throw new TypeConvertError("cannot convert '".concat(val, "' to ").concat(typename));
  }
  /**
   * Converts a value to an integer. If the value cannot be converted to an integer, $toInt errors. If the value is null or missing, $toInt returns null.
   * @param obj
   * @param expr
   */

  function $toInt(obj, expr) {
    cov_270i2fb3tu().f[5]++;
    cov_270i2fb3tu().s[30]++;
    return toInteger(obj, expr, MAX_INT, MIN_INT, 'int');
  }
  /**
   * Converts a value to a long. If the value cannot be converted to a long, $toLong errors. If the value is null or missing, $toLong returns null.
   */

  function $toLong(obj, expr) {
    cov_270i2fb3tu().f[6]++;
    cov_270i2fb3tu().s[31]++;
    return toInteger(obj, expr, MAX_LONG, MIN_LONG, 'long');
  }
  /**
   * Converts a value to a double. If the value cannot be converted to an double, $toDouble errors. If the value is null or missing, $toDouble returns null.
   *
   * @param obj
   * @param expr
   */

  function $toDouble(obj, expr) {
    cov_270i2fb3tu().f[7]++;
    var val = (cov_270i2fb3tu().s[32]++, computeValue(obj, expr));
    cov_270i2fb3tu().s[33]++;

    if ((cov_270i2fb3tu().b[15][0]++, val === null) || (cov_270i2fb3tu().b[15][1]++, val === undefined)) {
      cov_270i2fb3tu().b[14][0]++;
      cov_270i2fb3tu().s[34]++;
      return null;
    } else {
      cov_270i2fb3tu().b[14][1]++;
    }

    cov_270i2fb3tu().s[35]++;

    if (val instanceof Date) {
      cov_270i2fb3tu().b[16][0]++;
      cov_270i2fb3tu().s[36]++;
      return val.getTime();
    } else {
      cov_270i2fb3tu().b[16][1]++;
    }

    var n = (cov_270i2fb3tu().s[37]++, Number(val));
    cov_270i2fb3tu().s[38]++;

    if ((cov_270i2fb3tu().b[18][0]++, !isNaN(n)) && (cov_270i2fb3tu().b[18][1]++, n.toString() === val.toString())) {
      cov_270i2fb3tu().b[17][0]++;
      cov_270i2fb3tu().s[39]++;
      return n;
    } else {
      cov_270i2fb3tu().b[17][1]++;
    }

    cov_270i2fb3tu().s[40]++;
    throw new TypeConvertError("cannot convert '".concat(val, "' to double/decimal"));
  }
  /**
   * Converts a value to a decimal. If the value cannot be converted to a decimal, $toDecimal errors. If the value is null or missing, $toDecimal returns null.
   * Alias for $toDouble in Mingo.
   */

  var $toDecimal = (cov_270i2fb3tu().s[41]++, $toDouble);
  /**
   * Converts a value to a date. If the value cannot be converted to a date, $toDate errors. If the value is null or missing, $toDate returns null.
   *
   * @param obj
   * @param expr
   */

  function $toDate(obj, expr) {
    cov_270i2fb3tu().f[8]++;
    var val = (cov_270i2fb3tu().s[42]++, computeValue(obj, expr));
    cov_270i2fb3tu().s[43]++;

    if (val instanceof Date) {
      cov_270i2fb3tu().b[19][0]++;
      cov_270i2fb3tu().s[44]++;
      return val;
    } else {
      cov_270i2fb3tu().b[19][1]++;
    }

    cov_270i2fb3tu().s[45]++;

    if ((cov_270i2fb3tu().b[21][0]++, val === null) || (cov_270i2fb3tu().b[21][1]++, val === undefined)) {
      cov_270i2fb3tu().b[20][0]++;
      cov_270i2fb3tu().s[46]++;
      return null;
    } else {
      cov_270i2fb3tu().b[20][1]++;
    }

    var d = (cov_270i2fb3tu().s[47]++, new Date(val));
    var n = (cov_270i2fb3tu().s[48]++, d.getTime());
    cov_270i2fb3tu().s[49]++;

    if (!isNaN(n)) {
      cov_270i2fb3tu().b[22][0]++;
      cov_270i2fb3tu().s[50]++;
      return d;
    } else {
      cov_270i2fb3tu().b[22][1]++;
    }

    cov_270i2fb3tu().s[51]++;
    throw new TypeConvertError("cannot convert '".concat(val, "' to date"));
  }
  var PARAMS__CONVERT = (cov_270i2fb3tu().s[52]++, ['input', 'to', 'onError', 'onNull']);
  /**
   * Converts a value to a specified type.
   *
   * @param obj
   * @param expr
   */

  function $convert(obj, expr) {
    cov_270i2fb3tu().f[9]++;
    var ctx = (cov_270i2fb3tu().s[53]++, Object.create({}));
    cov_270i2fb3tu().s[54]++;
    PARAMS__CONVERT.forEach(function (k) {
      cov_270i2fb3tu().f[10]++;
      cov_270i2fb3tu().s[55]++;
      ctx[k] = computeValue(obj, expr[k]);
    });
    cov_270i2fb3tu().s[56]++;
    ctx.onNull = ctx.onNull === undefined ? (cov_270i2fb3tu().b[23][0]++, null) : (cov_270i2fb3tu().b[23][1]++, ctx.onNull);
    cov_270i2fb3tu().s[57]++;

    if ((cov_270i2fb3tu().b[25][0]++, ctx.input === null) || (cov_270i2fb3tu().b[25][1]++, ctx.input === undefined)) {
      cov_270i2fb3tu().b[24][0]++;
      cov_270i2fb3tu().s[58]++;
      return ctx.onNull;
    } else {
      cov_270i2fb3tu().b[24][1]++;
    }

    cov_270i2fb3tu().s[59]++;

    try {
      cov_270i2fb3tu().s[60]++;

      switch (ctx.to) {
        case 2:
          cov_270i2fb3tu().b[26][0]++;

        case 'string':
          cov_270i2fb3tu().b[26][1]++;
          cov_270i2fb3tu().s[61]++;
          return $toString(obj, ctx.input);

        case 8:
          cov_270i2fb3tu().b[26][2]++;

        case 'bool':
          cov_270i2fb3tu().b[26][3]++;
          cov_270i2fb3tu().s[62]++;
          return $toBool(obj, ctx.input);

        case 9:
          cov_270i2fb3tu().b[26][4]++;

        case 'date':
          cov_270i2fb3tu().b[26][5]++;
          cov_270i2fb3tu().s[63]++;
          return $toDate(obj, ctx.input);

        case 1:
          cov_270i2fb3tu().b[26][6]++;

        case 19:
          cov_270i2fb3tu().b[26][7]++;

        case 'double':
          cov_270i2fb3tu().b[26][8]++;

        case 'decimal':
          cov_270i2fb3tu().b[26][9]++;
          cov_270i2fb3tu().s[64]++;
          return $toDouble(obj, ctx.input);

        case 16:
          cov_270i2fb3tu().b[26][10]++;

        case 'int':
          cov_270i2fb3tu().b[26][11]++;
          cov_270i2fb3tu().s[65]++;
          return $toInt(obj, ctx.input);

        case 18:
          cov_270i2fb3tu().b[26][12]++;

        case 'long':
          cov_270i2fb3tu().b[26][13]++;
          cov_270i2fb3tu().s[66]++;
          return $toLong(obj, ctx.input);
      }
    } catch (e) {
      cov_270i2fb3tu().s[67]++;

      if ((cov_270i2fb3tu().b[28][0]++, e instanceof TypeConvertError) && (cov_270i2fb3tu().b[28][1]++, ctx.onError !== undefined)) {
        cov_270i2fb3tu().b[27][0]++;
        cov_270i2fb3tu().s[68]++;
        return ctx.onError;
      } else {
        cov_270i2fb3tu().b[27][1]++;
      }
    }

    cov_270i2fb3tu().s[69]++;
    throw new TypeConvertError("failed to convert ".concat(ctx.input, " to ").concat(ctx.to));
  }

  function cov_1wlps5kln3() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/literal.js";
    var hash = "90b9cf56a3e032d853a98b193ec23ec9683bc820";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/literal.js",
      statementMap: {
        "0": {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 16
          }
        }
      },
      fnMap: {
        "0": {
          name: "$literal",
          decl: {
            start: {
              line: 6,
              column: 16
            },
            end: {
              line: 6,
              column: 24
            }
          },
          loc: {
            start: {
              line: 6,
              column: 36
            },
            end: {
              line: 8,
              column: 1
            }
          },
          line: 6
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "90b9cf56a3e032d853a98b193ec23ec9683bc820"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1wlps5kln3 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1wlps5kln3();

  /**
   * Return a value without parsing.
   * @param obj
   * @param expr
   */
  function $literal(obj, expr) {
    cov_1wlps5kln3().f[0]++;
    cov_1wlps5kln3().s[0]++;
    return expr;
  }

  function cov_2de4q1bt84() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/set.js";
    var hash = "e9b2d3ce84b4ec89321c61764d73029bb58051de";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/set.js",
      statementMap: {
        "0": {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 38
          }
        },
        "1": {
          start: {
            line: 10,
            column: 13
          },
          end: {
            line: 10,
            column: 28
          }
        },
        "2": {
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 28
          }
        },
        "3": {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 80
          }
        },
        "4": {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 38
          }
        },
        "5": {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 42
          }
        },
        "6": {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 38
          }
        },
        "7": {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 58
          }
        },
        "8": {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 38
          }
        },
        "9": {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 35
          }
        },
        "10": {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 38
          }
        },
        "11": {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 68
          }
        },
        "12": {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 57,
            column: 41
          }
        },
        "13": {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 29
          }
        },
        "14": {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 41
          }
        },
        "15": {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 30
          }
        }
      },
      fnMap: {
        "0": {
          name: "$setEquals",
          decl: {
            start: {
              line: 8,
              column: 16
            },
            end: {
              line: 8,
              column: 26
            }
          },
          loc: {
            start: {
              line: 8,
              column: 38
            },
            end: {
              line: 13,
              column: 1
            }
          },
          line: 8
        },
        "1": {
          name: "$setIntersection",
          decl: {
            start: {
              line: 19,
              column: 16
            },
            end: {
              line: 19,
              column: 32
            }
          },
          loc: {
            start: {
              line: 19,
              column: 44
            },
            end: {
              line: 22,
              column: 1
            }
          },
          line: 19
        },
        "2": {
          name: "$setDifference",
          decl: {
            start: {
              line: 28,
              column: 16
            },
            end: {
              line: 28,
              column: 30
            }
          },
          loc: {
            start: {
              line: 28,
              column: 42
            },
            end: {
              line: 31,
              column: 1
            }
          },
          line: 28
        },
        "3": {
          name: "$setUnion",
          decl: {
            start: {
              line: 37,
              column: 16
            },
            end: {
              line: 37,
              column: 25
            }
          },
          loc: {
            start: {
              line: 37,
              column: 37
            },
            end: {
              line: 40,
              column: 1
            }
          },
          line: 37
        },
        "4": {
          name: "$setIsSubset",
          decl: {
            start: {
              line: 46,
              column: 16
            },
            end: {
              line: 46,
              column: 28
            }
          },
          loc: {
            start: {
              line: 46,
              column: 40
            },
            end: {
              line: 49,
              column: 1
            }
          },
          line: 46
        },
        "5": {
          name: "$anyElementTrue",
          decl: {
            start: {
              line: 55,
              column: 16
            },
            end: {
              line: 55,
              column: 31
            }
          },
          loc: {
            start: {
              line: 55,
              column: 43
            },
            end: {
              line: 59,
              column: 1
            }
          },
          line: 55
        },
        "6": {
          name: "$allElementsTrue",
          decl: {
            start: {
              line: 65,
              column: 16
            },
            end: {
              line: 65,
              column: 32
            }
          },
          loc: {
            start: {
              line: 65,
              column: 44
            },
            end: {
              line: 69,
              column: 1
            }
          },
          line: 65
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 79
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 34
            }
          }, {
            start: {
              line: 12,
              column: 38
            },
            end: {
              line: 12,
              column: 79
            }
          }],
          line: 12
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "e9b2d3ce84b4ec89321c61764d73029bb58051de"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2de4q1bt84 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2de4q1bt84();
  /**
   * Returns true if two sets have the same elements.
   * @param obj
   * @param expr
   */

  function $setEquals(obj, expr) {
    cov_2de4q1bt84().f[0]++;
    var args = (cov_2de4q1bt84().s[0]++, computeValue(obj, expr));
    var xs = (cov_2de4q1bt84().s[1]++, unique(args[0]));
    var ys = (cov_2de4q1bt84().s[2]++, unique(args[1]));
    cov_2de4q1bt84().s[3]++;
    return (cov_2de4q1bt84().b[0][0]++, xs.length === ys.length) && (cov_2de4q1bt84().b[0][1]++, xs.length === intersection(xs, ys).length);
  }
  /**
   * Returns the common elements of the input sets.
   * @param obj
   * @param expr
   */

  function $setIntersection(obj, expr) {
    cov_2de4q1bt84().f[1]++;
    var args = (cov_2de4q1bt84().s[4]++, computeValue(obj, expr));
    cov_2de4q1bt84().s[5]++;
    return intersection(args[0], args[1]);
  }
  /**
   * Returns elements of a set that do not appear in a second set.
   * @param obj
   * @param expr
   */

  function $setDifference(obj, expr) {
    cov_2de4q1bt84().f[2]++;
    var args = (cov_2de4q1bt84().s[6]++, computeValue(obj, expr));
    cov_2de4q1bt84().s[7]++;
    return args[0].filter(notInArray.bind(null, args[1]));
  }
  /**
   * Returns a set that holds all elements of the input sets.
   * @param obj
   * @param expr
   */

  function $setUnion(obj, expr) {
    cov_2de4q1bt84().f[3]++;
    var args = (cov_2de4q1bt84().s[8]++, computeValue(obj, expr));
    cov_2de4q1bt84().s[9]++;
    return union(args[0], args[1]);
  }
  /**
   * Returns true if all elements of a set appear in a second set.
   * @param obj
   * @param expr
   */

  function $setIsSubset(obj, expr) {
    cov_2de4q1bt84().f[4]++;
    var args = (cov_2de4q1bt84().s[10]++, computeValue(obj, expr));
    cov_2de4q1bt84().s[11]++;
    return intersection(args[0], args[1]).length === args[0].length;
  }
  /**
   * Returns true if any elements of a set evaluate to true, and false otherwise.
   * @param obj
   * @param expr
   */

  function $anyElementTrue(obj, expr) {
    cov_2de4q1bt84().f[5]++;
    // mongodb nests the array expression in another
    var args = (cov_2de4q1bt84().s[12]++, computeValue(obj, expr)[0]);
    cov_2de4q1bt84().s[13]++;
    return args.some(truthy);
  }
  /**
   * Returns true if all elements of a set evaluate to true, and false otherwise.
   * @param obj
   * @param expr
   */

  function $allElementsTrue(obj, expr) {
    cov_2de4q1bt84().f[6]++;
    // mongodb nests the array expression in another
    var args = (cov_2de4q1bt84().s[14]++, computeValue(obj, expr)[0]);
    cov_2de4q1bt84().s[15]++;
    return args.every(truthy);
  }

  function cov_nx5qjx4zn() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/string.js";
    var hash = "0940f841cd0e085930e63ba41d7b6fc431d28d36";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/string.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 38
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 14,
            column: 20
          }
        },
        "2": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 20
          }
        },
        "3": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 25
          }
        },
        "4": {
          start: {
            line: 26,
            column: 14
          },
          end: {
            line: 26,
            column: 37
          }
        },
        "5": {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 27,
            column: 79
          }
        },
        "6": {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 29,
            column: 20
          }
        },
        "7": {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 20
          }
        },
        "8": {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 59
          }
        },
        "9": {
          start: {
            line: 31,
            column: 14
          },
          end: {
            line: 31,
            column: 20
          }
        },
        "10": {
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 26
          }
        },
        "11": {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 33,
            column: 22
          }
        },
        "12": {
          start: {
            line: 34,
            column: 14
          },
          end: {
            line: 34,
            column: 20
          }
        },
        "13": {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 94
          }
        },
        "14": {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 92
          }
        },
        "15": {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 28
          }
        },
        "16": {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 23
          }
        },
        "17": {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 28
          }
        },
        "18": {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 41,
            column: 18
          }
        },
        "19": {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 41,
            column: 18
          }
        },
        "20": {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 60
          }
        },
        "21": {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 45,
            column: 16
          }
        },
        "22": {
          start: {
            line: 56,
            column: 15
          },
          end: {
            line: 56,
            column: 38
          }
        },
        "23": {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 58,
            column: 20
          }
        },
        "24": {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 20
          }
        },
        "25": {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 89
          }
        },
        "26": {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 34
          }
        },
        "27": {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 70
          }
        },
        "28": {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 42
          }
        },
        "29": {
          start: {
            line: 90,
            column: 15
          },
          end: {
            line: 90,
            column: 38
          }
        },
        "30": {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 19
          }
        },
        "31": {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 19
          }
        },
        "32": {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 94,
            column: 17
          }
        },
        "33": {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 94,
            column: 17
          }
        },
        "34": {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 84
          }
        },
        "35": {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 24
          }
        },
        "36": {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 24
          }
        },
        "37": {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 46
          }
        },
        "38": {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 109,
            column: 38
          }
        },
        "39": {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 19
          }
        },
        "40": {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 111,
            column: 23
          }
        },
        "41": {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 112,
            column: 23
          }
        },
        "42": {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 125
          }
        },
        "43": {
          start: {
            line: 114,
            column: 14
          },
          end: {
            line: 114,
            column: 27
          }
        },
        "44": {
          start: {
            line: 115,
            column: 21
          },
          end: {
            line: 115,
            column: 23
          }
        },
        "45": {
          start: {
            line: 116,
            column: 14
          },
          end: {
            line: 116,
            column: 15
          }
        },
        "46": {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        "47": {
          start: {
            line: 117,
            column: 17
          },
          end: {
            line: 117,
            column: 18
          }
        },
        "48": {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 118,
            column: 29
          }
        },
        "49": {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 119,
            column: 29
          }
        },
        "50": {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 41
          }
        },
        "51": {
          start: {
            line: 122,
            column: 14
          },
          end: {
            line: 122,
            column: 47
          }
        },
        "52": {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 116
          }
        },
        "53": {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 35
          }
        },
        "54": {
          start: {
            line: 135,
            column: 15
          },
          end: {
            line: 135,
            column: 38
          }
        },
        "55": {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 19
          }
        },
        "56": {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 23
          }
        },
        "57": {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 138,
            column: 23
          }
        },
        "58": {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        "59": {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        "60": {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 22
          }
        },
        "61": {
          start: {
            line: 143,
            column: 13
          },
          end: {
            line: 148,
            column: 9
          }
        },
        "62": {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 35
          }
        },
        "63": {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 42
          }
        },
        "64": {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 14
          }
        },
        "65": {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 30
          }
        },
        "66": {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 163,
            column: 39
          }
        },
        "67": {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 53
          }
        },
        "68": {
          start: {
            line: 174,
            column: 16
          },
          end: {
            line: 174,
            column: 39
          }
        },
        "69": {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 53
          }
        },
        "70": {
          start: {
            line: 177,
            column: 18
          },
          end: {
            line: 177,
            column: 36
          }
        },
        "71": {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 182,
            column: 19
          }
        },
        "72": {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 19
          }
        },
        "73": {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 183,
            column: 64
          }
        },
        "74": {
          start: {
            line: 184,
            column: 19
          },
          end: {
            line: 184,
            column: 39
          }
        },
        "75": {
          start: {
            line: 185,
            column: 15
          },
          end: {
            line: 185,
            column: 44
          }
        },
        "76": {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 187,
            column: 56
          }
        },
        "77": {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 187,
            column: 56
          }
        },
        "78": {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 16
          }
        },
        "79": {
          start: {
            line: 191,
            column: 14
          },
          end: {
            line: 191,
            column: 16
          }
        },
        "80": {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        "81": {
          start: {
            line: 192,
            column: 17
          },
          end: {
            line: 192,
            column: 18
          }
        },
        "82": {
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 34
          }
        },
        "83": {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 43
          }
        },
        "84": {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 15
          }
        }
      },
      fnMap: {
        "0": {
          name: "$concat",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 23
            }
          },
          loc: {
            start: {
              line: 10,
              column: 35
            },
            end: {
              line: 16,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "$indexOfBytes",
          decl: {
            start: {
              line: 25,
              column: 16
            },
            end: {
              line: 25,
              column: 29
            }
          },
          loc: {
            start: {
              line: 25,
              column: 41
            },
            end: {
              line: 46,
              column: 1
            }
          },
          line: 25
        },
        "2": {
          name: "$split",
          decl: {
            start: {
              line: 55,
              column: 16
            },
            end: {
              line: 55,
              column: 22
            }
          },
          loc: {
            start: {
              line: 55,
              column: 34
            },
            end: {
              line: 61,
              column: 1
            }
          },
          line: 55
        },
        "3": {
          name: "$strLenBytes",
          decl: {
            start: {
              line: 69,
              column: 16
            },
            end: {
              line: 69,
              column: 28
            }
          },
          loc: {
            start: {
              line: 69,
              column: 40
            },
            end: {
              line: 71,
              column: 1
            }
          },
          line: 69
        },
        "4": {
          name: "$strLenCP",
          decl: {
            start: {
              line: 79,
              column: 16
            },
            end: {
              line: 79,
              column: 25
            }
          },
          loc: {
            start: {
              line: 79,
              column: 37
            },
            end: {
              line: 81,
              column: 1
            }
          },
          line: 79
        },
        "5": {
          name: "$strcasecmp",
          decl: {
            start: {
              line: 89,
              column: 16
            },
            end: {
              line: 89,
              column: 27
            }
          },
          loc: {
            start: {
              line: 89,
              column: 39
            },
            end: {
              line: 99,
              column: 1
            }
          },
          line: 89
        },
        "6": {
          name: "$substrBytes",
          decl: {
            start: {
              line: 108,
              column: 16
            },
            end: {
              line: 108,
              column: 28
            }
          },
          loc: {
            start: {
              line: 108,
              column: 40
            },
            end: {
              line: 125,
              column: 1
            }
          },
          line: 108
        },
        "7": {
          name: "$substr",
          decl: {
            start: {
              line: 134,
              column: 16
            },
            end: {
              line: 134,
              column: 23
            }
          },
          loc: {
            start: {
              line: 134,
              column: 35
            },
            end: {
              line: 151,
              column: 1
            }
          },
          line: 134
        },
        "8": {
          name: "$substrCP",
          decl: {
            start: {
              line: 152,
              column: 16
            },
            end: {
              line: 152,
              column: 25
            }
          },
          loc: {
            start: {
              line: 152,
              column: 37
            },
            end: {
              line: 154,
              column: 1
            }
          },
          line: 152
        },
        "9": {
          name: "$toLower",
          decl: {
            start: {
              line: 162,
              column: 16
            },
            end: {
              line: 162,
              column: 24
            }
          },
          loc: {
            start: {
              line: 162,
              column: 36
            },
            end: {
              line: 165,
              column: 1
            }
          },
          line: 162
        },
        "10": {
          name: "$toUpper",
          decl: {
            start: {
              line: 173,
              column: 16
            },
            end: {
              line: 173,
              column: 24
            }
          },
          loc: {
            start: {
              line: 173,
              column: 36
            },
            end: {
              line: 176,
              column: 1
            }
          },
          line: 173
        },
        "11": {
          name: "toUtf8",
          decl: {
            start: {
              line: 180,
              column: 9
            },
            end: {
              line: 180,
              column: 15
            }
          },
          loc: {
            start: {
              line: 180,
              column: 19
            },
            end: {
              line: 189,
              column: 1
            }
          },
          line: 180
        },
        "12": {
          name: "utf8Encode",
          decl: {
            start: {
              line: 190,
              column: 9
            },
            end: {
              line: 190,
              column: 19
            }
          },
          loc: {
            start: {
              line: 190,
              column: 23
            },
            end: {
              line: 196,
              column: 1
            }
          },
          line: 190
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 20
            }
          }, {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 20
            }
          }],
          line: 13
        },
        "1": {
          loc: {
            start: {
              line: 28,
              column: 4
            },
            end: {
              line: 29,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 28,
              column: 4
            },
            end: {
              line: 29,
              column: 20
            }
          }, {
            start: {
              line: 28,
              column: 4
            },
            end: {
              line: 29,
              column: 20
            }
          }],
          line: 28
        },
        "2": {
          loc: {
            start: {
              line: 30,
              column: 11
            },
            end: {
              line: 30,
              column: 47
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 30,
              column: 11
            },
            end: {
              line: 30,
              column: 27
            }
          }, {
            start: {
              line: 30,
              column: 31
            },
            end: {
              line: 30,
              column: 47
            }
          }],
          line: 30
        },
        "3": {
          loc: {
            start: {
              line: 35,
              column: 16
            },
            end: {
              line: 35,
              column: 94
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 35,
              column: 16
            },
            end: {
              line: 35,
              column: 28
            }
          }, {
            start: {
              line: 35,
              column: 33
            },
            end: {
              line: 35,
              column: 48
            }
          }, {
            start: {
              line: 35,
              column: 52
            },
            end: {
              line: 35,
              column: 62
            }
          }, {
            start: {
              line: 35,
              column: 66
            },
            end: {
              line: 35,
              column: 93
            }
          }],
          line: 35
        },
        "4": {
          loc: {
            start: {
              line: 36,
              column: 12
            },
            end: {
              line: 36,
              column: 91
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 36,
              column: 12
            },
            end: {
              line: 36,
              column: 17
            }
          }, {
            start: {
              line: 36,
              column: 22
            },
            end: {
              line: 36,
              column: 32
            }
          }, {
            start: {
              line: 36,
              column: 37
            },
            end: {
              line: 36,
              column: 50
            }
          }, {
            start: {
              line: 36,
              column: 54
            },
            end: {
              line: 36,
              column: 62
            }
          }, {
            start: {
              line: 36,
              column: 66
            },
            end: {
              line: 36,
              column: 89
            }
          }],
          line: 36
        },
        "5": {
          loc: {
            start: {
              line: 38,
              column: 12
            },
            end: {
              line: 38,
              column: 22
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 38,
              column: 12
            },
            end: {
              line: 38,
              column: 17
            }
          }, {
            start: {
              line: 38,
              column: 21
            },
            end: {
              line: 38,
              column: 22
            }
          }],
          line: 38
        },
        "6": {
          loc: {
            start: {
              line: 39,
              column: 10
            },
            end: {
              line: 39,
              column: 27
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 39,
              column: 10
            },
            end: {
              line: 39,
              column: 13
            }
          }, {
            start: {
              line: 39,
              column: 17
            },
            end: {
              line: 39,
              column: 27
            }
          }],
          line: 39
        },
        "7": {
          loc: {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 18
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 18
            }
          }, {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 41,
              column: 18
            }
          }],
          line: 40
        },
        "8": {
          loc: {
            start: {
              line: 43,
              column: 11
            },
            end: {
              line: 45,
              column: 15
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 44,
              column: 10
            },
            end: {
              line: 44,
              column: 23
            }
          }, {
            start: {
              line: 45,
              column: 10
            },
            end: {
              line: 45,
              column: 15
            }
          }],
          line: 43
        },
        "9": {
          loc: {
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 20
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 20
            }
          }, {
            start: {
              line: 57,
              column: 4
            },
            end: {
              line: 58,
              column: 20
            }
          }],
          line: 57
        },
        "10": {
          loc: {
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 94,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 94,
              column: 17
            }
          }, {
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 94,
              column: 17
            }
          }],
          line: 93
        },
        "11": {
          loc: {
            start: {
              line: 93,
              column: 8
            },
            end: {
              line: 93,
              column: 42
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 93,
              column: 8
            },
            end: {
              line: 93,
              column: 21
            }
          }, {
            start: {
              line: 93,
              column: 25
            },
            end: {
              line: 93,
              column: 42
            }
          }],
          line: 93
        },
        "12": {
          loc: {
            start: {
              line: 98,
              column: 11
            },
            end: {
              line: 98,
              column: 45
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 98,
              column: 12
            },
            end: {
              line: 98,
              column: 17
            }
          }, {
            start: {
              line: 98,
              column: 21
            },
            end: {
              line: 98,
              column: 22
            }
          }, {
            start: {
              line: 98,
              column: 28
            },
            end: {
              line: 98,
              column: 33
            }
          }, {
            start: {
              line: 98,
              column: 37
            },
            end: {
              line: 98,
              column: 39
            }
          }, {
            start: {
              line: 98,
              column: 44
            },
            end: {
              line: 98,
              column: 45
            }
          }],
          line: 98
        },
        "13": {
          loc: {
            start: {
              line: 113,
              column: 11
            },
            end: {
              line: 113,
              column: 88
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 113,
              column: 11
            },
            end: {
              line: 113,
              column: 22
            }
          }, {
            start: {
              line: 113,
              column: 26
            },
            end: {
              line: 113,
              column: 41
            }
          }, {
            start: {
              line: 113,
              column: 45
            },
            end: {
              line: 113,
              column: 55
            }
          }, {
            start: {
              line: 113,
              column: 59
            },
            end: {
              line: 113,
              column: 74
            }
          }, {
            start: {
              line: 113,
              column: 78
            },
            end: {
              line: 113,
              column: 88
            }
          }],
          line: 113
        },
        "14": {
          loc: {
            start: {
              line: 123,
              column: 11
            },
            end: {
              line: 123,
              column: 33
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 123,
              column: 11
            },
            end: {
              line: 123,
              column: 21
            }
          }, {
            start: {
              line: 123,
              column: 25
            },
            end: {
              line: 123,
              column: 33
            }
          }],
          line: 123
        },
        "15": {
          loc: {
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 149,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 149,
              column: 5
            }
          }, {
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 149,
              column: 5
            }
          }],
          line: 139
        },
        "16": {
          loc: {
            start: {
              line: 140,
              column: 8
            },
            end: {
              line: 148,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 140,
              column: 8
            },
            end: {
              line: 148,
              column: 9
            }
          }, {
            start: {
              line: 140,
              column: 8
            },
            end: {
              line: 148,
              column: 9
            }
          }],
          line: 140
        },
        "17": {
          loc: {
            start: {
              line: 143,
              column: 13
            },
            end: {
              line: 148,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 143,
              column: 13
            },
            end: {
              line: 148,
              column: 9
            }
          }, {
            start: {
              line: 143,
              column: 13
            },
            end: {
              line: 148,
              column: 9
            }
          }],
          line: 143
        },
        "18": {
          loc: {
            start: {
              line: 164,
              column: 11
            },
            end: {
              line: 164,
              column: 52
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 164,
              column: 28
            },
            end: {
              line: 164,
              column: 30
            }
          }, {
            start: {
              line: 164,
              column: 33
            },
            end: {
              line: 164,
              column: 52
            }
          }],
          line: 164
        },
        "19": {
          loc: {
            start: {
              line: 175,
              column: 11
            },
            end: {
              line: 175,
              column: 52
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 175,
              column: 28
            },
            end: {
              line: 175,
              column: 30
            }
          }, {
            start: {
              line: 175,
              column: 33
            },
            end: {
              line: 175,
              column: 52
            }
          }],
          line: 175
        },
        "20": {
          loc: {
            start: {
              line: 181,
              column: 4
            },
            end: {
              line: 182,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 181,
              column: 4
            },
            end: {
              line: 182,
              column: 19
            }
          }, {
            start: {
              line: 181,
              column: 4
            },
            end: {
              line: 182,
              column: 19
            }
          }],
          line: 181
        },
        "21": {
          loc: {
            start: {
              line: 183,
              column: 16
            },
            end: {
              line: 183,
              column: 64
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 183,
              column: 18
            },
            end: {
              line: 183,
              column: 28
            }
          }, {
            start: {
              line: 183,
              column: 33
            },
            end: {
              line: 183,
              column: 34
            }
          }, {
            start: {
              line: 183,
              column: 41
            },
            end: {
              line: 183,
              column: 52
            }
          }, {
            start: {
              line: 183,
              column: 57
            },
            end: {
              line: 183,
              column: 58
            }
          }, {
            start: {
              line: 183,
              column: 63
            },
            end: {
              line: 183,
              column: 64
            }
          }],
          line: 183
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0,
        "84": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0, 0, 0],
        "4": [0, 0, 0, 0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0, 0, 0, 0],
        "13": [0, 0, 0, 0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0, 0, 0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "0940f841cd0e085930e63ba41d7b6fc431d28d36"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_nx5qjx4zn = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_nx5qjx4zn();
  /**
   * Concatenates two strings.
   *
   * @param obj
   * @param expr
   * @returns {string|*}
   */

  function $concat(obj, expr) {
    cov_nx5qjx4zn().f[0]++;
    var args = (cov_nx5qjx4zn().s[0]++, computeValue(obj, expr)); // does not allow concatenation with nulls

    cov_nx5qjx4zn().s[1]++;

    if ([null, undefined].some(inArray.bind(null, args))) {
      cov_nx5qjx4zn().b[0][0]++;
      cov_nx5qjx4zn().s[2]++;
      return null;
    } else {
      cov_nx5qjx4zn().b[0][1]++;
    }

    cov_nx5qjx4zn().s[3]++;
    return args.join('');
  }
  /**
   * Searches a string for an occurrence of a substring and returns the UTF-8 code point index of the first occurence.
   * If the substring is not found, returns -1.
   *
   * @param  {Object} obj
   * @param  {*} expr
   * @return {*}
   */

  function $indexOfBytes(obj, expr) {
    cov_nx5qjx4zn().f[1]++;
    var arr = (cov_nx5qjx4zn().s[4]++, computeValue(obj, expr));
    var errorMsg = (cov_nx5qjx4zn().s[5]++, '$indexOfBytes expression resolves to invalid an argument');
    cov_nx5qjx4zn().s[6]++;

    if (isNil(arr[0])) {
      cov_nx5qjx4zn().b[1][0]++;
      cov_nx5qjx4zn().s[7]++;
      return null;
    } else {
      cov_nx5qjx4zn().b[1][1]++;
    }

    cov_nx5qjx4zn().s[8]++;
    assert((cov_nx5qjx4zn().b[2][0]++, isString(arr[0])) && (cov_nx5qjx4zn().b[2][1]++, isString(arr[1])), errorMsg);
    var str = (cov_nx5qjx4zn().s[9]++, arr[0]);
    var searchStr = (cov_nx5qjx4zn().s[10]++, arr[1]);
    var start = (cov_nx5qjx4zn().s[11]++, arr[2]);
    var end = (cov_nx5qjx4zn().s[12]++, arr[3]);
    var valid = (cov_nx5qjx4zn().s[13]++, (cov_nx5qjx4zn().b[3][0]++, isNil(start)) || (cov_nx5qjx4zn().b[3][1]++, isNumber(start)) && (cov_nx5qjx4zn().b[3][2]++, start >= 0) && (cov_nx5qjx4zn().b[3][3]++, Math.round(start) === start));
    cov_nx5qjx4zn().s[14]++;
    valid = (cov_nx5qjx4zn().b[4][0]++, valid) && ((cov_nx5qjx4zn().b[4][1]++, isNil(end)) || (cov_nx5qjx4zn().b[4][2]++, isNumber(end)) && (cov_nx5qjx4zn().b[4][3]++, end >= 0) && (cov_nx5qjx4zn().b[4][4]++, Math.round(end) === end));
    cov_nx5qjx4zn().s[15]++;
    assert(valid, errorMsg);
    cov_nx5qjx4zn().s[16]++;
    start = (cov_nx5qjx4zn().b[5][0]++, start) || (cov_nx5qjx4zn().b[5][1]++, 0);
    cov_nx5qjx4zn().s[17]++;
    end = (cov_nx5qjx4zn().b[6][0]++, end) || (cov_nx5qjx4zn().b[6][1]++, str.length);
    cov_nx5qjx4zn().s[18]++;

    if (start > end) {
      cov_nx5qjx4zn().b[7][0]++;
      cov_nx5qjx4zn().s[19]++;
      return -1;
    } else {
      cov_nx5qjx4zn().b[7][1]++;
    }

    var index = (cov_nx5qjx4zn().s[20]++, str.substring(start, end).indexOf(searchStr));
    cov_nx5qjx4zn().s[21]++;
    return index > -1 ? (cov_nx5qjx4zn().b[8][0]++, index + start) : (cov_nx5qjx4zn().b[8][1]++, index);
  }
  /**
   * Splits a string into substrings based on a delimiter.
   * If the delimiter is not found within the string, returns an array containing the original string.
   *
   * @param  {Object} obj
   * @param  {Array} expr
   * @return {Array} Returns an array of substrings.
   */

  function $split(obj, expr) {
    cov_nx5qjx4zn().f[2]++;
    var args = (cov_nx5qjx4zn().s[22]++, computeValue(obj, expr));
    cov_nx5qjx4zn().s[23]++;

    if (isNil(args[0])) {
      cov_nx5qjx4zn().b[9][0]++;
      cov_nx5qjx4zn().s[24]++;
      return null;
    } else {
      cov_nx5qjx4zn().b[9][1]++;
    }

    cov_nx5qjx4zn().s[25]++;
    assert(args.every(isString), '$split expression must result to array(2) of strings');
    cov_nx5qjx4zn().s[26]++;
    return args[0].split(args[1]);
  }
  /**
   * Returns the number of UTF-8 encoded bytes in the specified string.
   *
   * @param  {Object} obj
   * @param  {String} expr
   * @return {Number}
   */

  function $strLenBytes(obj, expr) {
    cov_nx5qjx4zn().f[3]++;
    cov_nx5qjx4zn().s[27]++;
    return ~-encodeURI(computeValue(obj, expr)).split(/%..|./).length;
  }
  /**
   * Returns the number of UTF-8 code points in the specified string.
   *
   * @param  {Object} obj
   * @param  {String} expr
   * @return {Number}
   */

  function $strLenCP(obj, expr) {
    cov_nx5qjx4zn().f[4]++;
    cov_nx5qjx4zn().s[28]++;
    return computeValue(obj, expr).length;
  }
  /**
   * Compares two strings and returns an integer that reflects the comparison.
   *
   * @param obj
   * @param expr
   * @returns {number}
   */

  function $strcasecmp(obj, expr) {
    cov_nx5qjx4zn().f[5]++;
    var args = (cov_nx5qjx4zn().s[29]++, computeValue(obj, expr));
    var a = (cov_nx5qjx4zn().s[30]++, args[0]);
    var b = (cov_nx5qjx4zn().s[31]++, args[1]);
    cov_nx5qjx4zn().s[32]++;

    if ((cov_nx5qjx4zn().b[11][0]++, isEqual(a, b)) || (cov_nx5qjx4zn().b[11][1]++, args.every(isNil))) {
      cov_nx5qjx4zn().b[10][0]++;
      cov_nx5qjx4zn().s[33]++;
      return 0;
    } else {
      cov_nx5qjx4zn().b[10][1]++;
    }

    cov_nx5qjx4zn().s[34]++;
    assert(args.every(isString), '$strcasecmp must resolve to array(2) of strings');
    cov_nx5qjx4zn().s[35]++;
    a = a.toUpperCase();
    cov_nx5qjx4zn().s[36]++;
    b = b.toUpperCase();
    cov_nx5qjx4zn().s[37]++;
    return (cov_nx5qjx4zn().b[12][0]++, a > b) && (cov_nx5qjx4zn().b[12][1]++, 1) || (cov_nx5qjx4zn().b[12][2]++, a < b) && (cov_nx5qjx4zn().b[12][3]++, -1) || (cov_nx5qjx4zn().b[12][4]++, 0);
  }
  /**
   * Returns a substring of a string, starting at a specified index position and including the specified number of characters.
   * The index is zero-based.
   *
   * @param obj
   * @param expr
   * @returns {string}
   */

  function $substrBytes(obj, expr) {
    cov_nx5qjx4zn().f[6]++;
    var args = (cov_nx5qjx4zn().s[38]++, computeValue(obj, expr));
    var s = (cov_nx5qjx4zn().s[39]++, args[0]);
    var index = (cov_nx5qjx4zn().s[40]++, args[1]);
    var count = (cov_nx5qjx4zn().s[41]++, args[2]);
    cov_nx5qjx4zn().s[42]++;
    assert((cov_nx5qjx4zn().b[13][0]++, isString(s)) && (cov_nx5qjx4zn().b[13][1]++, isNumber(index)) && (cov_nx5qjx4zn().b[13][2]++, index >= 0) && (cov_nx5qjx4zn().b[13][3]++, isNumber(count)) && (cov_nx5qjx4zn().b[13][4]++, count >= 0), '$substrBytes: invalid arguments');
    var buf = (cov_nx5qjx4zn().s[43]++, utf8Encode(s));
    var validIndex = (cov_nx5qjx4zn().s[44]++, []);
    var acc = (cov_nx5qjx4zn().s[45]++, 0);
    cov_nx5qjx4zn().s[46]++;

    for (var i = (cov_nx5qjx4zn().s[47]++, 0); i < buf.length; i++) {
      cov_nx5qjx4zn().s[48]++;
      validIndex.push(acc);
      cov_nx5qjx4zn().s[49]++;
      acc += buf[i].length;
    }

    var begin = (cov_nx5qjx4zn().s[50]++, validIndex.indexOf(index));
    var end = (cov_nx5qjx4zn().s[51]++, validIndex.indexOf(index + count));
    cov_nx5qjx4zn().s[52]++;
    assert((cov_nx5qjx4zn().b[14][0]++, begin > -1) && (cov_nx5qjx4zn().b[14][1]++, end > -1), '$substrBytes: invalid range, start or end index is a UTF-8 continuation byte.');
    cov_nx5qjx4zn().s[53]++;
    return s.substring(begin, end);
  }
  /**
   * Returns a substring of a string, starting at a specified index position and including the specified number of characters.
   * The index is zero-based.
   *
   * @param obj
   * @param expr
   * @returns {string}
   */

  function $substr(obj, expr) {
    cov_nx5qjx4zn().f[7]++;
    var args = (cov_nx5qjx4zn().s[54]++, computeValue(obj, expr));
    var s = (cov_nx5qjx4zn().s[55]++, args[0]);
    var index = (cov_nx5qjx4zn().s[56]++, args[1]);
    var count = (cov_nx5qjx4zn().s[57]++, args[2]);
    cov_nx5qjx4zn().s[58]++;

    if (isString(s)) {
      cov_nx5qjx4zn().b[15][0]++;
      cov_nx5qjx4zn().s[59]++;

      if (index < 0) {
        cov_nx5qjx4zn().b[16][0]++;
        cov_nx5qjx4zn().s[60]++;
        return '';
      } else {
        cov_nx5qjx4zn().b[16][1]++;
        cov_nx5qjx4zn().s[61]++;

        if (count < 0) {
          cov_nx5qjx4zn().b[17][0]++;
          cov_nx5qjx4zn().s[62]++;
          return s.substr(index);
        } else {
          cov_nx5qjx4zn().b[17][1]++;
          cov_nx5qjx4zn().s[63]++;
          return s.substr(index, count);
        }
      }
    } else {
      cov_nx5qjx4zn().b[15][1]++;
    }

    cov_nx5qjx4zn().s[64]++;
    return '';
  }
  function $substrCP(obj, expr) {
    cov_nx5qjx4zn().f[8]++;
    cov_nx5qjx4zn().s[65]++;
    return $substr(obj, expr);
  }
  /**
   * Converts a string to lowercase.
   *
   * @param obj
   * @param expr
   * @returns {string}
   */

  function $toLower(obj, expr) {
    cov_nx5qjx4zn().f[9]++;
    var value = (cov_nx5qjx4zn().s[66]++, computeValue(obj, expr));
    cov_nx5qjx4zn().s[67]++;
    return isEmpty(value) ? (cov_nx5qjx4zn().b[18][0]++, '') : (cov_nx5qjx4zn().b[18][1]++, value.toLowerCase());
  }
  /**
   * Converts a string to uppercase.
   *
   * @param obj
   * @param expr
   * @returns {string}
   */

  function $toUpper(obj, expr) {
    cov_nx5qjx4zn().f[10]++;
    var value = (cov_nx5qjx4zn().s[68]++, computeValue(obj, expr));
    cov_nx5qjx4zn().s[69]++;
    return isEmpty(value) ? (cov_nx5qjx4zn().b[19][0]++, '') : (cov_nx5qjx4zn().b[19][1]++, value.toUpperCase());
  }
  var UTF8_MASK = (cov_nx5qjx4zn().s[70]++, [0xC0, 0xE0, 0xF0]); // encodes a unicode code point to a utf8 byte sequence
  // https://encoding.spec.whatwg.org/#utf-8

  function toUtf8(n) {
    cov_nx5qjx4zn().f[11]++;
    cov_nx5qjx4zn().s[71]++;

    if (n < 0x80) {
      cov_nx5qjx4zn().b[20][0]++;
      cov_nx5qjx4zn().s[72]++;
      return [n];
    } else {
      cov_nx5qjx4zn().b[20][1]++;
    }

    var count = (cov_nx5qjx4zn().s[73]++, (cov_nx5qjx4zn().b[21][0]++, n < 0x0800) && (cov_nx5qjx4zn().b[21][1]++, 1) || (cov_nx5qjx4zn().b[21][2]++, n < 0x10000) && (cov_nx5qjx4zn().b[21][3]++, 2) || (cov_nx5qjx4zn().b[21][4]++, 3));
    var offset = (cov_nx5qjx4zn().s[74]++, UTF8_MASK[count - 1]);
    var utf8 = (cov_nx5qjx4zn().s[75]++, [(n >> 6 * count) + offset]);
    cov_nx5qjx4zn().s[76]++;

    while (count > 0) {
      cov_nx5qjx4zn().s[77]++;
      utf8.push(0x80 | n >> 6 * --count & 0x3F);
    }

    cov_nx5qjx4zn().s[78]++;
    return utf8;
  }

  function utf8Encode(s) {
    cov_nx5qjx4zn().f[12]++;
    var buf = (cov_nx5qjx4zn().s[79]++, []);
    cov_nx5qjx4zn().s[80]++;

    for (var i = (cov_nx5qjx4zn().s[81]++, 0), len = (cov_nx5qjx4zn().s[82]++, s.length); i < len; i++) {
      cov_nx5qjx4zn().s[83]++;
      buf.push(toUtf8(s.codePointAt(i)));
    }

    cov_nx5qjx4zn().s[84]++;
    return buf;
  }

  function cov_25cxyac3s3() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/variable.js";
    var hash = "990d658642b5842af9d0995551db1c4c6346c4ea";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/variable.js",
      statementMap: {
        "0": {
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 13,
            column: 28
          }
        },
        "1": {
          start: {
            line: 14,
            column: 17
          },
          end: {
            line: 14,
            column: 24
          }
        },
        "2": {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 20,
            column: 7
          }
        },
        "3": {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 50
          }
        },
        "4": {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 31
          }
        },
        "5": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 27
          }
        },
        "6": {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 37
          }
        }
      },
      fnMap: {
        "0": {
          name: "$let",
          decl: {
            start: {
              line: 12,
              column: 16
            },
            end: {
              line: 12,
              column: 20
            }
          },
          loc: {
            start: {
              line: 12,
              column: 32
            },
            end: {
              line: 22,
              column: 1
            }
          },
          line: 12
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 16,
              column: 34
            },
            end: {
              line: 16,
              column: 35
            }
          },
          loc: {
            start: {
              line: 16,
              column: 41
            },
            end: {
              line: 20,
              column: 5
            }
          },
          line: 16
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "990d658642b5842af9d0995551db1c4c6346c4ea"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_25cxyac3s3 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_25cxyac3s3();
  /**
   * Defines variables for use within the scope of a sub-expression and returns the result of the sub-expression.
   *
   * @param obj
   * @param expr
   * @returns {*}
   */

  function $let(obj, expr) {
    cov_25cxyac3s3().f[0]++;
    var varsExpr = (cov_25cxyac3s3().s[0]++, expr.vars);
    var inExpr = (cov_25cxyac3s3().s[1]++, expr["in"]); // resolve vars

    cov_25cxyac3s3().s[2]++;
    Object.keys(varsExpr).forEach(function (key) {
      cov_25cxyac3s3().f[1]++;
      var val = (cov_25cxyac3s3().s[3]++, computeValue(obj, varsExpr[key]));
      var tempKey = (cov_25cxyac3s3().s[4]++, '$' + key);
      cov_25cxyac3s3().s[5]++;
      obj[tempKey] = val;
    });
    cov_25cxyac3s3().s[6]++;
    return computeValue(obj, inExpr);
  }

  function cov_1sed87gg7p() {
    var path = "/Users/francis/workspace/mingo/lib/operators/expression/index.js";
    var hash = "d8e1f03b6048d7b6e62c64a8c284a04532312b84";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/expression/index.js",
      statementMap: {},
      fnMap: {},
      branchMap: {},
      s: {},
      f: {},
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "d8e1f03b6048d7b6e62c64a8c284a04532312b84"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1sed87gg7p = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1sed87gg7p();

  var expressionOperators = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $abs: $abs,
    $add: $add,
    $ceil: $ceil,
    $divide: $divide,
    $exp: $exp,
    $floor: $floor,
    $ln: $ln,
    $log: $log,
    $log10: $log10,
    $mod: $mod,
    $multiply: $multiply,
    $pow: $pow,
    $round: $round,
    $sqrt: $sqrt,
    $subtract: $subtract,
    $trunc: $trunc,
    $arrayElemAt: $arrayElemAt,
    $arrayToObject: $arrayToObject,
    $concatArrays: $concatArrays,
    $filter: $filter,
    $in: $in,
    $indexOfArray: $indexOfArray,
    $isArray: $isArray,
    $map: $map,
    $objectToArray: $objectToArray,
    $range: $range,
    $reduce: $reduce,
    $reverseArray: $reverseArray,
    $size: $size,
    $slice: $slice,
    $zip: $zip,
    $mergeObjects: $mergeObjects,
    $and: $and,
    $or: $or,
    $not: $not,
    $eq: $eq$1,
    $gt: $gt$1,
    $gte: $gte$1,
    $lt: $lt$1,
    $lte: $lte$1,
    $ne: $ne$1,
    $nin: $nin$1,
    $cmp: $cmp,
    $cond: $cond,
    $switch: $switch,
    $ifNull: $ifNull,
    $type: $type$1,
    $toBool: $toBool,
    $toString: $toString,
    toInteger: toInteger,
    $toInt: $toInt,
    $toLong: $toLong,
    $toDouble: $toDouble,
    $toDecimal: $toDecimal,
    $toDate: $toDate,
    $convert: $convert,
    $dayOfYear: $dayOfYear,
    $dayOfMonth: $dayOfMonth,
    $dayOfWeek: $dayOfWeek,
    $year: $year,
    $month: $month,
    $week: $week,
    $hour: $hour,
    $minute: $minute,
    $second: $second,
    $millisecond: $millisecond,
    $dateToString: $dateToString,
    $dateFromString: $dateFromString,
    $literal: $literal,
    $setEquals: $setEquals,
    $setIntersection: $setIntersection,
    $setDifference: $setDifference,
    $setUnion: $setUnion,
    $setIsSubset: $setIsSubset,
    $anyElementTrue: $anyElementTrue,
    $allElementsTrue: $allElementsTrue,
    $concat: $concat,
    $indexOfBytes: $indexOfBytes,
    $split: $split,
    $strLenBytes: $strLenBytes,
    $strLenCP: $strLenCP,
    $strcasecmp: $strcasecmp,
    $substrBytes: $substrBytes,
    $substr: $substr,
    $substrCP: $substrCP,
    $toLower: $toLower,
    $toUpper: $toUpper,
    $let: $let
  });

  function cov_85rjgonjx() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/push.js";
    var hash = "c9fc6c9e708c89b1b9df291b9d08e50bfa7e305e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/push.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 12,
            column: 26
          }
        },
        "1": {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 26
          }
        },
        "2": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 58
          }
        },
        "3": {
          start: {
            line: 13,
            column: 33
          },
          end: {
            line: 13,
            column: 56
          }
        }
      },
      fnMap: {
        "0": {
          name: "$push",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 21
            }
          },
          loc: {
            start: {
              line: 10,
              column: 40
            },
            end: {
              line: 14,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 13,
              column: 26
            },
            end: {
              line: 13,
              column: 27
            }
          },
          loc: {
            start: {
              line: 13,
              column: 33
            },
            end: {
              line: 13,
              column: 56
            }
          },
          line: 13
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          }, {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          }],
          line: 11
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "c9fc6c9e708c89b1b9df291b9d08e50bfa7e305e"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_85rjgonjx = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_85rjgonjx();
  /**
   * Returns an array of all values for the selected field among for each document in that group.
   *
   * @param collection
   * @param expr
   * @returns {Array|*}
   */

  function $push(collection, expr) {
    cov_85rjgonjx().f[0]++;
    cov_85rjgonjx().s[0]++;

    if (isNil(expr)) {
      cov_85rjgonjx().b[0][0]++;
      cov_85rjgonjx().s[1]++;
      return collection;
    } else {
      cov_85rjgonjx().b[0][1]++;
    }

    cov_85rjgonjx().s[2]++;
    return collection.map(function (obj) {
      cov_85rjgonjx().f[1]++;
      cov_85rjgonjx().s[3]++;
      return computeValue(obj, expr);
    });
  }

  function cov_dfyhalgv0() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/addToSet.js";
    var hash = "79f0c3db1e39e7588c5b44f1580189c9374554be";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/addToSet.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 43
          }
        }
      },
      fnMap: {
        "0": {
          name: "$addToSet",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 25
            }
          },
          loc: {
            start: {
              line: 10,
              column: 44
            },
            end: {
              line: 12,
              column: 1
            }
          },
          line: 10
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "79f0c3db1e39e7588c5b44f1580189c9374554be"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_dfyhalgv0 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_dfyhalgv0();
  /**
   * Returns an array of all the unique values for the selected field among for each document in that group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $addToSet(collection, expr) {
    cov_dfyhalgv0().f[0]++;
    cov_dfyhalgv0().s[0]++;
    return unique($push(collection, expr));
  }

  function cov_dtbtfc3ic() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/avg.js";
    var hash = "41a736e907626cfe9c36445e70d2a2640aaf022e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/avg.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 55
          }
        },
        "1": {
          start: {
            line: 12,
            column: 14
          },
          end: {
            line: 12,
            column: 50
          }
        },
        "2": {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 12,
            column: 46
          }
        },
        "3": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 36
          }
        }
      },
      fnMap: {
        "0": {
          name: "$avg",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 20
            }
          },
          loc: {
            start: {
              line: 10,
              column: 39
            },
            end: {
              line: 14,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 12,
              column: 27
            },
            end: {
              line: 12,
              column: 28
            }
          },
          loc: {
            start: {
              line: 12,
              column: 39
            },
            end: {
              line: 12,
              column: 46
            }
          },
          line: 12
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 13,
              column: 18
            },
            end: {
              line: 13,
              column: 34
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 13,
              column: 18
            },
            end: {
              line: 13,
              column: 29
            }
          }, {
            start: {
              line: 13,
              column: 33
            },
            end: {
              line: 13,
              column: 34
            }
          }],
          line: 13
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "41a736e907626cfe9c36445e70d2a2640aaf022e"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_dtbtfc3ic = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_dtbtfc3ic();
  /**
   * Returns an average of all the values in a group.
   *
   * @param collection
   * @param expr
   * @returns {number}
   */

  function $avg(collection, expr) {
    cov_dtbtfc3ic().f[0]++;
    var data = (cov_dtbtfc3ic().s[0]++, $push(collection, expr).filter(isNumber));
    var sum = (cov_dtbtfc3ic().s[1]++, reduce(data, function (acc, n) {
      cov_dtbtfc3ic().f[1]++;
      cov_dtbtfc3ic().s[2]++;
      return acc + n;
    }, 0));
    cov_dtbtfc3ic().s[3]++;
    return sum / ((cov_dtbtfc3ic().b[0][0]++, data.length) || (cov_dtbtfc3ic().b[0][1]++, 1));
  }

  function cov_i66gg1l49() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/first.js";
    var hash = "2d7b7efb52d0720a1ece4fe761347110b820de7a";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/first.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 81
          }
        }
      },
      fnMap: {
        "0": {
          name: "$first",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 22
            }
          },
          loc: {
            start: {
              line: 9,
              column: 41
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 9
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 10,
              column: 11
            },
            end: {
              line: 10,
              column: 80
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 10,
              column: 35
            },
            end: {
              line: 10,
              column: 68
            }
          }, {
            start: {
              line: 10,
              column: 71
            },
            end: {
              line: 10,
              column: 80
            }
          }],
          line: 10
        }
      },
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "2d7b7efb52d0720a1ece4fe761347110b820de7a"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_i66gg1l49 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_i66gg1l49();
  /**
   * Returns the first value in a group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $first(collection, expr) {
    cov_i66gg1l49().f[0]++;
    cov_i66gg1l49().s[0]++;
    return collection.length > 0 ? (cov_i66gg1l49().b[0][0]++, computeValue(collection[0], expr)) : (cov_i66gg1l49().b[0][1]++, undefined);
  }

  function cov_1di798lxtg() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/last.js";
    var hash = "fffd408d895f484c49b36a3ff25377e72fc59908";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/last.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 101
          }
        }
      },
      fnMap: {
        "0": {
          name: "$last",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 21
            }
          },
          loc: {
            start: {
              line: 9,
              column: 40
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 9
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 10,
              column: 11
            },
            end: {
              line: 10,
              column: 100
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 10,
              column: 35
            },
            end: {
              line: 10,
              column: 88
            }
          }, {
            start: {
              line: 10,
              column: 91
            },
            end: {
              line: 10,
              column: 100
            }
          }],
          line: 10
        }
      },
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "fffd408d895f484c49b36a3ff25377e72fc59908"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1di798lxtg = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1di798lxtg();
  /**
   * Returns the last value in a group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $last(collection, expr) {
    cov_1di798lxtg().f[0]++;
    cov_1di798lxtg().s[0]++;
    return collection.length > 0 ? (cov_1di798lxtg().b[0][0]++, computeValue(collection[collection.length - 1], expr)) : (cov_1di798lxtg().b[0][1]++, undefined);
  }

  function cov_cq7mqkug() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/max.js";
    var hash = "94c2a930196fecc048b945a2e2ae620f32d42633";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/max.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 101
          }
        },
        "1": {
          start: {
            line: 11,
            column: 55
          },
          end: {
            line: 11,
            column: 88
          }
        }
      },
      fnMap: {
        "0": {
          name: "$max",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 20
            }
          },
          loc: {
            start: {
              line: 10,
              column: 39
            },
            end: {
              line: 12,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 11,
              column: 43
            },
            end: {
              line: 11,
              column: 44
            }
          },
          loc: {
            start: {
              line: 11,
              column: 55
            },
            end: {
              line: 11,
              column: 88
            }
          },
          line: 11
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 11,
              column: 55
            },
            end: {
              line: 11,
              column: 88
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 11,
              column: 81
            },
            end: {
              line: 11,
              column: 82
            }
          }, {
            start: {
              line: 11,
              column: 85
            },
            end: {
              line: 11,
              column: 88
            }
          }],
          line: 11
        },
        "1": {
          loc: {
            start: {
              line: 11,
              column: 56
            },
            end: {
              line: 11,
              column: 77
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 11,
              column: 56
            },
            end: {
              line: 11,
              column: 66
            }
          }, {
            start: {
              line: 11,
              column: 70
            },
            end: {
              line: 11,
              column: 77
            }
          }],
          line: 11
        }
      },
      s: {
        "0": 0,
        "1": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "94c2a930196fecc048b945a2e2ae620f32d42633"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_cq7mqkug = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_cq7mqkug();
  /**
   * Returns the highest value in a group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $max(collection, expr) {
    cov_cq7mqkug().f[0]++;
    cov_cq7mqkug().s[0]++;
    return reduce($push(collection, expr), function (acc, n) {
      cov_cq7mqkug().f[1]++;
      cov_cq7mqkug().s[1]++;
      return (cov_cq7mqkug().b[1][0]++, isNil(acc)) || (cov_cq7mqkug().b[1][1]++, n > acc) ? (cov_cq7mqkug().b[0][0]++, n) : (cov_cq7mqkug().b[0][1]++, acc);
    }, undefined);
  }

  function cov_gaqepvol2() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/mergeObjects.js";
    var hash = "e89fb9ca8109838948c0069662b06b0a3af4afc9";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/mergeObjects.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 91
          }
        },
        "1": {
          start: {
            line: 11,
            column: 43
          },
          end: {
            line: 11,
            column: 85
          }
        }
      },
      fnMap: {
        "0": {
          name: "$mergeObjects",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 29
            }
          },
          loc: {
            start: {
              line: 10,
              column: 48
            },
            end: {
              line: 12,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 11,
              column: 30
            },
            end: {
              line: 11,
              column: 31
            }
          },
          loc: {
            start: {
              line: 11,
              column: 43
            },
            end: {
              line: 11,
              column: 85
            }
          },
          line: 11
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "e89fb9ca8109838948c0069662b06b0a3af4afc9"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_gaqepvol2 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_gaqepvol2();
  /**
   * Combines multiple documents into a single document.
   *
   * @param collection
   * @param expr
   * @returns {Array|*}
   */

  function $mergeObjects$1(collection, expr) {
    cov_gaqepvol2().f[0]++;
    cov_gaqepvol2().s[0]++;
    return reduce(collection, function (memo, o) {
      cov_gaqepvol2().f[1]++;
      cov_gaqepvol2().s[1]++;
      return Object.assign(memo, computeValue(o, expr));
    }, {});
  }

  function cov_1dnvvy0657() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/min.js";
    var hash = "792647dbb25adf6eec4c09cc11ff397832f1d632";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/min.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 101
          }
        },
        "1": {
          start: {
            line: 11,
            column: 55
          },
          end: {
            line: 11,
            column: 88
          }
        }
      },
      fnMap: {
        "0": {
          name: "$min",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 20
            }
          },
          loc: {
            start: {
              line: 10,
              column: 39
            },
            end: {
              line: 12,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 11,
              column: 43
            },
            end: {
              line: 11,
              column: 44
            }
          },
          loc: {
            start: {
              line: 11,
              column: 55
            },
            end: {
              line: 11,
              column: 88
            }
          },
          line: 11
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 11,
              column: 55
            },
            end: {
              line: 11,
              column: 88
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 11,
              column: 81
            },
            end: {
              line: 11,
              column: 82
            }
          }, {
            start: {
              line: 11,
              column: 85
            },
            end: {
              line: 11,
              column: 88
            }
          }],
          line: 11
        },
        "1": {
          loc: {
            start: {
              line: 11,
              column: 56
            },
            end: {
              line: 11,
              column: 77
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 11,
              column: 56
            },
            end: {
              line: 11,
              column: 66
            }
          }, {
            start: {
              line: 11,
              column: 70
            },
            end: {
              line: 11,
              column: 77
            }
          }],
          line: 11
        }
      },
      s: {
        "0": 0,
        "1": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "792647dbb25adf6eec4c09cc11ff397832f1d632"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1dnvvy0657 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1dnvvy0657();
  /**
   * Returns the lowest value in a group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $min(collection, expr) {
    cov_1dnvvy0657().f[0]++;
    cov_1dnvvy0657().s[0]++;
    return reduce($push(collection, expr), function (acc, n) {
      cov_1dnvvy0657().f[1]++;
      cov_1dnvvy0657().s[1]++;
      return (cov_1dnvvy0657().b[1][0]++, isNil(acc)) || (cov_1dnvvy0657().b[1][1]++, n < acc) ? (cov_1dnvvy0657().b[0][0]++, n) : (cov_1dnvvy0657().b[0][1]++, acc);
    }, undefined);
  }

  function cov_ofjzp9s8z() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/stdDevPop.js";
    var hash = "7496e9b98cae92219fc64ac5421993b511bc6bd7";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/stdDevPop.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 67
          }
        }
      },
      fnMap: {
        "0": {
          name: "$stdDevPop",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 26
            }
          },
          loc: {
            start: {
              line: 10,
              column: 45
            },
            end: {
              line: 12,
              column: 1
            }
          },
          line: 10
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "7496e9b98cae92219fc64ac5421993b511bc6bd7"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_ofjzp9s8z = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_ofjzp9s8z();
  /**
   * Returns the population standard deviation of the input values.
   *
   * @param  {Array} collection
   * @param  {Object} expr
   * @return {Number}
   */

  function $stdDevPop(collection, expr) {
    cov_ofjzp9s8z().f[0]++;
    cov_ofjzp9s8z().s[0]++;
    return stddev($push(collection, expr).filter(isNumber), false);
  }

  function cov_1qxxz22fqw() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/stdDevSamp.js";
    var hash = "697a64cba796ad715ce770ec69d99a5cdadf1471";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/stdDevSamp.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 66
          }
        }
      },
      fnMap: {
        "0": {
          name: "$stdDevSamp",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 27
            }
          },
          loc: {
            start: {
              line: 9,
              column: 46
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 9
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "697a64cba796ad715ce770ec69d99a5cdadf1471"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1qxxz22fqw = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1qxxz22fqw();
  /**
   * Returns the sample standard deviation of the input values.
   * @param  {Array} collection
   * @param  {Object} expr
   * @return {Number|null}
   */

  function $stdDevSamp(collection, expr) {
    cov_1qxxz22fqw().f[0]++;
    cov_1qxxz22fqw().s[0]++;
    return stddev($push(collection, expr).filter(isNumber), true);
  }

  function cov_2hhmkf8zhn() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/sum.js";
    var hash = "f541f7a9a87c10ca820cb7b501f903c75f2de882";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/sum.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 12,
            column: 17
          }
        },
        "1": {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 17
          }
        },
        "2": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 15,
            column: 40
          }
        },
        "3": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 40
          }
        },
        "4": {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 84
          }
        },
        "5": {
          start: {
            line: 16,
            column: 72
          },
          end: {
            line: 16,
            column: 79
          }
        }
      },
      fnMap: {
        "0": {
          name: "$sum",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 20
            }
          },
          loc: {
            start: {
              line: 10,
              column: 39
            },
            end: {
              line: 17,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 16,
              column: 60
            },
            end: {
              line: 16,
              column: 61
            }
          },
          loc: {
            start: {
              line: 16,
              column: 72
            },
            end: {
              line: 16,
              column: 79
            }
          },
          line: 16
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 17
            }
          }, {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 17
            }
          }],
          line: 11
        },
        "1": {
          loc: {
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 15,
              column: 40
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 15,
              column: 40
            }
          }, {
            start: {
              line: 14,
              column: 4
            },
            end: {
              line: 15,
              column: 40
            }
          }],
          line: 14
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "f541f7a9a87c10ca820cb7b501f903c75f2de882"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2hhmkf8zhn = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2hhmkf8zhn();
  /**
   * Returns the sum of all the values in a group.
   *
   * @param collection
   * @param expr
   * @returns {*}
   */

  function $sum(collection, expr) {
    cov_2hhmkf8zhn().f[0]++;
    cov_2hhmkf8zhn().s[0]++;

    if (!isArray(collection)) {
      cov_2hhmkf8zhn().b[0][0]++;
      cov_2hhmkf8zhn().s[1]++;
      return 0;
    } else {
      cov_2hhmkf8zhn().b[0][1]++;
    } // take a short cut if expr is number literal


    cov_2hhmkf8zhn().s[2]++;

    if (isNumber(expr)) {
      cov_2hhmkf8zhn().b[1][0]++;
      cov_2hhmkf8zhn().s[3]++;
      return collection.length * expr;
    } else {
      cov_2hhmkf8zhn().b[1][1]++;
    }

    cov_2hhmkf8zhn().s[4]++;
    return reduce($push(collection, expr).filter(isNumber), function (acc, n) {
      cov_2hhmkf8zhn().f[1]++;
      cov_2hhmkf8zhn().s[5]++;
      return acc + n;
    }, 0);
  }

  function cov_4uc7bmp64() {
    var path = "/Users/francis/workspace/mingo/lib/operators/group/index.js";
    var hash = "b0eee39696bb38291d683e691ce707123044c75b";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/group/index.js",
      statementMap: {},
      fnMap: {},
      branchMap: {},
      s: {},
      f: {},
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "b0eee39696bb38291d683e691ce707123044c75b"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_4uc7bmp64 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_4uc7bmp64();

  var groupOperators = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $addToSet: $addToSet,
    $avg: $avg,
    $first: $first,
    $last: $last,
    $max: $max,
    $mergeObjects: $mergeObjects$1,
    $min: $min,
    $push: $push,
    $stdDevPop: $stdDevPop,
    $stdDevSamp: $stdDevSamp,
    $sum: $sum
  });

  function cov_1rlejrc3hs() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/addFields.js";
    var hash = "2514253a152ed2ed78c9d0058e1febbf2373af2e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/addFields.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 12,
            column: 30
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 14,
            column: 26
          }
        },
        "2": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 26
          }
        },
        "3": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 22,
            column: 7
          }
        },
        "4": {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 35
          }
        },
        "5": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 11
          }
        },
        "6": {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 57
          }
        },
        "7": {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 19,
            column: 46
          }
        },
        "8": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 22
          }
        },
        "9": {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 27,
            column: 30
          }
        }
      },
      fnMap: {
        "0": {
          name: "$addFields",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 26
            }
          },
          loc: {
            start: {
              line: 11,
              column: 50
            },
            end: {
              line: 23,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 15,
              column: 26
            },
            end: {
              line: 15,
              column: 27
            }
          },
          loc: {
            start: {
              line: 15,
              column: 33
            },
            end: {
              line: 22,
              column: 5
            }
          },
          line: 15
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 17,
              column: 24
            },
            end: {
              line: 17,
              column: 25
            }
          },
          loc: {
            start: {
              line: 17,
              column: 35
            },
            end: {
              line: 20,
              column: 9
            }
          },
          line: 17
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 26
            }
          }, {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 14,
              column: 26
            }
          }],
          line: 13
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "2514253a152ed2ed78c9d0058e1febbf2373af2e"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1rlejrc3hs = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1rlejrc3hs();
  /**
   * Adds new fields to documents.
   * Outputs documents that contain all existing fields from the input documents and newly added fields.
   *
   * @param {Array} collection
   * @param {*} expr
   * @param {Object} opt Pipeline options
   */

  function $addFields(collection, expr, opt) {
    cov_1rlejrc3hs().f[0]++;
    var newFields = (cov_1rlejrc3hs().s[0]++, keys(expr));
    cov_1rlejrc3hs().s[1]++;

    if (newFields.length === 0) {
      cov_1rlejrc3hs().b[0][0]++;
      cov_1rlejrc3hs().s[2]++;
      return collection;
    } else {
      cov_1rlejrc3hs().b[0][1]++;
    }

    cov_1rlejrc3hs().s[3]++;
    return collection.map(function (obj) {
      cov_1rlejrc3hs().f[1]++;
      var newObj = (cov_1rlejrc3hs().s[4]++, cloneDeep(obj));
      cov_1rlejrc3hs().s[5]++;
      each(newFields, function (field) {
        cov_1rlejrc3hs().f[2]++;
        var newValue = (cov_1rlejrc3hs().s[6]++, computeValue(obj, expr[field]));
        cov_1rlejrc3hs().s[7]++;
        setValue(newObj, field, newValue);
      });
      cov_1rlejrc3hs().s[8]++;
      return newObj;
    });
  }
  /**
   * Alias for $addFields.
   */

  var $set = (cov_1rlejrc3hs().s[9]++, $addFields);

  function cov_ufkloqraq() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/bucket.js";
    var hash = "2743457548a3b8fdd4eea7055b5e11308429fec4";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/bucket.js",
      statementMap: {
        "0": {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 13,
            column: 36
          }
        },
        "1": {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 14,
            column: 36
          }
        },
        "2": {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 29
          }
        },
        "3": {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 49
          }
        },
        "4": {
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 62
          }
        },
        "5": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 99
          }
        },
        "6": {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 34
          }
        },
        "7": {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        "8": {
          start: {
            line: 20,
            column: 17
          },
          end: {
            line: 20,
            column: 18
          }
        },
        "9": {
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 20,
            column: 47
          }
        },
        "10": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 110
          }
        },
        "11": {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 108
          }
        },
        "12": {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 128
          }
        },
        "13": {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 20
          }
        },
        "14": {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 45
          }
        },
        "15": {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 28,
            column: 43
          }
        },
        "16": {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 31,
            column: 33
          }
        },
        "17": {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 33
          }
        },
        "18": {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 24
          }
        },
        "19": {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 58,
            column: 7
          }
        },
        "20": {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        "21": {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 47,
            column: 15
          }
        },
        "22": {
          start: {
            line: 36,
            column: 26
          },
          end: {
            line: 36,
            column: 57
          }
        },
        "23": {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 46,
            column: 17
          }
        },
        "24": {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 100
          }
        },
        "25": {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 50
          }
        },
        "26": {
          start: {
            line: 42,
            column: 20
          },
          end: {
            line: 42,
            column: 135
          }
        },
        "27": {
          start: {
            line: 43,
            column: 32
          },
          end: {
            line: 43,
            column: 64
          }
        },
        "28": {
          start: {
            line: 44,
            column: 35
          },
          end: {
            line: 44,
            column: 69
          }
        },
        "29": {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 48
          }
        },
        "30": {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 29
          }
        },
        "31": {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 51,
            column: 44
          }
        },
        "32": {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 44
          }
        },
        "33": {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 55,
            column: 15
          }
        },
        "34": {
          start: {
            line: 53,
            column: 26
          },
          end: {
            line: 53,
            column: 68
          }
        },
        "35": {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 58
          }
        },
        "36": {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 31
          }
        }
      },
      fnMap: {
        "0": {
          name: "$bucket",
          decl: {
            start: {
              line: 12,
              column: 16
            },
            end: {
              line: 12,
              column: 23
            }
          },
          loc: {
            start: {
              line: 12,
              column: 47
            },
            end: {
              line: 59,
              column: 1
            }
          },
          line: 12
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 28,
              column: 21
            },
            end: {
              line: 28,
              column: 22
            }
          },
          loc: {
            start: {
              line: 28,
              column: 28
            },
            end: {
              line: 28,
              column: 43
            }
          },
          line: 28
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 33,
              column: 16
            },
            end: {
              line: 33,
              column: 17
            }
          },
          loc: {
            start: {
              line: 33,
              column: 22
            },
            end: {
              line: 58,
              column: 5
            }
          },
          line: 33
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 35,
              column: 28
            },
            end: {
              line: 35,
              column: 29
            }
          },
          loc: {
            start: {
              line: 35,
              column: 37
            },
            end: {
              line: 47,
              column: 13
            }
          },
          line: 35
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 52,
              column: 44
            },
            end: {
              line: 52,
              column: 45
            }
          },
          loc: {
            start: {
              line: 52,
              column: 51
            },
            end: {
              line: 55,
              column: 13
            }
          },
          line: 52
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 17,
              column: 21
            },
            end: {
              line: 17,
              column: 62
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 17,
              column: 21
            },
            end: {
              line: 17,
              column: 32
            }
          }, {
            start: {
              line: 17,
              column: 36
            },
            end: {
              line: 17,
              column: 62
            }
          }],
          line: 17
        },
        "1": {
          loc: {
            start: {
              line: 24,
              column: 4
            },
            end: {
              line: 26,
              column: 127
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 24,
              column: 4
            },
            end: {
              line: 24,
              column: 22
            }
          }, {
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 25,
              column: 52
            }
          }, {
            start: {
              line: 26,
              column: 11
            },
            end: {
              line: 26,
              column: 127
            }
          }],
          line: 24
        },
        "2": {
          loc: {
            start: {
              line: 26,
              column: 18
            },
            end: {
              line: 26,
              column: 62
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 26,
              column: 18
            },
            end: {
              line: 26,
              column: 38
            }
          }, {
            start: {
              line: 26,
              column: 42
            },
            end: {
              line: 26,
              column: 62
            }
          }],
          line: 26
        },
        "3": {
          loc: {
            start: {
              line: 30,
              column: 4
            },
            end: {
              line: 31,
              column: 33
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 30,
              column: 4
            },
            end: {
              line: 31,
              column: 33
            }
          }, {
            start: {
              line: 30,
              column: 4
            },
            end: {
              line: 31,
              column: 33
            }
          }],
          line: 30
        },
        "4": {
          loc: {
            start: {
              line: 34,
              column: 8
            },
            end: {
              line: 56,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 34,
              column: 8
            },
            end: {
              line: 56,
              column: 9
            }
          }, {
            start: {
              line: 34,
              column: 8
            },
            end: {
              line: 56,
              column: 9
            }
          }],
          line: 34
        },
        "5": {
          loc: {
            start: {
              line: 37,
              column: 16
            },
            end: {
              line: 46,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 37,
              column: 16
            },
            end: {
              line: 46,
              column: 17
            }
          }, {
            start: {
              line: 37,
              column: 16
            },
            end: {
              line: 46,
              column: 17
            }
          }],
          line: 37
        },
        "6": {
          loc: {
            start: {
              line: 37,
              column: 20
            },
            end: {
              line: 37,
              column: 61
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 37,
              column: 20
            },
            end: {
              line: 37,
              column: 30
            }
          }, {
            start: {
              line: 37,
              column: 34
            },
            end: {
              line: 37,
              column: 45
            }
          }, {
            start: {
              line: 37,
              column: 49
            },
            end: {
              line: 37,
              column: 61
            }
          }],
          line: 37
        },
        "7": {
          loc: {
            start: {
              line: 42,
              column: 27
            },
            end: {
              line: 42,
              column: 54
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 42,
              column: 27
            },
            end: {
              line: 42,
              column: 39
            }
          }, {
            start: {
              line: 42,
              column: 43
            },
            end: {
              line: 42,
              column: 54
            }
          }],
          line: 42
        },
        "8": {
          loc: {
            start: {
              line: 50,
              column: 12
            },
            end: {
              line: 51,
              column: 44
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 50,
              column: 12
            },
            end: {
              line: 51,
              column: 44
            }
          }, {
            start: {
              line: 50,
              column: 12
            },
            end: {
              line: 51,
              column: 44
            }
          }],
          line: 50
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0, 0],
        "7": [0, 0],
        "8": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "2743457548a3b8fdd4eea7055b5e11308429fec4"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_ufkloqraq = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_ufkloqraq();
  /**
   * Categorizes incoming documents into groups, called buckets, based on a specified expression and bucket boundaries.
   * https://docs.mongodb.com/manual/reference/operator/aggregation/bucket/
   *
   * @param {*} collection
   * @param {*} expr
   * @param {Object} opt Pipeline options
   */

  function $bucket(collection, expr, opt) {
    cov_ufkloqraq().f[0]++;
    var boundaries = (cov_ufkloqraq().s[0]++, expr.boundaries);
    var defaultKey = (cov_ufkloqraq().s[1]++, expr['default']);
    var lower = (cov_ufkloqraq().s[2]++, boundaries[0]); // inclusive

    var upper = (cov_ufkloqraq().s[3]++, boundaries[boundaries.length - 1]); // exclusive

    var outputExpr = (cov_ufkloqraq().s[4]++, (cov_ufkloqraq().b[0][0]++, expr.output) || (cov_ufkloqraq().b[0][1]++, {
      'count': {
        '$sum': 1
      }
    }));
    cov_ufkloqraq().s[5]++;
    assert(boundaries.length > 2, "$bucket 'boundaries' expression must have at least 3 elements");
    var boundType = (cov_ufkloqraq().s[6]++, getType(lower));
    cov_ufkloqraq().s[7]++;

    for (var i = (cov_ufkloqraq().s[8]++, 0), len = (cov_ufkloqraq().s[9]++, boundaries.length - 1); i < len; i++) {
      cov_ufkloqraq().s[10]++;
      assert(boundType === getType(boundaries[i + 1]), "$bucket 'boundaries' must all be of the same type");
      cov_ufkloqraq().s[11]++;
      assert(boundaries[i] < boundaries[i + 1], "$bucket 'boundaries' must be sorted in ascending order");
    }

    cov_ufkloqraq().s[12]++;
    (cov_ufkloqraq().b[1][0]++, !isNil(defaultKey)) && (cov_ufkloqraq().b[1][1]++, getType(expr["default"]) === getType(lower)) && (cov_ufkloqraq().b[1][2]++, assert((cov_ufkloqraq().b[2][0]++, lower > expr["default"]) || (cov_ufkloqraq().b[2][1]++, upper < expr["default"]), "$bucket 'default' expression must be out of boundaries range"));
    var grouped = (cov_ufkloqraq().s[13]++, {});
    cov_ufkloqraq().s[14]++;
    each(boundaries, function (k) {
      cov_ufkloqraq().f[1]++;
      cov_ufkloqraq().s[15]++;
      return grouped[k] = [];
    }); // add default key if provided

    cov_ufkloqraq().s[16]++;

    if (!isNil(defaultKey)) {
      cov_ufkloqraq().b[3][0]++;
      cov_ufkloqraq().s[17]++;
      grouped[defaultKey] = [];
    } else {
      cov_ufkloqraq().b[3][1]++;
    }

    var iterator = (cov_ufkloqraq().s[18]++, false);
    cov_ufkloqraq().s[19]++;
    return Lazy(function () {
      cov_ufkloqraq().f[2]++;
      cov_ufkloqraq().s[20]++;

      if (!(iterator instanceof Iterator)) {
        cov_ufkloqraq().b[4][0]++;
        cov_ufkloqraq().s[21]++;
        collection.each(function (obj) {
          cov_ufkloqraq().f[3]++;
          var key = (cov_ufkloqraq().s[22]++, computeValue(obj, expr.groupBy));
          cov_ufkloqraq().s[23]++;

          if ((cov_ufkloqraq().b[6][0]++, isNil(key)) || (cov_ufkloqraq().b[6][1]++, key < lower) || (cov_ufkloqraq().b[6][2]++, key >= upper)) {
            cov_ufkloqraq().b[5][0]++;
            cov_ufkloqraq().s[24]++;
            assert(!isNil(defaultKey), '$bucket require a default for out of range values');
            cov_ufkloqraq().s[25]++;
            grouped[defaultKey].push(obj);
          } else {
            cov_ufkloqraq().b[5][1]++;
            cov_ufkloqraq().s[26]++;
            assert((cov_ufkloqraq().b[7][0]++, key >= lower) && (cov_ufkloqraq().b[7][1]++, key < upper), "$bucket 'groupBy' expression must resolve to a value in range of boundaries");
            var index = (cov_ufkloqraq().s[27]++, findInsertIndex(boundaries, key));
            var boundKey = (cov_ufkloqraq().s[28]++, boundaries[Math.max(0, index - 1)]);
            cov_ufkloqraq().s[29]++;
            grouped[boundKey].push(obj);
          }
        }); // upper bound is exclusive so we remove it

        cov_ufkloqraq().s[30]++;
        boundaries.pop();
        cov_ufkloqraq().s[31]++;

        if (!isNil(defaultKey)) {
          cov_ufkloqraq().b[8][0]++;
          cov_ufkloqraq().s[32]++;
          boundaries.push(defaultKey);
        } else {
          cov_ufkloqraq().b[8][1]++;
        }

        cov_ufkloqraq().s[33]++;
        iterator = Lazy(boundaries).map(function (key) {
          cov_ufkloqraq().f[4]++;
          var acc = (cov_ufkloqraq().s[34]++, accumulate(grouped[key], null, outputExpr));
          cov_ufkloqraq().s[35]++;
          return Object.assign(acc, {
            '_id': key
          });
        });
      } else {
        cov_ufkloqraq().b[4][1]++;
      }

      cov_ufkloqraq().s[36]++;
      return iterator.next();
    });
  }

  function cov_1h98duoyxi() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/bucketAuto.js";
    var hash = "3a51e03778079705aec6529e573ef85e057456c7";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/bucketAuto.js",
      statementMap: {
        "0": {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 14,
            column: 62
          }
        },
        "1": {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 34
          }
        },
        "2": {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 34
          }
        },
        "3": {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 113
          }
        },
        "4": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 66,
            column: 7
          }
        },
        "5": {
          start: {
            line: 19,
            column: 31
          },
          end: {
            line: 19,
            column: 81
          }
        },
        "6": {
          start: {
            line: 20,
            column: 36
          },
          end: {
            line: 20,
            column: 57
          }
        },
        "7": {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 21,
            column: 24
          }
        },
        "8": {
          start: {
            line: 22,
            column: 24
          },
          end: {
            line: 22,
            column: 26
          }
        },
        "9": {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 33,
            column: 10
          }
        },
        "10": {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 59
          }
        },
        "11": {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        "12": {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 34
          }
        },
        "13": {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 52
          }
        },
        "14": {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 37
          }
        },
        "15": {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 23
          }
        },
        "16": {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 34,
            column: 30
          }
        },
        "17": {
          start: {
            line: 35,
            column: 21
          },
          end: {
            line: 35,
            column: 23
          }
        },
        "18": {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 21
          }
        },
        "19": {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        "20": {
          start: {
            line: 37,
            column: 21
          },
          end: {
            line: 37,
            column: 22
          }
        },
        "21": {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 37,
            column: 43
          }
        },
        "22": {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 62
          }
        },
        "23": {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 39,
            column: 41
          }
        },
        "24": {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        "25": {
          start: {
            line: 40,
            column: 25
          },
          end: {
            line: 40,
            column: 26
          }
        },
        "26": {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 75
          }
        },
        "27": {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 43,
            column: 31
          }
        },
        "28": {
          start: {
            line: 43,
            column: 20
          },
          end: {
            line: 43,
            column: 31
          }
        },
        "29": {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 45,
            column: 73
          }
        },
        "30": {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 47,
            column: 79
          }
        },
        "31": {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 41
          }
        },
        "32": {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 50,
            column: 41
          }
        },
        "33": {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 54,
            column: 17
          }
        },
        "34": {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 52,
            column: 62
          }
        },
        "35": {
          start: {
            line: 53,
            column: 20
          },
          end: {
            line: 53,
            column: 60
          }
        },
        "36": {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        "37": {
          start: {
            line: 58,
            column: 16
          },
          end: {
            line: 58,
            column: 55
          }
        },
        "38": {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 105
          }
        },
        "39": {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        "40": {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 63,
            column: 114
          }
        },
        "41": {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 22
          }
        }
      },
      fnMap: {
        "0": {
          name: "$bucketAuto",
          decl: {
            start: {
              line: 13,
              column: 16
            },
            end: {
              line: 13,
              column: 27
            }
          },
          loc: {
            start: {
              line: 13,
              column: 51
            },
            end: {
              line: 67,
              column: 1
            }
          },
          line: 13
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 18,
              column: 32
            },
            end: {
              line: 18,
              column: 33
            }
          },
          loc: {
            start: {
              line: 18,
              column: 40
            },
            end: {
              line: 66,
              column: 5
            }
          },
          line: 18
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 23,
              column: 34
            },
            end: {
              line: 23,
              column: 35
            }
          },
          loc: {
            start: {
              line: 23,
              column: 39
            },
            end: {
              line: 33,
              column: 9
            }
          },
          line: 23
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 14,
              column: 21
            },
            end: {
              line: 14,
              column: 62
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 14,
              column: 21
            },
            end: {
              line: 14,
              column: 32
            }
          }, {
            start: {
              line: 14,
              column: 36
            },
            end: {
              line: 14,
              column: 62
            }
          }],
          line: 14
        },
        "1": {
          loc: {
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          }, {
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          }],
          line: 25
        },
        "2": {
          loc: {
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 29,
              column: 51
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 29,
              column: 28
            }
          }, {
            start: {
              line: 29,
              column: 33
            },
            end: {
              line: 29,
              column: 50
            }
          }],
          line: 29
        },
        "3": {
          loc: {
            start: {
              line: 37,
              column: 45
            },
            end: {
              line: 37,
              column: 75
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 37,
              column: 45
            },
            end: {
              line: 37,
              column: 60
            }
          }, {
            start: {
              line: 37,
              column: 64
            },
            end: {
              line: 37,
              column: 75
            }
          }],
          line: 37
        },
        "4": {
          loc: {
            start: {
              line: 40,
              column: 28
            },
            end: {
              line: 40,
              column: 63
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 40,
              column: 28
            },
            end: {
              line: 40,
              column: 48
            }
          }, {
            start: {
              line: 40,
              column: 52
            },
            end: {
              line: 40,
              column: 63
            }
          }],
          line: 40
        },
        "5": {
          loc: {
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 43,
              column: 31
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 43,
              column: 31
            }
          }, {
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 43,
              column: 31
            }
          }],
          line: 42
        },
        "6": {
          loc: {
            start: {
              line: 45,
              column: 34
            },
            end: {
              line: 45,
              column: 71
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 45,
              column: 47
            },
            end: {
              line: 45,
              column: 56
            }
          }, {
            start: {
              line: 45,
              column: 59
            },
            end: {
              line: 45,
              column: 71
            }
          }],
          line: 45
        },
        "7": {
          loc: {
            start: {
              line: 47,
              column: 26
            },
            end: {
              line: 47,
              column: 77
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 47,
              column: 39
            },
            end: {
              line: 47,
              column: 55
            }
          }, {
            start: {
              line: 47,
              column: 58
            },
            end: {
              line: 47,
              column: 77
            }
          }],
          line: 47
        },
        "8": {
          loc: {
            start: {
              line: 49,
              column: 16
            },
            end: {
              line: 50,
              column: 41
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 49,
              column: 16
            },
            end: {
              line: 50,
              column: 41
            }
          }, {
            start: {
              line: 49,
              column: 16
            },
            end: {
              line: 50,
              column: 41
            }
          }],
          line: 49
        },
        "9": {
          loc: {
            start: {
              line: 51,
              column: 16
            },
            end: {
              line: 54,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 51,
              column: 16
            },
            end: {
              line: 54,
              column: 17
            }
          }, {
            start: {
              line: 51,
              column: 16
            },
            end: {
              line: 54,
              column: 17
            }
          }],
          line: 51
        },
        "10": {
          loc: {
            start: {
              line: 57,
              column: 12
            },
            end: {
              line: 59,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 57,
              column: 12
            },
            end: {
              line: 59,
              column: 13
            }
          }, {
            start: {
              line: 57,
              column: 12
            },
            end: {
              line: 59,
              column: 13
            }
          }],
          line: 57
        },
        "11": {
          loc: {
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 64,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 64,
              column: 9
            }
          }, {
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 64,
              column: 9
            }
          }],
          line: 62
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "3a51e03778079705aec6529e573ef85e057456c7"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1h98duoyxi = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1h98duoyxi();
  /**
   * Categorizes incoming documents into a specific number of groups, called buckets,
   * based on a specified expression. Bucket boundaries are automatically determined
   * in an attempt to evenly distribute the documents into the specified number of buckets.
   * https://docs.mongodb.com/manual/reference/operator/aggregation/bucketAuto/
   *
   * @param {*} collection
   * @param {*} expr
   * @param {*} opt Pipeline options
   */

  function $bucketAuto(collection, expr, opt) {
    cov_1h98duoyxi().f[0]++;
    var outputExpr = (cov_1h98duoyxi().s[0]++, (cov_1h98duoyxi().b[0][0]++, expr.output) || (cov_1h98duoyxi().b[0][1]++, {
      'count': {
        '$sum': 1
      }
    }));
    var groupByExpr = (cov_1h98duoyxi().s[1]++, expr.groupBy);
    var bucketCount = (cov_1h98duoyxi().s[2]++, expr.buckets);
    cov_1h98duoyxi().s[3]++;
    assert(bucketCount > 0, "The $bucketAuto 'buckets' field must be greater than 0, but found: " + bucketCount);
    cov_1h98duoyxi().s[4]++;
    return collection.transform(function (coll) {
      cov_1h98duoyxi().f[1]++;
      var approxBucketSize = (cov_1h98duoyxi().s[5]++, Math.max(1, Math.round(coll.length / bucketCount)));
      var computeValueOptimized = (cov_1h98duoyxi().s[6]++, memoize(computeValue));
      var grouped = (cov_1h98duoyxi().s[7]++, {});
      var remaining = (cov_1h98duoyxi().s[8]++, []);
      var sorted = (cov_1h98duoyxi().s[9]++, sortBy(coll, function (o) {
        cov_1h98duoyxi().f[2]++;
        var key = (cov_1h98duoyxi().s[10]++, computeValueOptimized(o, groupByExpr));
        cov_1h98duoyxi().s[11]++;

        if (isNil(key)) {
          cov_1h98duoyxi().b[1][0]++;
          cov_1h98duoyxi().s[12]++;
          remaining.push(o);
        } else {
          cov_1h98duoyxi().b[1][1]++;
          cov_1h98duoyxi().s[13]++;
          (cov_1h98duoyxi().b[2][0]++, grouped[key]) || (cov_1h98duoyxi().b[2][1]++, grouped[key] = []);
          cov_1h98duoyxi().s[14]++;
          grouped[key].push(o);
        }

        cov_1h98duoyxi().s[15]++;
        return key;
      }));
      var ID_KEY = (cov_1h98duoyxi().s[16]++, idKey());
      var result = (cov_1h98duoyxi().s[17]++, []);
      var index = (cov_1h98duoyxi().s[18]++, 0); // counter for sorted collection

      cov_1h98duoyxi().s[19]++;

      for (var i = (cov_1h98duoyxi().s[20]++, 0), len = (cov_1h98duoyxi().s[21]++, sorted.length); (cov_1h98duoyxi().b[3][0]++, i < bucketCount) && (cov_1h98duoyxi().b[3][1]++, index < len); i++) {
        var boundaries = (cov_1h98duoyxi().s[22]++, Object.create({
          min: 0,
          max: 0
        }));
        var bucketItems = (cov_1h98duoyxi().s[23]++, new Array());
        cov_1h98duoyxi().s[24]++;

        for (var j = (cov_1h98duoyxi().s[25]++, 0); (cov_1h98duoyxi().b[4][0]++, j < approxBucketSize) && (cov_1h98duoyxi().b[4][1]++, index < len); j++) {
          var key = (cov_1h98duoyxi().s[26]++, computeValueOptimized(sorted[index], groupByExpr));
          cov_1h98duoyxi().s[27]++;

          if (isNil(key)) {
            cov_1h98duoyxi().b[5][0]++;
            cov_1h98duoyxi().s[28]++;
            key = null;
          } else {
            cov_1h98duoyxi().b[5][1]++;
          } // populate current bucket with all values for current key


          cov_1h98duoyxi().s[29]++;
          into(bucketItems, isNil(key) ? (cov_1h98duoyxi().b[6][0]++, remaining) : (cov_1h98duoyxi().b[6][1]++, grouped[key])); // increase sort index by number of items added

          cov_1h98duoyxi().s[30]++;
          index += isNil(key) ? (cov_1h98duoyxi().b[7][0]++, remaining.length) : (cov_1h98duoyxi().b[7][1]++, grouped[key].length); // set the min key boundary if not already present

          cov_1h98duoyxi().s[31]++;

          if (!has(boundaries, 'min')) {
            cov_1h98duoyxi().b[8][0]++;
            cov_1h98duoyxi().s[32]++;
            boundaries.min = key;
          } else {
            cov_1h98duoyxi().b[8][1]++;
          }

          cov_1h98duoyxi().s[33]++;

          if (result.length > 0) {
            cov_1h98duoyxi().b[9][0]++;
            var lastBucket = (cov_1h98duoyxi().s[34]++, result[result.length - 1]);
            cov_1h98duoyxi().s[35]++;
            lastBucket[ID_KEY].max = boundaries.min;
          } else {
            cov_1h98duoyxi().b[9][1]++;
          }
        } // if is last bucket add remaining items


        cov_1h98duoyxi().s[36]++;

        if (i == bucketCount - 1) {
          cov_1h98duoyxi().b[10][0]++;
          cov_1h98duoyxi().s[37]++;
          into(bucketItems, sorted.slice(index));
        } else {
          cov_1h98duoyxi().b[10][1]++;
        }

        cov_1h98duoyxi().s[38]++;
        result.push(Object.assign(accumulate(bucketItems, null, outputExpr), {
          '_id': boundaries
        }));
      }

      cov_1h98duoyxi().s[39]++;

      if (result.length > 0) {
        cov_1h98duoyxi().b[11][0]++;
        cov_1h98duoyxi().s[40]++;
        result[result.length - 1][ID_KEY].max = computeValueOptimized(sorted[sorted.length - 1], groupByExpr);
      } else {
        cov_1h98duoyxi().b[11][1]++;
      }

      cov_1h98duoyxi().s[41]++;
      return result;
    });
  }

  function cov_1a2bs260xq() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/count.js";
    var hash = "5c5cd43d07db112d6c518597dfbd7c9d1e8c6b57";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/count.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 142
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 17,
            column: 15
          }
        },
        "2": {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 18
          }
        },
        "3": {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 15,
            column: 36
          }
        },
        "4": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 41
          }
        }
      },
      fnMap: {
        "0": {
          name: "$count",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 22
            }
          },
          loc: {
            start: {
              line: 11,
              column: 46
            },
            end: {
              line: 18,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 13,
              column: 16
            },
            end: {
              line: 13,
              column: 17
            }
          },
          loc: {
            start: {
              line: 13,
              column: 22
            },
            end: {
              line: 17,
              column: 5
            }
          },
          line: 13
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 101
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 12,
              column: 11
            },
            end: {
              line: 12,
              column: 25
            }
          }, {
            start: {
              line: 12,
              column: 29
            },
            end: {
              line: 12,
              column: 47
            }
          }, {
            start: {
              line: 12,
              column: 51
            },
            end: {
              line: 12,
              column: 75
            }
          }, {
            start: {
              line: 12,
              column: 79
            },
            end: {
              line: 12,
              column: 101
            }
          }],
          line: 12
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {
        "0": [0, 0, 0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "5c5cd43d07db112d6c518597dfbd7c9d1e8c6b57"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1a2bs260xq = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1a2bs260xq();
  /**
   * Returns a document that contains a count of the number of documents input to the stage.
   *
   * @param  {Array} collection
   * @param  {String} expr
   * @param {Object} opt Pipeline options
   * @return {Object}
   */

  function $count(collection, expr, opt) {
    cov_1a2bs260xq().f[0]++;
    cov_1a2bs260xq().s[0]++;
    assert((cov_1a2bs260xq().b[0][0]++, isString(expr)) && (cov_1a2bs260xq().b[0][1]++, expr.trim() !== '') && (cov_1a2bs260xq().b[0][2]++, expr.indexOf('.') === -1) && (cov_1a2bs260xq().b[0][3]++, expr.trim()[0] !== '$'), 'Invalid expression value for $count');
    cov_1a2bs260xq().s[1]++;
    return Lazy(function () {
      cov_1a2bs260xq().f[1]++;
      var o = (cov_1a2bs260xq().s[2]++, {});
      cov_1a2bs260xq().s[3]++;
      o[expr] = collection.size();
      cov_1a2bs260xq().s[4]++;
      return {
        value: o,
        done: false
      };
    }).first();
  }

  function cov_2gq83q93k0() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/facet.js";
    var hash = "604bcb544a30070db93375173c4ec973d9ff13e2";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/facet.js",
      statementMap: {
        "0": {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 7
          }
        },
        "1": {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 73
          }
        },
        "2": {
          start: {
            line: 9,
            column: 44
          },
          end: {
            line: 9,
            column: 70
          }
        }
      },
      fnMap: {
        "0": {
          name: "$facet",
          decl: {
            start: {
              line: 7,
              column: 16
            },
            end: {
              line: 7,
              column: 22
            }
          },
          loc: {
            start: {
              line: 7,
              column: 46
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 7
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 8,
              column: 32
            },
            end: {
              line: 8,
              column: 33
            }
          },
          loc: {
            start: {
              line: 8,
              column: 41
            },
            end: {
              line: 10,
              column: 5
            }
          },
          line: 8
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 9,
              column: 32
            },
            end: {
              line: 9,
              column: 33
            }
          },
          loc: {
            start: {
              line: 9,
              column: 44
            },
            end: {
              line: 9,
              column: 70
            }
          },
          line: 9
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "604bcb544a30070db93375173c4ec973d9ff13e2"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2gq83q93k0 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2gq83q93k0();
  /**
   * Processes multiple aggregation pipelines within a single stage on the same set of input documents.
   * Enables the creation of multi-faceted aggregations capable of characterizing data across multiple dimensions, or facets, in a single stage.
   */

  function $facet(collection, expr, opt) {
    cov_2gq83q93k0().f[0]++;
    cov_2gq83q93k0().s[0]++;
    return collection.transform(function (array) {
      cov_2gq83q93k0().f[1]++;
      cov_2gq83q93k0().s[1]++;
      return [objectMap(expr, function (pipeline) {
        cov_2gq83q93k0().f[2]++;
        cov_2gq83q93k0().s[2]++;
        return aggregate(array, pipeline);
      })];
    });
  }

  function cov_22zcwxhpvr() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/group.js";
    var hash = "b41767204892e9a8a59354c97c3c54cc563b3dd4";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/group.js",
      statementMap: {
        "0": {
          start: {
            line: 13,
            column: 19
          },
          end: {
            line: 13,
            column: 26
          }
        },
        "1": {
          start: {
            line: 14,
            column: 13
          },
          end: {
            line: 14,
            column: 25
          }
        },
        "2": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 37,
            column: 7
          }
        },
        "3": {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 16,
            column: 72
          }
        },
        "4": {
          start: {
            line: 16,
            column: 46
          },
          end: {
            line: 16,
            column: 71
          }
        },
        "5": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 27
          }
        },
        "6": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 28
          }
        },
        "7": {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 18
          }
        },
        "8": {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 41
          }
        },
        "9": {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 36,
            column: 10
          }
        },
        "10": {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 24,
            column: 38
          }
        },
        "11": {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 38
          }
        },
        "12": {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 42
          }
        },
        "13": {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 24
          }
        },
        "14": {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        "15": {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 36
          }
        },
        "16": {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 15
          }
        },
        "17": {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 33,
            column: 70
          }
        },
        "18": {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 47
          }
        }
      },
      fnMap: {
        "0": {
          name: "$group",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 22
            }
          },
          loc: {
            start: {
              line: 11,
              column: 46
            },
            end: {
              line: 38,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 15,
              column: 32
            },
            end: {
              line: 15,
              column: 33
            }
          },
          loc: {
            start: {
              line: 15,
              column: 40
            },
            end: {
              line: 37,
              column: 5
            }
          },
          line: 15
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 16,
              column: 39
            },
            end: {
              line: 16,
              column: 40
            }
          },
          loc: {
            start: {
              line: 16,
              column: 46
            },
            end: {
              line: 16,
              column: 71
            }
          },
          line: 16
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 22,
              column: 15
            },
            end: {
              line: 22,
              column: 16
            }
          },
          loc: {
            start: {
              line: 22,
              column: 21
            },
            end: {
              line: 36,
              column: 9
            }
          },
          line: 22
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 32,
              column: 23
            },
            end: {
              line: 32,
              column: 24
            }
          },
          loc: {
            start: {
              line: 32,
              column: 37
            },
            end: {
              line: 34,
              column: 13
            }
          },
          line: 32
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 24,
              column: 38
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 24,
              column: 38
            }
          }, {
            start: {
              line: 23,
              column: 12
            },
            end: {
              line: 24,
              column: 38
            }
          }],
          line: 23
        },
        "1": {
          loc: {
            start: {
              line: 28,
              column: 12
            },
            end: {
              line: 30,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 28,
              column: 12
            },
            end: {
              line: 30,
              column: 13
            }
          }, {
            start: {
              line: 28,
              column: 12
            },
            end: {
              line: 30,
              column: 13
            }
          }],
          line: 28
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "b41767204892e9a8a59354c97c3c54cc563b3dd4"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_22zcwxhpvr = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_22zcwxhpvr();
  /**
   * Groups documents together for the purpose of calculating aggregate values based on a collection of documents.
   *
   * @param collection
   * @param expr
   * @param opt Pipeline options
   * @returns {Array}
   */

  function $group(collection, expr, opt) {
    cov_22zcwxhpvr().f[0]++;
    // lookup key for grouping
    var ID_KEY = (cov_22zcwxhpvr().s[0]++, idKey());
    var id = (cov_22zcwxhpvr().s[1]++, expr[ID_KEY]);
    cov_22zcwxhpvr().s[2]++;
    return collection.transform(function (coll) {
      cov_22zcwxhpvr().f[1]++;
      var partitions = (cov_22zcwxhpvr().s[3]++, groupBy(coll, function (obj) {
        cov_22zcwxhpvr().f[2]++;
        cov_22zcwxhpvr().s[4]++;
        return computeValue(obj, id, id);
      })); // remove the group key

      cov_22zcwxhpvr().s[5]++;
      expr = clone(expr);
      cov_22zcwxhpvr().s[6]++;
      delete expr[ID_KEY];
      var i = (cov_22zcwxhpvr().s[7]++, -1);
      var size = (cov_22zcwxhpvr().s[8]++, partitions.keys.length);
      cov_22zcwxhpvr().s[9]++;
      return function () {
        cov_22zcwxhpvr().f[3]++;
        cov_22zcwxhpvr().s[10]++;

        if (++i === size) {
          cov_22zcwxhpvr().b[0][0]++;
          cov_22zcwxhpvr().s[11]++;
          return {
            done: true
          };
        } else {
          cov_22zcwxhpvr().b[0][1]++;
        }

        var value = (cov_22zcwxhpvr().s[12]++, partitions.keys[i]);
        var obj = (cov_22zcwxhpvr().s[13]++, {}); // exclude undefined key value

        cov_22zcwxhpvr().s[14]++;

        if (value !== undefined) {
          cov_22zcwxhpvr().b[1][0]++;
          cov_22zcwxhpvr().s[15]++;
          obj[ID_KEY] = value;
        } else {
          cov_22zcwxhpvr().b[1][1]++;
        } // compute remaining keys in expression


        cov_22zcwxhpvr().s[16]++;
        each(expr, function (val, key) {
          cov_22zcwxhpvr().f[4]++;
          cov_22zcwxhpvr().s[17]++;
          obj[key] = accumulate(partitions.groups[i], key, val);
        });
        cov_22zcwxhpvr().s[18]++;
        return {
          value: obj,
          done: false
        };
      };
    });
  }

  function cov_2ro10o36ep() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/limit.js";
    var hash = "52ca0041f045edcc18459053b96679d8210979fb";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/limit.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }
      },
      fnMap: {
        "0": {
          name: "$limit",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 22
            }
          },
          loc: {
            start: {
              line: 9,
              column: 46
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 9
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "52ca0041f045edcc18459053b96679d8210979fb"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2ro10o36ep = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2ro10o36ep();

  /**
   * Restricts the number of documents in an aggregation pipeline.
   *
   * @param collection
   * @param value
   * @param opt
   * @returns {Object|*}
   */
  function $limit(collection, expr, opt) {
    cov_2ro10o36ep().f[0]++;
    cov_2ro10o36ep().s[0]++;
    return collection.take(expr);
  }

  function cov_1y8jx4i3lu() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/lookup.js";
    var hash = "8e10ba89294432f48c2f154f9b74e11b73479d18";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/lookup.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 19
          },
          end: {
            line: 10,
            column: 28
          }
        },
        "1": {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 36
          }
        },
        "2": {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 40
          }
        },
        "3": {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 25
          }
        },
        "4": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 130
          }
        },
        "5": {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 17
          }
        },
        "6": {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 20,
            column: 7
          }
        },
        "7": {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 52
          }
        },
        "8": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 32
          }
        },
        "9": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 26
          }
        },
        "10": {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 26,
            column: 7
          }
        },
        "11": {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 50
          }
        },
        "12": {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 31
          }
        },
        "13": {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 40
          }
        },
        "14": {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 22
          }
        }
      },
      fnMap: {
        "0": {
          name: "$lookup",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 23
            }
          },
          loc: {
            start: {
              line: 9,
              column: 47
            },
            end: {
              line: 27,
              column: 1
            }
          },
          line: 9
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 16,
              column: 19
            },
            end: {
              line: 16,
              column: 20
            }
          },
          loc: {
            start: {
              line: 16,
              column: 26
            },
            end: {
              line: 20,
              column: 5
            }
          },
          line: 16
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 21,
              column: 26
            },
            end: {
              line: 21,
              column: 27
            }
          },
          loc: {
            start: {
              line: 21,
              column: 33
            },
            end: {
              line: 26,
              column: 5
            }
          },
          line: 21
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 14,
              column: 11
            },
            end: {
              line: 14,
              column: 99
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 14,
              column: 11
            },
            end: {
              line: 14,
              column: 28
            }
          }, {
            start: {
              line: 14,
              column: 32
            },
            end: {
              line: 14,
              column: 54
            }
          }, {
            start: {
              line: 14,
              column: 58
            },
            end: {
              line: 14,
              column: 78
            }
          }, {
            start: {
              line: 14,
              column: 82
            },
            end: {
              line: 14,
              column: 99
            }
          }],
          line: 14
        },
        "1": {
          loc: {
            start: {
              line: 18,
              column: 18
            },
            end: {
              line: 18,
              column: 31
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 18,
              column: 18
            },
            end: {
              line: 18,
              column: 25
            }
          }, {
            start: {
              line: 18,
              column: 29
            },
            end: {
              line: 18,
              column: 31
            }
          }],
          line: 18
        },
        "2": {
          loc: {
            start: {
              line: 24,
              column: 26
            },
            end: {
              line: 24,
              column: 39
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 24,
              column: 26
            },
            end: {
              line: 24,
              column: 33
            }
          }, {
            start: {
              line: 24,
              column: 37
            },
            end: {
              line: 24,
              column: 39
            }
          }],
          line: 24
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0, 0, 0],
        "1": [0, 0],
        "2": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "8e10ba89294432f48c2f154f9b74e11b73479d18"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1y8jx4i3lu = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1y8jx4i3lu();
  /**
   * Performs a left outer join to another collection in the same database to filter in documents from the “joined” collection for processing.
   *
   * @param collection
   * @param expr
   * @param opt
   */

  function $lookup(collection, expr, opt) {
    cov_1y8jx4i3lu().f[0]++;
    var joinColl = (cov_1y8jx4i3lu().s[0]++, expr.from);
    var localField = (cov_1y8jx4i3lu().s[1]++, expr.localField);
    var foreignField = (cov_1y8jx4i3lu().s[2]++, expr.foreignField);
    var asField = (cov_1y8jx4i3lu().s[3]++, expr.as);
    cov_1y8jx4i3lu().s[4]++;
    assert((cov_1y8jx4i3lu().b[0][0]++, isArray(joinColl)) && (cov_1y8jx4i3lu().b[0][1]++, isString(foreignField)) && (cov_1y8jx4i3lu().b[0][2]++, isString(localField)) && (cov_1y8jx4i3lu().b[0][3]++, isString(asField)), '$lookup: invalid argument');
    var hash = (cov_1y8jx4i3lu().s[5]++, {});
    cov_1y8jx4i3lu().s[6]++;
    each(joinColl, function (obj) {
      cov_1y8jx4i3lu().f[1]++;
      var k = (cov_1y8jx4i3lu().s[7]++, hashCode(resolve(obj, foreignField)));
      cov_1y8jx4i3lu().s[8]++;
      hash[k] = (cov_1y8jx4i3lu().b[1][0]++, hash[k]) || (cov_1y8jx4i3lu().b[1][1]++, []);
      cov_1y8jx4i3lu().s[9]++;
      hash[k].push(obj);
    });
    cov_1y8jx4i3lu().s[10]++;
    return collection.map(function (obj) {
      cov_1y8jx4i3lu().f[2]++;
      var k = (cov_1y8jx4i3lu().s[11]++, hashCode(resolve(obj, localField)));
      var newObj = (cov_1y8jx4i3lu().s[12]++, clone(obj));
      cov_1y8jx4i3lu().s[13]++;
      newObj[asField] = (cov_1y8jx4i3lu().b[2][0]++, hash[k]) || (cov_1y8jx4i3lu().b[2][1]++, []);
      cov_1y8jx4i3lu().s[14]++;
      return newObj;
    });
  }

  function cov_bxzm0j4gf() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/match.js";
    var hash = "0e1fe38cf74e729301bd40a3891d1d1020b7020c";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/match.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 27
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 45
          }
        },
        "2": {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 43
          }
        }
      },
      fnMap: {
        "0": {
          name: "$match",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 22
            }
          },
          loc: {
            start: {
              line: 11,
              column: 46
            },
            end: {
              line: 14,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 13,
              column: 29
            },
            end: {
              line: 13,
              column: 30
            }
          },
          loc: {
            start: {
              line: 13,
              column: 34
            },
            end: {
              line: 13,
              column: 43
            }
          },
          line: 13
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "0e1fe38cf74e729301bd40a3891d1d1020b7020c"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_bxzm0j4gf = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_bxzm0j4gf();
  /**
   * Filters the document stream, and only allows matching documents to pass into the next pipeline stage.
   * $match uses standard MongoDB queries.
   *
   * @param collection
   * @param expr
   * @param opt
   * @returns {Array|*}
   */

  function $match(collection, expr, opt) {
    cov_bxzm0j4gf().f[0]++;
    var q = (cov_bxzm0j4gf().s[0]++, new Query(expr));
    cov_bxzm0j4gf().s[1]++;
    return collection.filter(function (o) {
      cov_bxzm0j4gf().f[1]++;
      cov_bxzm0j4gf().s[2]++;
      return q.test(o);
    });
  }

  function cov_hznvwbv9s() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/out.js";
    var hash = "cbba68833501e90c557f197d999f976ab4934615";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/out.js",
      statementMap: {
        "0": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 62
          }
        },
        "1": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 18,
            column: 7
          }
        },
        "2": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 21
          }
        },
        "3": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 17
          }
        }
      },
      fnMap: {
        "0": {
          name: "$out",
          decl: {
            start: {
              line: 13,
              column: 16
            },
            end: {
              line: 13,
              column: 20
            }
          },
          loc: {
            start: {
              line: 13,
              column: 44
            },
            end: {
              line: 19,
              column: 1
            }
          },
          line: 13
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 15,
              column: 26
            },
            end: {
              line: 15,
              column: 27
            }
          },
          loc: {
            start: {
              line: 15,
              column: 31
            },
            end: {
              line: 18,
              column: 5
            }
          },
          line: 15
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "cbba68833501e90c557f197d999f976ab4934615"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_hznvwbv9s = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_hznvwbv9s();
  /**
   * Takes the documents returned by the aggregation pipeline and writes them to a specified collection.
   *
   * Unlike the $out operator in MongoDB, this operator can appear in any position in the pipeline and is
   * useful for collecting intermediate results of an aggregation operation.
   *
   * @param collection
   * @param expr
   * @param opt
   * @returns {*}
   */

  function $out(collection, expr, opt) {
    cov_hznvwbv9s().f[0]++;
    cov_hznvwbv9s().s[0]++;
    assert(isArray(expr), '$out expression must be an array');
    cov_hznvwbv9s().s[1]++;
    return collection.map(function (o) {
      cov_hznvwbv9s().f[1]++;
      cov_hznvwbv9s().s[2]++;
      expr.push(o);
      cov_hznvwbv9s().s[3]++;
      return o; // passthrough
    });
  }

  function cov_25nkw33y8() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/project.js";
    var hash = "705dcff7554ae90826a4a607916d5b2d21d75cf2";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/project.js",
      statementMap: {
        "0": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 16,
            column: 26
          }
        },
        "1": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 26
          }
        },
        "2": {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 35
          }
        },
        "3": {
          start: {
            line: 19,
            column: 35
          },
          end: {
            line: 19,
            column: 40
          }
        },
        "4": {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 20,
            column: 26
          }
        },
        "5": {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 29
          }
        },
        "6": {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        "7": {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 29
          }
        },
        "8": {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        "9": {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 84
          }
        },
        "10": {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 27,
            column: 94
          }
        },
        "11": {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 63
          }
        },
        "12": {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 36
          }
        },
        "13": {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 101
          }
        },
        "14": {
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 35,
            column: 99
          }
        },
        "15": {
          start: {
            line: 46,
            column: 19
          },
          end: {
            line: 46,
            column: 26
          }
        },
        "16": {
          start: {
            line: 47,
            column: 17
          },
          end: {
            line: 47,
            column: 27
          }
        },
        "17": {
          start: {
            line: 48,
            column: 21
          },
          end: {
            line: 48,
            column: 26
          }
        },
        "18": {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 30
          }
        },
        "19": {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 21
          }
        },
        "20": {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        "21": {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 30
          }
        },
        "22": {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 143,
            column: 7
          }
        },
        "23": {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 29
          }
        },
        "24": {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 31
          }
        },
        "25": {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        "26": {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 34
          }
        },
        "27": {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        "28": {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 29
          }
        },
        "29": {
          start: {
            line: 66,
            column: 13
          },
          end: {
            line: 123,
            column: 9
          }
        },
        "30": {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 52
          }
        },
        "31": {
          start: {
            line: 69,
            column: 13
          },
          end: {
            line: 123,
            column: 9
          }
        },
        "32": {
          start: {
            line: 72,
            column: 13
          },
          end: {
            line: 123,
            column: 9
          }
        },
        "33": {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 78,
            column: 15
          }
        },
        "34": {
          start: {
            line: 74,
            column: 24
          },
          end: {
            line: 74,
            column: 44
          }
        },
        "35": {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 76,
            column: 32
          }
        },
        "36": {
          start: {
            line: 76,
            column: 20
          },
          end: {
            line: 76,
            column: 32
          }
        },
        "37": {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 25
          }
        },
        "38": {
          start: {
            line: 80,
            column: 13
          },
          end: {
            line: 123,
            column: 9
          }
        },
        "39": {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 43
          }
        },
        "40": {
          start: {
            line: 82,
            column: 27
          },
          end: {
            line: 82,
            column: 74
          }
        },
        "41": {
          start: {
            line: 84,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        "42": {
          start: {
            line: 85,
            column: 44
          },
          end: {
            line: 85,
            column: 68
          }
        },
        "43": {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        "44": {
          start: {
            line: 89,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        "45": {
          start: {
            line: 91,
            column: 24
          },
          end: {
            line: 91,
            column: 91
          }
        },
        "46": {
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 92,
            column: 42
          }
        },
        "47": {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 64
          }
        },
        "48": {
          start: {
            line: 100,
            column: 20
          },
          end: {
            line: 100,
            column: 87
          }
        },
        "49": {
          start: {
            line: 103,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        },
        "50": {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 71
          }
        },
        "51": {
          start: {
            line: 107,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        },
        "52": {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 44
          }
        },
        "53": {
          start: {
            line: 110,
            column: 32
          },
          end: {
            line: 110,
            column: 40
          }
        },
        "54": {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 113,
            column: 74
          }
        },
        "55": {
          start: {
            line: 112,
            column: 39
          },
          end: {
            line: 112,
            column: 84
          }
        },
        "56": {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 51
          }
        },
        "57": {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 31
          }
        },
        "58": {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 19
          }
        },
        "59": {
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 127,
            column: 10
          }
        },
        "60": {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 133,
            column: 9
          }
        },
        "61": {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 15
          }
        },
        "62": {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        "63": {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        "64": {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 41
          }
        },
        "65": {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 140,
            column: 45
          }
        },
        "66": {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 26
          }
        },
        "67": {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        "68": {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 150,
            column: 48
          }
        },
        "69": {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        "70": {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 39
          }
        },
        "71": {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 56
          }
        },
        "72": {
          start: {
            line: 153,
            column: 32
          },
          end: {
            line: 153,
            column: 54
          }
        },
        "73": {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 18
          }
        },
        "74": {
          start: {
            line: 164,
            column: 19
          },
          end: {
            line: 164,
            column: 26
          }
        },
        "75": {
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 165,
            column: 30
          }
        },
        "76": {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 176,
            column: 7
          }
        },
        "77": {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 19
          }
        },
        "78": {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 19
          }
        },
        "79": {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        "80": {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 28
          }
        },
        "81": {
          start: {
            line: 172,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        },
        "82": {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 173,
            column: 28
          }
        },
        "83": {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 175,
            column: 100
          }
        }
      },
      fnMap: {
        "0": {
          name: "$project",
          decl: {
            start: {
              line: 14,
              column: 16
            },
            end: {
              line: 14,
              column: 24
            }
          },
          loc: {
            start: {
              line: 14,
              column: 48
            },
            end: {
              line: 36,
              column: 1
            }
          },
          line: 14
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 35,
              column: 26
            },
            end: {
              line: 35,
              column: 27
            }
          },
          loc: {
            start: {
              line: 35,
              column: 33
            },
            end: {
              line: 35,
              column: 99
            }
          },
          line: 35
        },
        "2": {
          name: "processObject",
          decl: {
            start: {
              line: 45,
              column: 9
            },
            end: {
              line: 45,
              column: 22
            }
          },
          loc: {
            start: {
              line: 45,
              column: 76
            },
            end: {
              line: 157,
              column: 1
            }
          },
          line: 45
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 54,
              column: 27
            },
            end: {
              line: 54,
              column: 28
            }
          },
          loc: {
            start: {
              line: 54,
              column: 36
            },
            end: {
              line: 143,
              column: 5
            }
          },
          line: 54
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 73,
              column: 32
            },
            end: {
              line: 73,
              column: 33
            }
          },
          loc: {
            start: {
              line: 73,
              column: 37
            },
            end: {
              line: 78,
              column: 13
            }
          },
          line: 73
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 112,
              column: 34
            },
            end: {
              line: 112,
              column: 35
            }
          },
          loc: {
            start: {
              line: 112,
              column: 39
            },
            end: {
              line: 112,
              column: 84
            }
          },
          line: 112
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 153,
              column: 27
            },
            end: {
              line: 153,
              column: 28
            }
          },
          loc: {
            start: {
              line: 153,
              column: 32
            },
            end: {
              line: 153,
              column: 54
            }
          },
          line: 153
        },
        "7": {
          name: "validateExpression",
          decl: {
            start: {
              line: 163,
              column: 9
            },
            end: {
              line: 163,
              column: 27
            }
          },
          loc: {
            start: {
              line: 163,
              column: 34
            },
            end: {
              line: 177,
              column: 1
            }
          },
          line: 163
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 166,
              column: 15
            },
            end: {
              line: 166,
              column: 16
            }
          },
          loc: {
            start: {
              line: 166,
              column: 25
            },
            end: {
              line: 176,
              column: 5
            }
          },
          line: 166
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 15,
              column: 4
            },
            end: {
              line: 16,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 15,
              column: 4
            },
            end: {
              line: 16,
              column: 26
            }
          }, {
            start: {
              line: 15,
              column: 4
            },
            end: {
              line: 16,
              column: 26
            }
          }],
          line: 15
        },
        "1": {
          loc: {
            start: {
              line: 23,
              column: 4
            },
            end: {
              line: 34,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 23,
              column: 4
            },
            end: {
              line: 34,
              column: 5
            }
          }, {
            start: {
              line: 23,
              column: 4
            },
            end: {
              line: 34,
              column: 5
            }
          }],
          line: 23
        },
        "2": {
          loc: {
            start: {
              line: 25,
              column: 8
            },
            end: {
              line: 29,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 25,
              column: 8
            },
            end: {
              line: 29,
              column: 9
            }
          }, {
            start: {
              line: 25,
              column: 8
            },
            end: {
              line: 29,
              column: 9
            }
          }],
          line: 25
        },
        "3": {
          loc: {
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 25,
              column: 36
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 25,
              column: 12
            },
            end: {
              line: 25,
              column: 20
            }
          }, {
            start: {
              line: 25,
              column: 24
            },
            end: {
              line: 25,
              column: 36
            }
          }],
          line: 25
        },
        "4": {
          loc: {
            start: {
              line: 51,
              column: 4
            },
            end: {
              line: 53,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 51,
              column: 4
            },
            end: {
              line: 53,
              column: 5
            }
          }, {
            start: {
              line: 51,
              column: 4
            },
            end: {
              line: 53,
              column: 5
            }
          }],
          line: 51
        },
        "5": {
          loc: {
            start: {
              line: 59,
              column: 8
            },
            end: {
              line: 61,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 59,
              column: 8
            },
            end: {
              line: 61,
              column: 9
            }
          }, {
            start: {
              line: 59,
              column: 8
            },
            end: {
              line: 61,
              column: 9
            }
          }],
          line: 59
        },
        "6": {
          loc: {
            start: {
              line: 59,
              column: 12
            },
            end: {
              line: 59,
              column: 58
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 59,
              column: 12
            },
            end: {
              line: 59,
              column: 26
            }
          }, {
            start: {
              line: 59,
              column: 30
            },
            end: {
              line: 59,
              column: 58
            }
          }],
          line: 59
        },
        "7": {
          loc: {
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 123,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 123,
              column: 9
            }
          }, {
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 123,
              column: 9
            }
          }],
          line: 62
        },
        "8": {
          loc: {
            start: {
              line: 62,
              column: 12
            },
            end: {
              line: 62,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 62,
              column: 12
            },
            end: {
              line: 62,
              column: 26
            }
          }, {
            start: {
              line: 62,
              column: 30
            },
            end: {
              line: 62,
              column: 46
            }
          }],
          line: 62
        },
        "9": {
          loc: {
            start: {
              line: 66,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 66,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }, {
            start: {
              line: 66,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }],
          line: 66
        },
        "10": {
          loc: {
            start: {
              line: 69,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 69,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }, {
            start: {
              line: 69,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }],
          line: 69
        },
        "11": {
          loc: {
            start: {
              line: 72,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 72,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }, {
            start: {
              line: 72,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }],
          line: 72
        },
        "12": {
          loc: {
            start: {
              line: 75,
              column: 16
            },
            end: {
              line: 76,
              column: 32
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 75,
              column: 16
            },
            end: {
              line: 76,
              column: 32
            }
          }, {
            start: {
              line: 75,
              column: 16
            },
            end: {
              line: 76,
              column: 32
            }
          }],
          line: 75
        },
        "13": {
          loc: {
            start: {
              line: 80,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 80,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }, {
            start: {
              line: 80,
              column: 13
            },
            end: {
              line: 123,
              column: 9
            }
          }],
          line: 80
        },
        "14": {
          loc: {
            start: {
              line: 82,
              column: 27
            },
            end: {
              line: 82,
              column: 74
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 82,
              column: 53
            },
            end: {
              line: 82,
              column: 67
            }
          }, {
            start: {
              line: 82,
              column: 70
            },
            end: {
              line: 82,
              column: 74
            }
          }],
          line: 82
        },
        "15": {
          loc: {
            start: {
              line: 84,
              column: 12
            },
            end: {
              line: 118,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 84,
              column: 12
            },
            end: {
              line: 118,
              column: 13
            }
          }, {
            start: {
              line: 84,
              column: 12
            },
            end: {
              line: 118,
              column: 13
            }
          }],
          line: 84
        },
        "16": {
          loc: {
            start: {
              line: 87,
              column: 16
            },
            end: {
              line: 101,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 87,
              column: 16
            },
            end: {
              line: 101,
              column: 17
            }
          }, {
            start: {
              line: 87,
              column: 16
            },
            end: {
              line: 101,
              column: 17
            }
          }],
          line: 87
        },
        "17": {
          loc: {
            start: {
              line: 89,
              column: 20
            },
            end: {
              line: 97,
              column: 21
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 89,
              column: 20
            },
            end: {
              line: 97,
              column: 21
            }
          }, {
            start: {
              line: 89,
              column: 20
            },
            end: {
              line: 97,
              column: 21
            }
          }],
          line: 89
        },
        "18": {
          loc: {
            start: {
              line: 103,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 103,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          }, {
            start: {
              line: 103,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          }],
          line: 103
        },
        "19": {
          loc: {
            start: {
              line: 107,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 107,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          }, {
            start: {
              line: 107,
              column: 17
            },
            end: {
              line: 118,
              column: 13
            }
          }],
          line: 107
        },
        "20": {
          loc: {
            start: {
              line: 111,
              column: 24
            },
            end: {
              line: 113,
              column: 73
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 112,
              column: 20
            },
            end: {
              line: 112,
              column: 85
            }
          }, {
            start: {
              line: 113,
              column: 20
            },
            end: {
              line: 113,
              column: 73
            }
          }],
          line: 111
        },
        "21": {
          loc: {
            start: {
              line: 129,
              column: 8
            },
            end: {
              line: 133,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 129,
              column: 8
            },
            end: {
              line: 133,
              column: 9
            }
          }, {
            start: {
              line: 129,
              column: 8
            },
            end: {
              line: 133,
              column: 9
            }
          }],
          line: 129
        },
        "22": {
          loc: {
            start: {
              line: 135,
              column: 8
            },
            end: {
              line: 142,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 135,
              column: 8
            },
            end: {
              line: 142,
              column: 9
            }
          }, {
            start: {
              line: 135,
              column: 8
            },
            end: {
              line: 142,
              column: 9
            }
          }],
          line: 135
        },
        "23": {
          loc: {
            start: {
              line: 136,
              column: 12
            },
            end: {
              line: 141,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 136,
              column: 12
            },
            end: {
              line: 141,
              column: 13
            }
          }, {
            start: {
              line: 136,
              column: 12
            },
            end: {
              line: 141,
              column: 13
            }
          }],
          line: 136
        },
        "24": {
          loc: {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 155,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 155,
              column: 5
            }
          }, {
            start: {
              line: 149,
              column: 4
            },
            end: {
              line: 155,
              column: 5
            }
          }],
          line: 149
        },
        "25": {
          loc: {
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 64
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 149,
              column: 8
            },
            end: {
              line: 149,
              column: 18
            }
          }, {
            start: {
              line: 149,
              column: 22
            },
            end: {
              line: 149,
              column: 36
            }
          }, {
            start: {
              line: 149,
              column: 40
            },
            end: {
              line: 149,
              column: 64
            }
          }],
          line: 149
        },
        "26": {
          loc: {
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 154,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 154,
              column: 9
            }
          }, {
            start: {
              line: 151,
              column: 8
            },
            end: {
              line: 154,
              column: 9
            }
          }],
          line: 151
        },
        "27": {
          loc: {
            start: {
              line: 167,
              column: 8
            },
            end: {
              line: 168,
              column: 19
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 167,
              column: 8
            },
            end: {
              line: 168,
              column: 19
            }
          }, {
            start: {
              line: 167,
              column: 8
            },
            end: {
              line: 168,
              column: 19
            }
          }],
          line: 167
        },
        "28": {
          loc: {
            start: {
              line: 169,
              column: 8
            },
            end: {
              line: 174,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 169,
              column: 8
            },
            end: {
              line: 174,
              column: 9
            }
          }, {
            start: {
              line: 169,
              column: 8
            },
            end: {
              line: 174,
              column: 9
            }
          }],
          line: 169
        },
        "29": {
          loc: {
            start: {
              line: 169,
              column: 12
            },
            end: {
              line: 169,
              column: 34
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 169,
              column: 12
            },
            end: {
              line: 169,
              column: 19
            }
          }, {
            start: {
              line: 169,
              column: 23
            },
            end: {
              line: 169,
              column: 34
            }
          }],
          line: 169
        },
        "30": {
          loc: {
            start: {
              line: 172,
              column: 13
            },
            end: {
              line: 174,
              column: 9
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 172,
              column: 13
            },
            end: {
              line: 174,
              column: 9
            }
          }, {
            start: {
              line: 172,
              column: 13
            },
            end: {
              line: 174,
              column: 9
            }
          }],
          line: 172
        },
        "31": {
          loc: {
            start: {
              line: 172,
              column: 17
            },
            end: {
              line: 172,
              column: 38
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 172,
              column: 17
            },
            end: {
              line: 172,
              column: 24
            }
          }, {
            start: {
              line: 172,
              column: 28
            },
            end: {
              line: 172,
              column: 38
            }
          }],
          line: 172
        },
        "32": {
          loc: {
            start: {
              line: 175,
              column: 17
            },
            end: {
              line: 175,
              column: 37
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 175,
              column: 17
            },
            end: {
              line: 175,
              column: 25
            }
          }, {
            start: {
              line: 175,
              column: 29
            },
            end: {
              line: 175,
              column: 37
            }
          }],
          line: 175
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0,
        "56": 0,
        "57": 0,
        "58": 0,
        "59": 0,
        "60": 0,
        "61": 0,
        "62": 0,
        "63": 0,
        "64": 0,
        "65": 0,
        "66": 0,
        "67": 0,
        "68": 0,
        "69": 0,
        "70": 0,
        "71": 0,
        "72": 0,
        "73": 0,
        "74": 0,
        "75": 0,
        "76": 0,
        "77": 0,
        "78": 0,
        "79": 0,
        "80": 0,
        "81": 0,
        "82": 0,
        "83": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0],
        "18": [0, 0],
        "19": [0, 0],
        "20": [0, 0],
        "21": [0, 0],
        "22": [0, 0],
        "23": [0, 0],
        "24": [0, 0],
        "25": [0, 0, 0],
        "26": [0, 0],
        "27": [0, 0],
        "28": [0, 0],
        "29": [0, 0],
        "30": [0, 0],
        "31": [0, 0],
        "32": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "705dcff7554ae90826a4a607916d5b2d21d75cf2"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_25nkw33y8 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_25nkw33y8();
  /**
   * Reshapes a document stream.
   * $project can rename, add, or remove fields as well as create computed values and sub-documents.
   *
   * @param collection
   * @param expr
   * @param opt
   * @returns {Array}
   */

  function $project(collection, expr, opt) {
    cov_25nkw33y8().f[0]++;
    cov_25nkw33y8().s[0]++;

    if (isEmpty(expr)) {
      cov_25nkw33y8().b[0][0]++;
      cov_25nkw33y8().s[1]++;
      return collection;
    } else {
      cov_25nkw33y8().b[0][1]++;
    } // result collection


    var expressionKeys = (cov_25nkw33y8().s[2]++, keys(expr));
    var idOnlyExcludedExpression = (cov_25nkw33y8().s[3]++, false);
    var ID_KEY = (cov_25nkw33y8().s[4]++, idKey()); // validate inclusion and exclusion

    cov_25nkw33y8().s[5]++;
    validateExpression(expr);
    cov_25nkw33y8().s[6]++;

    if (inArray(expressionKeys, ID_KEY)) {
      cov_25nkw33y8().b[1][0]++;
      var id = (cov_25nkw33y8().s[7]++, expr[ID_KEY]);
      cov_25nkw33y8().s[8]++;

      if ((cov_25nkw33y8().b[3][0]++, id === 0) || (cov_25nkw33y8().b[3][1]++, id === false)) {
        cov_25nkw33y8().b[2][0]++;
        cov_25nkw33y8().s[9]++;
        expressionKeys = expressionKeys.filter(notInArray.bind(null, [ID_KEY]));
        cov_25nkw33y8().s[10]++;
        assert(notInArray(expressionKeys, ID_KEY), 'Must not contain collections id key');
        cov_25nkw33y8().s[11]++;
        idOnlyExcludedExpression = isEmpty(expressionKeys);
      } else {
        cov_25nkw33y8().b[2][1]++;
      }
    } else {
      cov_25nkw33y8().b[1][1]++;
      cov_25nkw33y8().s[12]++;
      // if not specified the add the ID field
      expressionKeys.push(ID_KEY);
    }

    cov_25nkw33y8().s[13]++;
    return collection.map(function (obj) {
      cov_25nkw33y8().f[1]++;
      cov_25nkw33y8().s[14]++;
      return processObject(obj, expr, expressionKeys, idOnlyExcludedExpression);
    });
  }
  /**
   * Process the expression value for $project operators
   *
   * @param {Object} obj The object to use as context
   * @param {Object} expr The experssion object of $project operator
   * @param {Array} expressionKeys The key in the 'expr' object
   * @param {Boolean} idOnlyExcludedExpression Boolean value indicating whether only the ID key is excluded
   */

  function processObject(obj, expr, expressionKeys, idOnlyExcludedExpression) {
    cov_25nkw33y8().f[2]++;
    var ID_KEY = (cov_25nkw33y8().s[15]++, idKey());
    var newObj = (cov_25nkw33y8().s[16]++, new Object());
    var foundSlice = (cov_25nkw33y8().s[17]++, false);
    var foundExclusion = (cov_25nkw33y8().s[18]++, false);
    var dropKeys = (cov_25nkw33y8().s[19]++, []);
    cov_25nkw33y8().s[20]++;

    if (idOnlyExcludedExpression) {
      cov_25nkw33y8().b[4][0]++;
      cov_25nkw33y8().s[21]++;
      dropKeys.push(ID_KEY);
    } else {
      cov_25nkw33y8().b[4][1]++;
    }

    cov_25nkw33y8().s[22]++;
    expressionKeys.forEach(function (key) {
      cov_25nkw33y8().f[3]++;
      // final computed value of the key
      var value = (cov_25nkw33y8().s[23]++, undefined); // expression to associate with key

      var subExpr = (cov_25nkw33y8().s[24]++, expr[key]);
      cov_25nkw33y8().s[25]++;

      if ((cov_25nkw33y8().b[6][0]++, key !== ID_KEY) && (cov_25nkw33y8().b[6][1]++, inArray([0, false], subExpr))) {
        cov_25nkw33y8().b[5][0]++;
        cov_25nkw33y8().s[26]++;
        foundExclusion = true;
      } else {
        cov_25nkw33y8().b[5][1]++;
      }

      cov_25nkw33y8().s[27]++;

      if ((cov_25nkw33y8().b[8][0]++, key === ID_KEY) && (cov_25nkw33y8().b[8][1]++, isEmpty(subExpr))) {
        cov_25nkw33y8().b[7][0]++;
        cov_25nkw33y8().s[28]++;
        // tiny optimization here to skip over id
        value = obj[key];
      } else {
        cov_25nkw33y8().b[7][1]++;
        cov_25nkw33y8().s[29]++;

        if (isString(subExpr)) {
          cov_25nkw33y8().b[9][0]++;
          cov_25nkw33y8().s[30]++;
          value = computeValue(obj, subExpr, key);
        } else {
          cov_25nkw33y8().b[9][1]++;
          cov_25nkw33y8().s[31]++;

          if (inArray([1, true], subExpr)) {// For direct projections, we use the resolved object value

            cov_25nkw33y8().b[10][0]++;
          } else {
            cov_25nkw33y8().b[10][1]++;
            cov_25nkw33y8().s[32]++;

            if (Array.isArray(subExpr)) {
              cov_25nkw33y8().b[11][0]++;
              cov_25nkw33y8().s[33]++;
              value = subExpr.map(function (v) {
                cov_25nkw33y8().f[4]++;
                var r = (cov_25nkw33y8().s[34]++, computeValue(obj, v));
                cov_25nkw33y8().s[35]++;

                if (isNil(r)) {
                  cov_25nkw33y8().b[12][0]++;
                  cov_25nkw33y8().s[36]++;
                  return null;
                } else {
                  cov_25nkw33y8().b[12][1]++;
                }

                cov_25nkw33y8().s[37]++;
                return r;
              });
            } else {
              cov_25nkw33y8().b[11][1]++;
              cov_25nkw33y8().s[38]++;

              if (isObject(subExpr)) {
                cov_25nkw33y8().b[13][0]++;
                var subExprKeys = (cov_25nkw33y8().s[39]++, keys(subExpr));
                var operator = (cov_25nkw33y8().s[40]++, subExprKeys.length == 1 ? (cov_25nkw33y8().b[14][0]++, subExprKeys[0]) : (cov_25nkw33y8().b[14][1]++, null)); // first try a projection operator

                cov_25nkw33y8().s[41]++;

                if (has(OPERATORS[OP_PROJECTION], operator)) {
                  cov_25nkw33y8().b[15][0]++;
                  var projectionOperators = (cov_25nkw33y8().s[42]++, OPERATORS[OP_PROJECTION]); // apply the projection operator on the operator expression for the key

                  cov_25nkw33y8().s[43]++;

                  if (operator === '$slice') {
                    cov_25nkw33y8().b[16][0]++;
                    cov_25nkw33y8().s[44]++;

                    // $slice is handled differently for aggregation and projection operations
                    if (ensureArray(subExpr[operator]).every(isNumber)) {
                      cov_25nkw33y8().b[17][0]++;
                      cov_25nkw33y8().s[45]++;
                      // $slice for projection operation
                      value = projectionOperators[operator](obj, subExpr[operator], key);
                      cov_25nkw33y8().s[46]++;
                      foundSlice = true;
                    } else {
                      cov_25nkw33y8().b[17][1]++;
                      cov_25nkw33y8().s[47]++;
                      // $slice for aggregation operation
                      value = computeValue(obj, subExpr, key);
                    }
                  } else {
                    cov_25nkw33y8().b[16][1]++;
                    cov_25nkw33y8().s[48]++;
                    value = projectionOperators[operator](obj, subExpr[operator], key);
                  }
                } else {
                  cov_25nkw33y8().b[15][1]++;
                  cov_25nkw33y8().s[49]++;

                  if (isOperator(operator)) {
                    cov_25nkw33y8().b[18][0]++;
                    cov_25nkw33y8().s[50]++;
                    // compute if operator key
                    value = computeValue(obj, subExpr[operator], operator);
                  } else {
                    cov_25nkw33y8().b[18][1]++;
                    cov_25nkw33y8().s[51]++;

                    if (has(obj, key)) {
                      cov_25nkw33y8().b[19][0]++;
                      cov_25nkw33y8().s[52]++;
                      // compute the value for the sub expression for the key
                      validateExpression(subExpr);
                      var nestedObj = (cov_25nkw33y8().s[53]++, obj[key]);
                      cov_25nkw33y8().s[54]++;
                      value = Array.isArray(nestedObj) ? (cov_25nkw33y8().b[20][0]++, nestedObj.map(function (o) {
                        cov_25nkw33y8().f[5]++;
                        cov_25nkw33y8().s[55]++;
                        return processObject(o, subExpr, subExprKeys, false);
                      })) : (cov_25nkw33y8().b[20][1]++, processObject(nestedObj, subExpr, subExprKeys, false));
                    } else {
                      cov_25nkw33y8().b[19][1]++;
                      cov_25nkw33y8().s[56]++;
                      // compute the value for the sub expression for the key
                      value = computeValue(obj, subExpr);
                    }
                  }
                }
              } else {
                cov_25nkw33y8().b[13][1]++;
                cov_25nkw33y8().s[57]++;
                dropKeys.push(key);
                cov_25nkw33y8().s[58]++;
                return;
              }
            }
          }
        }
      } // get value with object graph


      var objPathValue = (cov_25nkw33y8().s[59]++, resolveObj(obj, key, {
        preserveMissingValues: true
      })); // add the value at the path

      cov_25nkw33y8().s[60]++;

      if (objPathValue !== undefined) {
        cov_25nkw33y8().b[21][0]++;
        cov_25nkw33y8().s[61]++;
        merge(newObj, objPathValue, {
          flatten: true
        });
      } else {
        cov_25nkw33y8().b[21][1]++;
      } // if computed add/or remove accordingly


      cov_25nkw33y8().s[62]++;

      if (notInArray([0, 1, false, true], subExpr)) {
        cov_25nkw33y8().b[22][0]++;
        cov_25nkw33y8().s[63]++;

        if (value === undefined) {
          cov_25nkw33y8().b[23][0]++;
          cov_25nkw33y8().s[64]++;
          removeValue(newObj, key);
        } else {
          cov_25nkw33y8().b[23][1]++;
          cov_25nkw33y8().s[65]++;
          setValue(newObj, key, value);
        }
      } else {
        cov_25nkw33y8().b[22][1]++;
      }
    }); // filter out all missing values preserved to support correct merging

    cov_25nkw33y8().s[66]++;
    filterMissing(newObj); // if projection included $slice operator
    // Also if exclusion fields are found or we want to exclude only the id field
    // include keys that were not explicitly excluded

    cov_25nkw33y8().s[67]++;

    if ((cov_25nkw33y8().b[25][0]++, foundSlice) || (cov_25nkw33y8().b[25][1]++, foundExclusion) || (cov_25nkw33y8().b[25][2]++, idOnlyExcludedExpression)) {
      cov_25nkw33y8().b[24][0]++;
      cov_25nkw33y8().s[68]++;
      newObj = Object.assign({}, obj, newObj);
      cov_25nkw33y8().s[69]++;

      if (dropKeys.length > 0) {
        cov_25nkw33y8().b[26][0]++;
        cov_25nkw33y8().s[70]++;
        newObj = cloneDeep(newObj);
        cov_25nkw33y8().s[71]++;
        each(dropKeys, function (k) {
          cov_25nkw33y8().f[6]++;
          cov_25nkw33y8().s[72]++;
          return removeValue(newObj, k);
        });
      } else {
        cov_25nkw33y8().b[26][1]++;
      }
    } else {
      cov_25nkw33y8().b[24][1]++;
    }

    cov_25nkw33y8().s[73]++;
    return newObj;
  }
  /**
   * Validate inclusion and exclusion values in expression
   *
   * @param {Object} expr The expression given for the projection
   */


  function validateExpression(expr) {
    cov_25nkw33y8().f[7]++;
    var ID_KEY = (cov_25nkw33y8().s[74]++, idKey());
    var check = (cov_25nkw33y8().s[75]++, [false, false]);
    cov_25nkw33y8().s[76]++;
    each(expr, function (v, k) {
      cov_25nkw33y8().f[8]++;
      cov_25nkw33y8().s[77]++;

      if (k === ID_KEY) {
        cov_25nkw33y8().b[27][0]++;
        cov_25nkw33y8().s[78]++;
        return;
      } else {
        cov_25nkw33y8().b[27][1]++;
      }

      cov_25nkw33y8().s[79]++;

      if ((cov_25nkw33y8().b[29][0]++, v === 0) || (cov_25nkw33y8().b[29][1]++, v === false)) {
        cov_25nkw33y8().b[28][0]++;
        cov_25nkw33y8().s[80]++;
        check[0] = true;
      } else {
        cov_25nkw33y8().b[28][1]++;
        cov_25nkw33y8().s[81]++;

        if ((cov_25nkw33y8().b[31][0]++, v === 1) || (cov_25nkw33y8().b[31][1]++, v === true)) {
          cov_25nkw33y8().b[30][0]++;
          cov_25nkw33y8().s[82]++;
          check[1] = true;
        } else {
          cov_25nkw33y8().b[30][1]++;
        }
      }

      cov_25nkw33y8().s[83]++;
      assert(!((cov_25nkw33y8().b[32][0]++, check[0]) && (cov_25nkw33y8().b[32][1]++, check[1])), 'Projection cannot have a mix of inclusion and exclusion.');
    });
  }

  function cov_hj7u2bbqs() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/redact.js";
    var hash = "6d1f70797b244c87554b27673e73519267f96f88";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/redact.js",
      statementMap: {
        "0": {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 66
          }
        },
        "1": {
          start: {
            line: 9,
            column: 33
          },
          end: {
            line: 9,
            column: 64
          }
        }
      },
      fnMap: {
        "0": {
          name: "$redact",
          decl: {
            start: {
              line: 8,
              column: 16
            },
            end: {
              line: 8,
              column: 23
            }
          },
          loc: {
            start: {
              line: 8,
              column: 47
            },
            end: {
              line: 10,
              column: 1
            }
          },
          line: 8
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 9,
              column: 26
            },
            end: {
              line: 9,
              column: 27
            }
          },
          loc: {
            start: {
              line: 9,
              column: 33
            },
            end: {
              line: 9,
              column: 64
            }
          },
          line: 9
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "6d1f70797b244c87554b27673e73519267f96f88"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_hj7u2bbqs = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_hj7u2bbqs();
  /**
   * Restricts the contents of the documents based on information stored in the documents themselves.
   *
   * https://docs.mongodb.com/manual/reference/operator/aggregation/redact/
   */

  function $redact(collection, expr, opt) {
    cov_hj7u2bbqs().f[0]++;
    cov_hj7u2bbqs().s[0]++;
    return collection.map(function (obj) {
      cov_hj7u2bbqs().f[1]++;
      cov_hj7u2bbqs().s[1]++;
      return redactObj(cloneDeep(obj), expr);
    });
  }

  function cov_22msoxbj9a() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/replaceRoot.js";
    var hash = "d0fd0358662e23cb776cfdd23a5150b19cd5a80e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/replaceRoot.js",
      statementMap: {
        "0": {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 19,
            column: 7
          }
        },
        "1": {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 46
          }
        },
        "2": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 17,
            column: 79
          }
        },
        "3": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 19
          }
        }
      },
      fnMap: {
        "0": {
          name: "$replaceRoot",
          decl: {
            start: {
              line: 14,
              column: 16
            },
            end: {
              line: 14,
              column: 28
            }
          },
          loc: {
            start: {
              line: 14,
              column: 52
            },
            end: {
              line: 20,
              column: 1
            }
          },
          line: 14
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 15,
              column: 26
            },
            end: {
              line: 15,
              column: 27
            }
          },
          loc: {
            start: {
              line: 15,
              column: 33
            },
            end: {
              line: 19,
              column: 5
            }
          },
          line: 15
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "d0fd0358662e23cb776cfdd23a5150b19cd5a80e"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_22msoxbj9a = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_22msoxbj9a();
  /**
   * Replaces a document with the specified embedded document or new one.
   * The replacement document can be any valid expression that resolves to a document.
   *
   * https://docs.mongodb.com/manual/reference/operator/aggregation/replaceRoot/
   *
   * @param  {Array} collection
   * @param  {Object} expr
   * @param  {Object} opt
   * @return {*}
   */

  function $replaceRoot(collection, expr, opt) {
    cov_22msoxbj9a().f[0]++;
    cov_22msoxbj9a().s[0]++;
    return collection.map(function (obj) {
      cov_22msoxbj9a().f[1]++;
      cov_22msoxbj9a().s[1]++;
      obj = computeValue(obj, expr.newRoot);
      cov_22msoxbj9a().s[2]++;
      assert(isObject(obj), '$replaceRoot expression must return an object');
      cov_22msoxbj9a().s[3]++;
      return obj;
    });
  }

  function cov_fq012w2wl() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/sample.js";
    var hash = "ae4502b8fd0490e992fca92afdaa2a2d2a0917b3";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/sample.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 24
          }
        },
        "1": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 70
          }
        },
        "2": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 23,
            column: 7
          }
        },
        "3": {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 27
          }
        },
        "4": {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 18
          }
        },
        "5": {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 22,
            column: 10
          }
        },
        "6": {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 19,
            column: 38
          }
        },
        "7": {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 38
          }
        },
        "8": {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 20,
            column: 51
          }
        },
        "9": {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 49
          }
        }
      },
      fnMap: {
        "0": {
          name: "$sample",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 23
            }
          },
          loc: {
            start: {
              line: 11,
              column: 47
            },
            end: {
              line: 24,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 14,
              column: 32
            },
            end: {
              line: 14,
              column: 33
            }
          },
          loc: {
            start: {
              line: 14,
              column: 38
            },
            end: {
              line: 23,
              column: 5
            }
          },
          line: 14
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 17,
              column: 15
            },
            end: {
              line: 17,
              column: 16
            }
          },
          loc: {
            start: {
              line: 17,
              column: 21
            },
            end: {
              line: 22,
              column: 9
            }
          },
          line: 17
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 18,
              column: 12
            },
            end: {
              line: 19,
              column: 38
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 18,
              column: 12
            },
            end: {
              line: 19,
              column: 38
            }
          }, {
            start: {
              line: 18,
              column: 12
            },
            end: {
              line: 19,
              column: 38
            }
          }],
          line: 18
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "ae4502b8fd0490e992fca92afdaa2a2d2a0917b3"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_fq012w2wl = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_fq012w2wl();
  /**
   * Randomly selects the specified number of documents from its input.
   * https://docs.mongodb.com/manual/reference/operator/aggregation/sample/
   *
   * @param  {Array} collection
   * @param  {Object} expr
   * @param  {Object} opt
   * @return {*}
   */

  function $sample(collection, expr, opt) {
    cov_fq012w2wl().f[0]++;
    var size = (cov_fq012w2wl().s[0]++, expr.size);
    cov_fq012w2wl().s[1]++;
    assert(isNumber(size), '$sample size must be a positive integer');
    cov_fq012w2wl().s[2]++;
    return collection.transform(function (xs) {
      cov_fq012w2wl().f[1]++;
      var len = (cov_fq012w2wl().s[3]++, xs.length);
      var i = (cov_fq012w2wl().s[4]++, -1);
      cov_fq012w2wl().s[5]++;
      return function () {
        cov_fq012w2wl().f[2]++;
        cov_fq012w2wl().s[6]++;

        if (++i === size) {
          cov_fq012w2wl().b[0][0]++;
          cov_fq012w2wl().s[7]++;
          return {
            done: true
          };
        } else {
          cov_fq012w2wl().b[0][1]++;
        }

        var n = (cov_fq012w2wl().s[8]++, Math.floor(Math.random() * len));
        cov_fq012w2wl().s[9]++;
        return {
          value: xs[n],
          done: false
        };
      };
    });
  }

  function cov_2gpqdznoyd() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/skip.js";
    var hash = "ae849c0429d10cd4adc3e1225b5672faea771c2b";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/skip.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }
      },
      fnMap: {
        "0": {
          name: "$skip",
          decl: {
            start: {
              line: 9,
              column: 16
            },
            end: {
              line: 9,
              column: 21
            }
          },
          loc: {
            start: {
              line: 9,
              column: 45
            },
            end: {
              line: 11,
              column: 1
            }
          },
          line: 9
        }
      },
      branchMap: {},
      s: {
        "0": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "ae849c0429d10cd4adc3e1225b5672faea771c2b"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2gpqdznoyd = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2gpqdznoyd();

  /**
   * Skips over a specified number of documents from the pipeline and returns the rest.
   *
   * @param collection
   * @param value
   * @param  {Object} opt
   * @returns {*}
   */
  function $skip(collection, expr, opt) {
    cov_2gpqdznoyd().f[0]++;
    cov_2gpqdznoyd().s[0]++;
    return collection.drop(expr);
  }

  function cov_2kb5hgf20x() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/sort.js";
    var hash = "6749e8802b57077679fad21405b54e3aa67f0f1c";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/sort.js",
      statementMap: {
        "0": {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 12,
            column: 26
          }
        },
        "1": {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 12,
            column: 26
          }
        },
        "2": {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 35
          }
        },
        "3": {
          start: {
            line: 14,
            column: 14
          },
          end: {
            line: 14,
            column: 21
          }
        },
        "4": {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 15,
            column: 40
          }
        },
        "5": {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        "6": {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 49
          }
        },
        "7": {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 35,
            column: 7
          }
        },
        "8": {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 38
          }
        },
        "9": {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 33,
            column: 11
          }
        },
        "10": {
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 23,
            column: 65
          }
        },
        "11": {
          start: {
            line: 23,
            column: 47
          },
          end: {
            line: 23,
            column: 64
          }
        },
        "12": {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 32
          }
        },
        "13": {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 28,
            column: 19
          }
        },
        "14": {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 35
          }
        },
        "15": {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 25
          }
        },
        "16": {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 30,
            column: 36
          }
        },
        "17": {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 36
          }
        },
        "18": {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 22
          }
        },
        "19": {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 77
          }
        },
        "20": {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 32,
            column: 75
          }
        },
        "21": {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 20
          }
        },
        "22": {
          start: {
            line: 39,
            column: 27
          },
          end: {
            line: 48,
            column: 1
          }
        },
        "23": {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 70,
            column: 5
          }
        },
        "24": {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        "25": {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 74,
            column: 43
          }
        },
        "26": {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 43
          }
        },
        "27": {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 76,
            column: 46
          }
        },
        "28": {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 46
          }
        },
        "29": {
          start: {
            line: 78,
            column: 21
          },
          end: {
            line: 78,
            column: 62
          }
        },
        "30": {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 90,
            column: 6
          }
        },
        "31": {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 82,
            column: 33
          }
        },
        "32": {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 33
          }
        },
        "33": {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 84,
            column: 38
          }
        },
        "34": {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 86,
            column: 22
          }
        },
        "35": {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 22
          }
        },
        "36": {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 88,
            column: 21
          }
        },
        "37": {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 21
          }
        },
        "38": {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 17
          }
        }
      },
      fnMap: {
        "0": {
          name: "$sort",
          decl: {
            start: {
              line: 10,
              column: 16
            },
            end: {
              line: 10,
              column: 21
            }
          },
          loc: {
            start: {
              line: 10,
              column: 49
            },
            end: {
              line: 36,
              column: 1
            }
          },
          line: 10
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 20,
              column: 32
            },
            end: {
              line: 20,
              column: 33
            }
          },
          loc: {
            start: {
              line: 20,
              column: 40
            },
            end: {
              line: 35,
              column: 5
            }
          },
          line: 20
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 22,
              column: 34
            },
            end: {
              line: 22,
              column: 35
            }
          },
          loc: {
            start: {
              line: 22,
              column: 41
            },
            end: {
              line: 33,
              column: 9
            }
          },
          line: 22
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 23,
              column: 40
            },
            end: {
              line: 23,
              column: 41
            }
          },
          loc: {
            start: {
              line: 23,
              column: 47
            },
            end: {
              line: 23,
              column: 64
            }
          },
          line: 23
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 25,
              column: 49
            },
            end: {
              line: 25,
              column: 50
            }
          },
          loc: {
            start: {
              line: 25,
              column: 59
            },
            end: {
              line: 28,
              column: 13
            }
          },
          line: 25
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 32,
              column: 28
            },
            end: {
              line: 32,
              column: 29
            }
          },
          loc: {
            start: {
              line: 32,
              column: 33
            },
            end: {
              line: 32,
              column: 75
            }
          },
          line: 32
        },
        "6": {
          name: "collationComparator",
          decl: {
            start: {
              line: 64,
              column: 9
            },
            end: {
              line: 64,
              column: 28
            }
          },
          loc: {
            start: {
              line: 64,
              column: 35
            },
            end: {
              line: 91,
              column: 1
            }
          },
          line: 64
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 79,
              column: 11
            },
            end: {
              line: 79,
              column: 12
            }
          },
          loc: {
            start: {
              line: 79,
              column: 21
            },
            end: {
              line: 90,
              column: 5
            }
          },
          line: 79
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          }, {
            start: {
              line: 11,
              column: 4
            },
            end: {
              line: 12,
              column: 26
            }
          }],
          line: 11
        },
        "1": {
          loc: {
            start: {
              line: 11,
              column: 8
            },
            end: {
              line: 11,
              column: 48
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 11,
              column: 8
            },
            end: {
              line: 11,
              column: 25
            }
          }, {
            start: {
              line: 11,
              column: 29
            },
            end: {
              line: 11,
              column: 48
            }
          }],
          line: 11
        },
        "2": {
          loc: {
            start: {
              line: 13,
              column: 10
            },
            end: {
              line: 13,
              column: 34
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 13,
              column: 10
            },
            end: {
              line: 13,
              column: 13
            }
          }, {
            start: {
              line: 13,
              column: 17
            },
            end: {
              line: 13,
              column: 34
            }
          }],
          line: 13
        },
        "3": {
          loc: {
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 19,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 19,
              column: 5
            }
          }, {
            start: {
              line: 17,
              column: 4
            },
            end: {
              line: 19,
              column: 5
            }
          }],
          line: 17
        },
        "4": {
          loc: {
            start: {
              line: 17,
              column: 8
            },
            end: {
              line: 17,
              column: 65
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 17,
              column: 8
            },
            end: {
              line: 17,
              column: 31
            }
          }, {
            start: {
              line: 17,
              column: 35
            },
            end: {
              line: 17,
              column: 65
            }
          }],
          line: 17
        },
        "5": {
          loc: {
            start: {
              line: 29,
              column: 12
            },
            end: {
              line: 30,
              column: 36
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 29,
              column: 12
            },
            end: {
              line: 30,
              column: 36
            }
          }, {
            start: {
              line: 29,
              column: 12
            },
            end: {
              line: 30,
              column: 36
            }
          }],
          line: 29
        },
        "6": {
          loc: {
            start: {
              line: 66,
              column: 40
            },
            end: {
              line: 66,
              column: 58
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 66,
              column: 40
            },
            end: {
              line: 66,
              column: 53
            }
          }, {
            start: {
              line: 66,
              column: 57
            },
            end: {
              line: 66,
              column: 58
            }
          }],
          line: 66
        },
        "7": {
          loc: {
            start: {
              line: 67,
              column: 19
            },
            end: {
              line: 67,
              column: 83
            }
          },
          type: "cond-expr",
          locations: [{
            start: {
              line: 67,
              column: 46
            },
            end: {
              line: 67,
              column: 53
            }
          }, {
            start: {
              line: 67,
              column: 57
            },
            end: {
              line: 67,
              column: 82
            }
          }],
          line: 67
        },
        "8": {
          loc: {
            start: {
              line: 67,
              column: 57
            },
            end: {
              line: 67,
              column: 82
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 67,
              column: 57
            },
            end: {
              line: 67,
              column: 71
            }
          }, {
            start: {
              line: 67,
              column: 75
            },
            end: {
              line: 67,
              column: 82
            }
          }],
          line: 67
        },
        "9": {
          loc: {
            start: {
              line: 68,
              column: 17
            },
            end: {
              line: 68,
              column: 46
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 68,
              column: 17
            },
            end: {
              line: 68,
              column: 37
            }
          }, {
            start: {
              line: 68,
              column: 41
            },
            end: {
              line: 68,
              column: 46
            }
          }],
          line: 68
        },
        "10": {
          loc: {
            start: {
              line: 72,
              column: 4
            },
            end: {
              line: 77,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 72,
              column: 4
            },
            end: {
              line: 77,
              column: 5
            }
          }, {
            start: {
              line: 72,
              column: 4
            },
            end: {
              line: 77,
              column: 5
            }
          }],
          line: 72
        },
        "11": {
          loc: {
            start: {
              line: 72,
              column: 9
            },
            end: {
              line: 72,
              column: 32
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 72,
              column: 9
            },
            end: {
              line: 72,
              column: 23
            }
          }, {
            start: {
              line: 72,
              column: 27
            },
            end: {
              line: 72,
              column: 32
            }
          }],
          line: 72
        },
        "12": {
          loc: {
            start: {
              line: 73,
              column: 8
            },
            end: {
              line: 74,
              column: 43
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 73,
              column: 8
            },
            end: {
              line: 74,
              column: 43
            }
          }, {
            start: {
              line: 73,
              column: 8
            },
            end: {
              line: 74,
              column: 43
            }
          }],
          line: 73
        },
        "13": {
          loc: {
            start: {
              line: 75,
              column: 8
            },
            end: {
              line: 76,
              column: 46
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 75,
              column: 8
            },
            end: {
              line: 76,
              column: 46
            }
          }, {
            start: {
              line: 75,
              column: 8
            },
            end: {
              line: 76,
              column: 46
            }
          }],
          line: 75
        },
        "14": {
          loc: {
            start: {
              line: 81,
              column: 8
            },
            end: {
              line: 82,
              column: 33
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 81,
              column: 8
            },
            end: {
              line: 82,
              column: 33
            }
          }, {
            start: {
              line: 81,
              column: 8
            },
            end: {
              line: 82,
              column: 33
            }
          }],
          line: 81
        },
        "15": {
          loc: {
            start: {
              line: 81,
              column: 12
            },
            end: {
              line: 81,
              column: 40
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 81,
              column: 12
            },
            end: {
              line: 81,
              column: 24
            }
          }, {
            start: {
              line: 81,
              column: 28
            },
            end: {
              line: 81,
              column: 40
            }
          }],
          line: 81
        },
        "16": {
          loc: {
            start: {
              line: 85,
              column: 8
            },
            end: {
              line: 86,
              column: 22
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 85,
              column: 8
            },
            end: {
              line: 86,
              column: 22
            }
          }, {
            start: {
              line: 85,
              column: 8
            },
            end: {
              line: 86,
              column: 22
            }
          }],
          line: 85
        },
        "17": {
          loc: {
            start: {
              line: 87,
              column: 8
            },
            end: {
              line: 88,
              column: 21
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 87,
              column: 8
            },
            end: {
              line: 88,
              column: 21
            }
          }, {
            start: {
              line: 87,
              column: 8
            },
            end: {
              line: 88,
              column: 21
            }
          }],
          line: 87
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0],
        "12": [0, 0],
        "13": [0, 0],
        "14": [0, 0],
        "15": [0, 0],
        "16": [0, 0],
        "17": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "6749e8802b57077679fad21405b54e3aa67f0f1c"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2kb5hgf20x = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2kb5hgf20x();
  /**
   * Takes all input documents and returns them in a stream of sorted documents.
   *
   * @param collection
   * @param sortKeys
   * @param  {Object} opt
   * @returns {*}
   */

  function $sort(collection, sortKeys, opt) {
    cov_2kb5hgf20x().f[0]++;
    cov_2kb5hgf20x().s[0]++;

    if ((cov_2kb5hgf20x().b[1][0]++, isEmpty(sortKeys)) || (cov_2kb5hgf20x().b[1][1]++, !isObject(sortKeys))) {
      cov_2kb5hgf20x().b[0][0]++;
      cov_2kb5hgf20x().s[1]++;
      return collection;
    } else {
      cov_2kb5hgf20x().b[0][1]++;
    }

    cov_2kb5hgf20x().s[2]++;
    opt = (cov_2kb5hgf20x().b[2][0]++, opt) || (cov_2kb5hgf20x().b[2][1]++, Object.create({}));
    var cmp = (cov_2kb5hgf20x().s[3]++, compare);
    var collationSpec = (cov_2kb5hgf20x().s[4]++, opt['collation']); // use collation comparator if provided

    cov_2kb5hgf20x().s[5]++;

    if ((cov_2kb5hgf20x().b[4][0]++, isObject(collationSpec)) && (cov_2kb5hgf20x().b[4][1]++, isString(collationSpec.locale))) {
      cov_2kb5hgf20x().b[3][0]++;
      cov_2kb5hgf20x().s[6]++;
      cmp = collationComparator(collationSpec);
    } else {
      cov_2kb5hgf20x().b[3][1]++;
    }

    cov_2kb5hgf20x().s[7]++;
    return collection.transform(function (coll) {
      cov_2kb5hgf20x().f[1]++;
      var modifiers = (cov_2kb5hgf20x().s[8]++, keys(sortKeys));
      cov_2kb5hgf20x().s[9]++;
      each(modifiers.reverse(), function (key) {
        cov_2kb5hgf20x().f[2]++;
        var grouped = (cov_2kb5hgf20x().s[10]++, groupBy(coll, function (obj) {
          cov_2kb5hgf20x().f[3]++;
          cov_2kb5hgf20x().s[11]++;
          return resolve(obj, key);
        }));
        var sortedIndex = (cov_2kb5hgf20x().s[12]++, {});
        var indexKeys = (cov_2kb5hgf20x().s[13]++, sortBy(grouped.keys, function (k, i) {
          cov_2kb5hgf20x().f[4]++;
          cov_2kb5hgf20x().s[14]++;
          sortedIndex[k] = i;
          cov_2kb5hgf20x().s[15]++;
          return k;
        }, cmp));
        cov_2kb5hgf20x().s[16]++;

        if (sortKeys[key] === -1) {
          cov_2kb5hgf20x().b[5][0]++;
          cov_2kb5hgf20x().s[17]++;
          indexKeys.reverse();
        } else {
          cov_2kb5hgf20x().b[5][1]++;
        }

        cov_2kb5hgf20x().s[18]++;
        coll = [];
        cov_2kb5hgf20x().s[19]++;
        each(indexKeys, function (k) {
          cov_2kb5hgf20x().f[5]++;
          cov_2kb5hgf20x().s[20]++;
          return into(coll, grouped.groups[sortedIndex[k]]);
        });
      });
      cov_2kb5hgf20x().s[21]++;
      return coll;
    });
  } // MongoDB collation strength to JS localeCompare sensitivity mapping.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare

  var COLLATION_STRENGTH = (cov_2kb5hgf20x().s[22]++, {
    // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.
    1: 'base',
    //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.
    // Examples: a ≠ b, a ≠ á, a = A.
    2: 'accent',
    // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.
    // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A
    3: 'variant'
  });
  /**
   * Creates a comparator function for the given collation spec. See https://docs.mongodb.com/manual/reference/collation/
   *
   * @param spec {Object} The MongoDB collation spec.
   * {
   *   locale: string,
   *   caseLevel: boolean,
   *   caseFirst: string,
   *   strength: int,
   *   numericOrdering: boolean,
   *   alternate: string,
   *   maxVariable: string, // unsupported
   *   backwards: boolean // unsupported
   * }
   */

  function collationComparator(spec) {
    cov_2kb5hgf20x().f[6]++;
    var localeOpt = (cov_2kb5hgf20x().s[23]++, {
      sensitivity: COLLATION_STRENGTH[(cov_2kb5hgf20x().b[6][0]++, spec.strength) || (cov_2kb5hgf20x().b[6][1]++, 3)],
      caseFirst: spec.caseFirst === 'off' ? (cov_2kb5hgf20x().b[7][0]++, 'false') : (cov_2kb5hgf20x().b[7][1]++, (cov_2kb5hgf20x().b[8][0]++, spec.caseFirst) || (cov_2kb5hgf20x().b[8][1]++, 'false')),
      numeric: (cov_2kb5hgf20x().b[9][0]++, spec.numericOrdering) || (cov_2kb5hgf20x().b[9][1]++, false),
      ignorePunctuation: spec.alternate === 'shifted'
    }); // when caseLevel is true for strength  1:base and 2:accent, bump sensitivity to the nearest that supports case comparison

    cov_2kb5hgf20x().s[24]++;

    if (((cov_2kb5hgf20x().b[11][0]++, spec.caseLevel) || (cov_2kb5hgf20x().b[11][1]++, false)) === true) {
      cov_2kb5hgf20x().b[10][0]++;
      cov_2kb5hgf20x().s[25]++;

      if (localeOpt.sensitivity === 'base') {
        cov_2kb5hgf20x().b[12][0]++;
        cov_2kb5hgf20x().s[26]++;
        localeOpt.sensitivity = 'case';
      } else {
        cov_2kb5hgf20x().b[12][1]++;
      }

      cov_2kb5hgf20x().s[27]++;

      if (localeOpt.sensitivity === 'accent') {
        cov_2kb5hgf20x().b[13][0]++;
        cov_2kb5hgf20x().s[28]++;
        localeOpt.sensitivity = 'variant';
      } else {
        cov_2kb5hgf20x().b[13][1]++;
      }
    } else {
      cov_2kb5hgf20x().b[10][1]++;
    }

    var collator = (cov_2kb5hgf20x().s[29]++, new Intl.Collator(spec.locale, localeOpt));
    cov_2kb5hgf20x().s[30]++;
    return function (a, b) {
      cov_2kb5hgf20x().f[7]++;
      cov_2kb5hgf20x().s[31]++;

      // non strings
      if ((cov_2kb5hgf20x().b[15][0]++, !isString(a)) || (cov_2kb5hgf20x().b[15][1]++, !isString(b))) {
        cov_2kb5hgf20x().b[14][0]++;
        cov_2kb5hgf20x().s[32]++;
        return compare(a, b);
      } else {
        cov_2kb5hgf20x().b[14][1]++;
      } // only for strings


      var i = (cov_2kb5hgf20x().s[33]++, collator.compare(a, b));
      cov_2kb5hgf20x().s[34]++;

      if (i < 0) {
        cov_2kb5hgf20x().b[16][0]++;
        cov_2kb5hgf20x().s[35]++;
        return -1;
      } else {
        cov_2kb5hgf20x().b[16][1]++;
      }

      cov_2kb5hgf20x().s[36]++;

      if (i > 0) {
        cov_2kb5hgf20x().b[17][0]++;
        cov_2kb5hgf20x().s[37]++;
        return 1;
      } else {
        cov_2kb5hgf20x().b[17][1]++;
      }

      cov_2kb5hgf20x().s[38]++;
      return 0;
    };
  }

  function cov_ub6qw1sk3() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/sortByCount.js";
    var hash = "bf5eeb35d36acff0a19c049ff6da7065070b4918";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/sortByCount.js",
      statementMap: {
        "0": {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 40
          }
        },
        "1": {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 28
          }
        },
        "2": {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 66
          }
        }
      },
      fnMap: {
        "0": {
          name: "$sortByCount",
          decl: {
            start: {
              line: 15,
              column: 16
            },
            end: {
              line: 15,
              column: 28
            }
          },
          loc: {
            start: {
              line: 15,
              column: 52
            },
            end: {
              line: 19,
              column: 1
            }
          },
          line: 15
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      f: {
        "0": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "bf5eeb35d36acff0a19c049ff6da7065070b4918"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_ub6qw1sk3 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_ub6qw1sk3();
  /**
   * Groups incoming documents based on the value of a specified expression,
   * then computes the count of documents in each distinct group.
   *
   * https://docs.mongodb.com/manual/reference/operator/aggregation/sortByCount/
   *
   * @param  {Array} collection
   * @param  {Object} expr
   * @param  {Object} opt
   * @return {*}
   */

  function $sortByCount(collection, expr, opt) {
    cov_ub6qw1sk3().f[0]++;
    var newExpr = (cov_ub6qw1sk3().s[0]++, {
      count: {
        $sum: 1
      }
    });
    cov_ub6qw1sk3().s[1]++;
    newExpr[idKey()] = expr;
    cov_ub6qw1sk3().s[2]++;
    return $sort($group(collection, newExpr), {
      count: -1
    }, opt);
  }

  function cov_1i0ajzp2jn() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/unwind.js";
    var hash = "17b809ca34ffaad0ac13d7a627e5937bab3f4d58";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/unwind.js",
      statementMap: {
        "0": {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        "1": {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 13,
            column: 30
          }
        },
        "2": {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 35
          }
        },
        "3": {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 59
          }
        },
        "4": {
          start: {
            line: 17,
            column: 37
          },
          end: {
            line: 17,
            column: 77
          }
        },
        "5": {
          start: {
            line: 18,
            column: 17
          },
          end: {
            line: 22,
            column: 5
          }
        },
        "6": {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 20,
            column: 37
          }
        },
        "7": {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 37
          }
        },
        "8": {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 17
          }
        },
        "9": {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 62,
            column: 7
          }
        },
        "10": {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        "11": {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        "12": {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 38
          }
        },
        "13": {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 30,
            column: 31
          }
        },
        "14": {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 31
          }
        },
        "15": {
          start: {
            line: 33,
            column: 22
          },
          end: {
            line: 33,
            column: 39
          }
        },
        "16": {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 35,
            column: 27
          }
        },
        "17": {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 27
          }
        },
        "18": {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 37,
            column: 28
          }
        },
        "19": {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 40
          }
        },
        "20": {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        "21": {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        },
        "22": {
          start: {
            line: 43,
            column: 20
          },
          end: {
            line: 43,
            column: 33
          }
        },
        "23": {
          start: {
            line: 44,
            column: 30
          },
          end: {
            line: 44,
            column: 44
          }
        },
        "24": {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 44
          }
        },
        "25": {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 46,
            column: 69
          }
        },
        "26": {
          start: {
            line: 50,
            column: 20
          },
          end: {
            line: 54,
            column: 23
          }
        },
        "27": {
          start: {
            line: 51,
            column: 34
          },
          end: {
            line: 51,
            column: 48
          }
        },
        "28": {
          start: {
            line: 52,
            column: 24
          },
          end: {
            line: 52,
            column: 51
          }
        },
        "29": {
          start: {
            line: 53,
            column: 24
          },
          end: {
            line: 53,
            column: 46
          }
        },
        "30": {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 60,
            column: 13
          }
        },
        "31": {
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 58,
            column: 40
          }
        },
        "32": {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 65
          }
        }
      },
      fnMap: {
        "0": {
          name: "$unwind",
          decl: {
            start: {
              line: 11,
              column: 16
            },
            end: {
              line: 11,
              column: 23
            }
          },
          loc: {
            start: {
              line: 11,
              column: 47
            },
            end: {
              line: 63,
              column: 1
            }
          },
          line: 11
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 18,
              column: 17
            },
            end: {
              line: 18,
              column: 18
            }
          },
          loc: {
            start: {
              line: 18,
              column: 27
            },
            end: {
              line: 22,
              column: 5
            }
          },
          line: 18
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 24,
              column: 16
            },
            end: {
              line: 24,
              column: 17
            }
          },
          loc: {
            start: {
              line: 24,
              column: 22
            },
            end: {
              line: 62,
              column: 5
            }
          },
          line: 24
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 50,
              column: 44
            },
            end: {
              line: 50,
              column: 45
            }
          },
          loc: {
            start: {
              line: 50,
              column: 57
            },
            end: {
              line: 54,
              column: 21
            }
          },
          line: 50
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 12,
              column: 4
            },
            end: {
              line: 14,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 12,
              column: 4
            },
            end: {
              line: 14,
              column: 5
            }
          }, {
            start: {
              line: 12,
              column: 4
            },
            end: {
              line: 14,
              column: 5
            }
          }],
          line: 12
        },
        "1": {
          loc: {
            start: {
              line: 16,
              column: 28
            },
            end: {
              line: 16,
              column: 59
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 16,
              column: 28
            },
            end: {
              line: 16,
              column: 50
            }
          }, {
            start: {
              line: 16,
              column: 54
            },
            end: {
              line: 16,
              column: 59
            }
          }],
          line: 16
        },
        "2": {
          loc: {
            start: {
              line: 17,
              column: 37
            },
            end: {
              line: 17,
              column: 77
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 17,
              column: 37
            },
            end: {
              line: 17,
              column: 68
            }
          }, {
            start: {
              line: 17,
              column: 72
            },
            end: {
              line: 17,
              column: 77
            }
          }],
          line: 17
        },
        "3": {
          loc: {
            start: {
              line: 19,
              column: 8
            },
            end: {
              line: 20,
              column: 37
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 19,
              column: 8
            },
            end: {
              line: 20,
              column: 37
            }
          }, {
            start: {
              line: 19,
              column: 8
            },
            end: {
              line: 20,
              column: 37
            }
          }],
          line: 19
        },
        "4": {
          loc: {
            start: {
              line: 27,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 27,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          }, {
            start: {
              line: 27,
              column: 12
            },
            end: {
              line: 31,
              column: 13
            }
          }],
          line: 27
        },
        "5": {
          loc: {
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 30,
              column: 31
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 30,
              column: 31
            }
          }, {
            start: {
              line: 29,
              column: 16
            },
            end: {
              line: 30,
              column: 31
            }
          }],
          line: 29
        },
        "6": {
          loc: {
            start: {
              line: 34,
              column: 12
            },
            end: {
              line: 35,
              column: 27
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 34,
              column: 12
            },
            end: {
              line: 35,
              column: 27
            }
          }, {
            start: {
              line: 34,
              column: 12
            },
            end: {
              line: 35,
              column: 27
            }
          }],
          line: 34
        },
        "7": {
          loc: {
            start: {
              line: 41,
              column: 12
            },
            end: {
              line: 60,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 41,
              column: 12
            },
            end: {
              line: 60,
              column: 13
            }
          }, {
            start: {
              line: 41,
              column: 12
            },
            end: {
              line: 60,
              column: 13
            }
          }],
          line: 41
        },
        "8": {
          loc: {
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 55,
              column: 17
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 55,
              column: 17
            }
          }, {
            start: {
              line: 42,
              column: 16
            },
            end: {
              line: 55,
              column: 17
            }
          }],
          line: 42
        },
        "9": {
          loc: {
            start: {
              line: 42,
              column: 20
            },
            end: {
              line: 42,
              column: 77
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 42,
              column: 20
            },
            end: {
              line: 42,
              column: 38
            }
          }, {
            start: {
              line: 42,
              column: 42
            },
            end: {
              line: 42,
              column: 77
            }
          }],
          line: 42
        },
        "10": {
          loc: {
            start: {
              line: 57,
              column: 17
            },
            end: {
              line: 60,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 57,
              column: 17
            },
            end: {
              line: 60,
              column: 13
            }
          }, {
            start: {
              line: 57,
              column: 17
            },
            end: {
              line: 60,
              column: 13
            }
          }],
          line: 57
        },
        "11": {
          loc: {
            start: {
              line: 57,
              column: 21
            },
            end: {
              line: 57,
              column: 75
            }
          },
          type: "binary-expr",
          locations: [{
            start: {
              line: 57,
              column: 21
            },
            end: {
              line: 57,
              column: 36
            }
          }, {
            start: {
              line: 57,
              column: 40
            },
            end: {
              line: 57,
              column: 75
            }
          }],
          line: 57
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0],
        "3": [0, 0],
        "4": [0, 0],
        "5": [0, 0],
        "6": [0, 0],
        "7": [0, 0],
        "8": [0, 0],
        "9": [0, 0],
        "10": [0, 0],
        "11": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "17b809ca34ffaad0ac13d7a627e5937bab3f4d58"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1i0ajzp2jn = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1i0ajzp2jn();
  /**
   * Takes an array of documents and returns them as a stream of documents.
   *
   * @param collection
   * @param expr
   * @param  {Object} opt
   * @returns {Array}
   */

  function $unwind(collection, expr, opt) {
    cov_1i0ajzp2jn().f[0]++;
    cov_1i0ajzp2jn().s[0]++;

    if (isString(expr)) {
      cov_1i0ajzp2jn().b[0][0]++;
      cov_1i0ajzp2jn().s[1]++;
      expr = {
        path: expr
      };
    } else {
      cov_1i0ajzp2jn().b[0][1]++;
    }

    var field = (cov_1i0ajzp2jn().s[2]++, expr.path.substr(1));
    var includeArrayIndex = (cov_1i0ajzp2jn().s[3]++, (cov_1i0ajzp2jn().b[1][0]++, expr.includeArrayIndex) || (cov_1i0ajzp2jn().b[1][1]++, false));
    var preserveNullAndEmptyArrays = (cov_1i0ajzp2jn().s[4]++, (cov_1i0ajzp2jn().b[2][0]++, expr.preserveNullAndEmptyArrays) || (cov_1i0ajzp2jn().b[2][1]++, false));
    cov_1i0ajzp2jn().s[5]++;

    var format = function format(o, i) {
      cov_1i0ajzp2jn().f[1]++;
      cov_1i0ajzp2jn().s[6]++;

      if (includeArrayIndex !== false) {
        cov_1i0ajzp2jn().b[3][0]++;
        cov_1i0ajzp2jn().s[7]++;
        o[includeArrayIndex] = i;
      } else {
        cov_1i0ajzp2jn().b[3][1]++;
      }

      cov_1i0ajzp2jn().s[8]++;
      return o;
    };

    var value;
    cov_1i0ajzp2jn().s[9]++;
    return Lazy(function () {
      cov_1i0ajzp2jn().f[2]++;
      cov_1i0ajzp2jn().s[10]++;

      var _loop = function _loop() {
        cov_1i0ajzp2jn().s[11]++;

        // take from lazy sequence if available
        if (value instanceof Iterator) {
          cov_1i0ajzp2jn().b[4][0]++;
          var tmp = (cov_1i0ajzp2jn().s[12]++, value.next());
          cov_1i0ajzp2jn().s[13]++;

          if (!tmp.done) {
            cov_1i0ajzp2jn().b[5][0]++;
            cov_1i0ajzp2jn().s[14]++;
            return {
              v: tmp
            };
          } else {
            cov_1i0ajzp2jn().b[5][1]++;
          }
        } else {
          cov_1i0ajzp2jn().b[4][1]++;
        } // fetch next object


        var obj = (cov_1i0ajzp2jn().s[15]++, collection.next());
        cov_1i0ajzp2jn().s[16]++;

        if (obj.done) {
          cov_1i0ajzp2jn().b[6][0]++;
          cov_1i0ajzp2jn().s[17]++;
          return {
            v: obj
          };
        } else {
          cov_1i0ajzp2jn().b[6][1]++;
        } // unwrap value


        cov_1i0ajzp2jn().s[18]++;
        obj = obj.value; // get the value of the field to unwind

        cov_1i0ajzp2jn().s[19]++;
        value = resolve(obj, field); // throw error if value is not an array???

        cov_1i0ajzp2jn().s[20]++;

        if (isArray(value)) {
          cov_1i0ajzp2jn().b[7][0]++;
          cov_1i0ajzp2jn().s[21]++;

          if ((cov_1i0ajzp2jn().b[9][0]++, value.length === 0) && (cov_1i0ajzp2jn().b[9][1]++, preserveNullAndEmptyArrays === true)) {
            cov_1i0ajzp2jn().b[8][0]++;
            cov_1i0ajzp2jn().s[22]++;
            value = null; // reset unwind value

            var _tmp = (cov_1i0ajzp2jn().s[23]++, cloneDeep(obj));

            cov_1i0ajzp2jn().s[24]++;
            removeValue(_tmp, field);
            cov_1i0ajzp2jn().s[25]++;
            return {
              v: {
                value: format(_tmp, null),
                done: false
              }
            };
          } else {
            cov_1i0ajzp2jn().b[8][1]++;
            cov_1i0ajzp2jn().s[26]++;
            // construct a lazy sequence for elements per value
            value = Lazy(value).map(function (item, i) {
              cov_1i0ajzp2jn().f[3]++;
              var tmp = (cov_1i0ajzp2jn().s[27]++, cloneDeep(obj));
              cov_1i0ajzp2jn().s[28]++;
              setValue(tmp, field, item);
              cov_1i0ajzp2jn().s[29]++;
              return format(tmp, i);
            });
          }
        } else {
          cov_1i0ajzp2jn().b[7][1]++;
          cov_1i0ajzp2jn().s[30]++;

          if ((cov_1i0ajzp2jn().b[11][0]++, !isEmpty(value)) || (cov_1i0ajzp2jn().b[11][1]++, preserveNullAndEmptyArrays === true)) {
            cov_1i0ajzp2jn().b[10][0]++;

            var _tmp2 = (cov_1i0ajzp2jn().s[31]++, cloneDeep(obj));

            cov_1i0ajzp2jn().s[32]++;
            return {
              v: {
                value: format(_tmp2, null),
                done: false
              }
            };
          } else {
            cov_1i0ajzp2jn().b[10][1]++;
          }
        }
      };

      while (true) {
        var _ret = _loop();

        if (_typeof(_ret) === "object") return _ret.v;
      }
    });
  }

  function cov_2ezq9znuk3() {
    var path = "/Users/francis/workspace/mingo/lib/operators/pipeline/index.js";
    var hash = "15471dea74f9c2a2b96e139f866cd6c2fb86e7f4";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/pipeline/index.js",
      statementMap: {},
      fnMap: {},
      branchMap: {},
      s: {},
      f: {},
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "15471dea74f9c2a2b96e139f866cd6c2fb86e7f4"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2ezq9znuk3 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2ezq9znuk3();

  var pipelineOperators = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $addFields: $addFields,
    $set: $set,
    $bucket: $bucket,
    $bucketAuto: $bucketAuto,
    $count: $count,
    $facet: $facet,
    $group: $group,
    $limit: $limit,
    $lookup: $lookup,
    $match: $match,
    $out: $out,
    $project: $project,
    $redact: $redact,
    $replaceRoot: $replaceRoot,
    $sample: $sample,
    $skip: $skip,
    $sort: $sort,
    $sortByCount: $sortByCount,
    $unwind: $unwind
  });

  function cov_19em4ms2ru() {
    var path = "/Users/francis/workspace/mingo/lib/operators/projection.js";
    var hash = "b3870912fa274081bc69fb4400177cc4b4860f5a";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/projection.js",
      statementMap: {
        "0": {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 29
          }
        },
        "1": {
          start: {
            line: 25,
            column: 14
          },
          end: {
            line: 25,
            column: 33
          }
        },
        "2": {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 31
          }
        },
        "3": {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 63
          }
        },
        "4": {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        "5": {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 28,
            column: 18
          }
        },
        "6": {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 30,
            column: 28
          }
        },
        "7": {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 28
          }
        },
        "8": {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 21
          }
        },
        "9": {
          start: {
            line: 42,
            column: 13
          },
          end: {
            line: 42,
            column: 32
          }
        },
        "10": {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 44,
            column: 18
          }
        },
        "11": {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 18
          }
        },
        "12": {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        "13": {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 43
          }
        },
        "14": {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 75
          }
        },
        "15": {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 31
          }
        }
      },
      fnMap: {
        "0": {
          name: "$",
          decl: {
            start: {
              line: 13,
              column: 16
            },
            end: {
              line: 13,
              column: 17
            }
          },
          loc: {
            start: {
              line: 13,
              column: 36
            },
            end: {
              line: 15,
              column: 1
            }
          },
          line: 13
        },
        "1": {
          name: "$elemMatch",
          decl: {
            start: {
              line: 24,
              column: 16
            },
            end: {
              line: 24,
              column: 26
            }
          },
          loc: {
            start: {
              line: 24,
              column: 45
            },
            end: {
              line: 33,
              column: 1
            }
          },
          line: 24
        },
        "2": {
          name: "$slice",
          decl: {
            start: {
              line: 41,
              column: 16
            },
            end: {
              line: 41,
              column: 22
            }
          },
          loc: {
            start: {
              line: 41,
              column: 41
            },
            end: {
              line: 52,
              column: 1
            }
          },
          line: 41
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 29,
              column: 8
            },
            end: {
              line: 30,
              column: 28
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 29,
              column: 8
            },
            end: {
              line: 30,
              column: 28
            }
          }, {
            start: {
              line: 29,
              column: 8
            },
            end: {
              line: 30,
              column: 28
            }
          }],
          line: 29
        },
        "1": {
          loc: {
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 44,
              column: 18
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 44,
              column: 18
            }
          }, {
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 44,
              column: 18
            }
          }],
          line: 43
        },
        "2": {
          loc: {
            start: {
              line: 45,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 45,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          }, {
            start: {
              line: 45,
              column: 4
            },
            end: {
              line: 51,
              column: 5
            }
          }],
          line: 45
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "b3870912fa274081bc69fb4400177cc4b4860f5a"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_19em4ms2ru = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_19em4ms2ru();
  /**
   * Projects the first element in an array that matches the query condition.
   *
   * @param obj
   * @param field
   * @param expr
   */

  function $(obj, expr, field) {
    cov_19em4ms2ru().f[0]++;
    cov_19em4ms2ru().s[0]++;
    err('$ not implemented');
  }
  /**
   * Projects only the first element from an array that matches the specified $elemMatch condition.
   *
   * @param obj
   * @param field
   * @param expr
   * @returns {*}
   */

  function $elemMatch$1(obj, expr, field) {
    cov_19em4ms2ru().f[1]++;
    var arr = (cov_19em4ms2ru().s[1]++, resolve(obj, field));
    var query = (cov_19em4ms2ru().s[2]++, new Query(expr));
    cov_19em4ms2ru().s[3]++;
    assert(Array.isArray(arr), '$elemMatch: invalid argument');
    cov_19em4ms2ru().s[4]++;

    for (var i = (cov_19em4ms2ru().s[5]++, 0); i < arr.length; i++) {
      cov_19em4ms2ru().s[6]++;

      if (query.test(arr[i])) {
        cov_19em4ms2ru().b[0][0]++;
        cov_19em4ms2ru().s[7]++;
        return [arr[i]];
      } else {
        cov_19em4ms2ru().b[0][1]++;
      }
    }

    cov_19em4ms2ru().s[8]++;
    return undefined;
  }
  /**
   * Limits the number of elements projected from an array. Supports skip and limit slices.
   *
   * @param obj
   * @param field
   * @param expr
   */

  function $slice$1(obj, expr, field) {
    cov_19em4ms2ru().f[2]++;
    var xs = (cov_19em4ms2ru().s[9]++, resolve(obj, field));
    cov_19em4ms2ru().s[10]++;

    if (!Array.isArray(xs)) {
      cov_19em4ms2ru().b[1][0]++;
      cov_19em4ms2ru().s[11]++;
      return xs;
    } else {
      cov_19em4ms2ru().b[1][1]++;
    }

    cov_19em4ms2ru().s[12]++;

    if (Array.isArray(expr)) {
      cov_19em4ms2ru().b[2][0]++;
      cov_19em4ms2ru().s[13]++;
      return slice(xs, expr[0], expr[1]);
    } else {
      cov_19em4ms2ru().b[2][1]++;
      cov_19em4ms2ru().s[14]++;
      assert(isNumber(expr), '$slice: invalid arguments for projection');
      cov_19em4ms2ru().s[15]++;
      return slice(xs, expr);
    }
  }

  var projectionOperators = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $: $,
    $elemMatch: $elemMatch$1,
    $slice: $slice$1
  });

  function cov_2qnd3yz3u5() {
    var path = "/Users/francis/workspace/mingo/lib/operators/query.js";
    var hash = "466f8f1d07254a6661d72d03e1a355ce9522f7ed";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/query.js",
      statementMap: {
        "0": {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 12,
            column: 6
          }
        },
        "1": {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 12,
            column: 5
          }
        },
        "2": {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 9,
            column: 68
          }
        },
        "3": {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 10,
            column: 44
          }
        },
        "4": {
          start: {
            line: 11,
            column: 8
          },
          end: {
            line: 11,
            column: 32
          }
        },
        "5": {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 14,
            column: 56
          }
        },
        "6": {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 68
          }
        },
        "7": {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 16,
            column: 54
          }
        },
        "8": {
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 17,
            column: 62
          }
        },
        "9": {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 18,
            column: 54
          }
        },
        "10": {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 56
          }
        },
        "11": {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 20,
            column: 54
          }
        },
        "12": {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 54
          }
        },
        "13": {
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 22,
            column: 56
          }
        },
        "14": {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 23,
            column: 56
          }
        },
        "15": {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 54
          }
        },
        "16": {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 25,
            column: 56
          }
        },
        "17": {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 60
          }
        },
        "18": {
          start: {
            line: 27,
            column: 21
          },
          end: {
            line: 27,
            column: 58
          }
        },
        "19": {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 28,
            column: 58
          }
        },
        "20": {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 84
          }
        },
        "21": {
          start: {
            line: 38,
            column: 18
          },
          end: {
            line: 38,
            column: 20
          }
        },
        "22": {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 57
          }
        },
        "23": {
          start: {
            line: 39,
            column: 26
          },
          end: {
            line: 39,
            column: 55
          }
        },
        "24": {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 47,
            column: 6
          }
        },
        "25": {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        "26": {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 41,
            column: 22
          }
        },
        "27": {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        "28": {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 43,
            column: 29
          }
        },
        "29": {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 20
          }
        },
        "30": {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 83
          }
        },
        "31": {
          start: {
            line: 58,
            column: 18
          },
          end: {
            line: 58,
            column: 20
          }
        },
        "32": {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 55
          }
        },
        "33": {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 53
          }
        },
        "34": {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 67,
            column: 6
          }
        },
        "35": {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        "36": {
          start: {
            line: 61,
            column: 21
          },
          end: {
            line: 61,
            column: 22
          }
        },
        "37": {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        "38": {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 28
          }
        },
        "39": {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 21
          }
        },
        "40": {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 84
          }
        },
        "41": {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 29
          }
        },
        "42": {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 28
          }
        },
        "43": {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 27
          }
        },
        "44": {
          start: {
            line: 89,
            column: 19
          },
          end: {
            line: 89,
            column: 21
          }
        },
        "45": {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 42
          }
        },
        "46": {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 91,
            column: 35
          }
        },
        "47": {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 35
          }
        },
        "48": {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 34
          }
        },
        "49": {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        "50": {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 50
          }
        },
        "51": {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 18
          }
        },
        "52": {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 39
          }
        },
        "53": {
          start: {
            line: 109,
            column: 18
          },
          end: {
            line: 109,
            column: 38
          }
        },
        "54": {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 43
          }
        },
        "55": {
          start: {
            line: 119,
            column: 18
          },
          end: {
            line: 119,
            column: 42
          }
        }
      },
      fnMap: {
        "0": {
          name: "createQueryOperator",
          decl: {
            start: {
              line: 6,
              column: 9
            },
            end: {
              line: 6,
              column: 28
            }
          },
          loc: {
            start: {
              line: 6,
              column: 35
            },
            end: {
              line: 13,
              column: 1
            }
          },
          line: 6
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 7,
              column: 11
            },
            end: {
              line: 7,
              column: 12
            }
          },
          loc: {
            start: {
              line: 7,
              column: 32
            },
            end: {
              line: 12,
              column: 5
            }
          },
          line: 7
        },
        "2": {
          name: "(anonymous_2)",
          decl: {
            start: {
              line: 7,
              column: 32
            },
            end: {
              line: 7,
              column: 33
            }
          },
          loc: {
            start: {
              line: 7,
              column: 41
            },
            end: {
              line: 12,
              column: 5
            }
          },
          line: 7
        },
        "3": {
          name: "$and",
          decl: {
            start: {
              line: 36,
              column: 16
            },
            end: {
              line: 36,
              column: 20
            }
          },
          loc: {
            start: {
              line: 36,
              column: 38
            },
            end: {
              line: 48,
              column: 1
            }
          },
          line: 36
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 39,
              column: 16
            },
            end: {
              line: 39,
              column: 17
            }
          },
          loc: {
            start: {
              line: 39,
              column: 26
            },
            end: {
              line: 39,
              column: 55
            }
          },
          line: 39
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 40,
              column: 11
            },
            end: {
              line: 40,
              column: 12
            }
          },
          loc: {
            start: {
              line: 40,
              column: 18
            },
            end: {
              line: 47,
              column: 5
            }
          },
          line: 40
        },
        "6": {
          name: "$or",
          decl: {
            start: {
              line: 56,
              column: 16
            },
            end: {
              line: 56,
              column: 19
            }
          },
          loc: {
            start: {
              line: 56,
              column: 37
            },
            end: {
              line: 68,
              column: 1
            }
          },
          line: 56
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 59,
              column: 16
            },
            end: {
              line: 59,
              column: 17
            }
          },
          loc: {
            start: {
              line: 59,
              column: 24
            },
            end: {
              line: 59,
              column: 53
            }
          },
          line: 59
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 60,
              column: 11
            },
            end: {
              line: 60,
              column: 12
            }
          },
          loc: {
            start: {
              line: 60,
              column: 18
            },
            end: {
              line: 67,
              column: 5
            }
          },
          line: 60
        },
        "9": {
          name: "$nor",
          decl: {
            start: {
              line: 76,
              column: 16
            },
            end: {
              line: 76,
              column: 20
            }
          },
          loc: {
            start: {
              line: 76,
              column: 38
            },
            end: {
              line: 80,
              column: 1
            }
          },
          line: 76
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 79,
              column: 11
            },
            end: {
              line: 79,
              column: 12
            }
          },
          loc: {
            start: {
              line: 79,
              column: 20
            },
            end: {
              line: 79,
              column: 27
            }
          },
          line: 79
        },
        "11": {
          name: "$not",
          decl: {
            start: {
              line: 88,
              column: 16
            },
            end: {
              line: 88,
              column: 20
            }
          },
          loc: {
            start: {
              line: 88,
              column: 38
            },
            end: {
              line: 93,
              column: 1
            }
          },
          line: 88
        },
        "12": {
          name: "(anonymous_12)",
          decl: {
            start: {
              line: 92,
              column: 11
            },
            end: {
              line: 92,
              column: 12
            }
          },
          loc: {
            start: {
              line: 92,
              column: 18
            },
            end: {
              line: 92,
              column: 34
            }
          },
          line: 92
        },
        "13": {
          name: "$where",
          decl: {
            start: {
              line: 101,
              column: 16
            },
            end: {
              line: 101,
              column: 22
            }
          },
          loc: {
            start: {
              line: 101,
              column: 40
            },
            end: {
              line: 110,
              column: 1
            }
          },
          line: 101
        },
        "14": {
          name: "(anonymous_14)",
          decl: {
            start: {
              line: 109,
              column: 11
            },
            end: {
              line: 109,
              column: 12
            }
          },
          loc: {
            start: {
              line: 109,
              column: 18
            },
            end: {
              line: 109,
              column: 38
            }
          },
          line: 109
        },
        "15": {
          name: "$expr",
          decl: {
            start: {
              line: 118,
              column: 16
            },
            end: {
              line: 118,
              column: 21
            }
          },
          loc: {
            start: {
              line: 118,
              column: 39
            },
            end: {
              line: 120,
              column: 1
            }
          },
          line: 118
        },
        "16": {
          name: "(anonymous_16)",
          decl: {
            start: {
              line: 119,
              column: 11
            },
            end: {
              line: 119,
              column: 12
            }
          },
          loc: {
            start: {
              line: 119,
              column: 18
            },
            end: {
              line: 119,
              column: 42
            }
          },
          line: 119
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 42,
              column: 12
            },
            end: {
              line: 44,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 42,
              column: 12
            },
            end: {
              line: 44,
              column: 13
            }
          }, {
            start: {
              line: 42,
              column: 12
            },
            end: {
              line: 44,
              column: 13
            }
          }],
          line: 42
        },
        "1": {
          loc: {
            start: {
              line: 62,
              column: 12
            },
            end: {
              line: 64,
              column: 13
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 62,
              column: 12
            },
            end: {
              line: 64,
              column: 13
            }
          }, {
            start: {
              line: 62,
              column: 12
            },
            end: {
              line: 64,
              column: 13
            }
          }],
          line: 62
        },
        "2": {
          loc: {
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 108,
              column: 5
            }
          },
          type: "if",
          locations: [{
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 108,
              column: 5
            }
          }, {
            start: {
              line: 103,
              column: 4
            },
            end: {
              line: 108,
              column: 5
            }
          }],
          line: 103
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0,
        "37": 0,
        "38": 0,
        "39": 0,
        "40": 0,
        "41": 0,
        "42": 0,
        "43": 0,
        "44": 0,
        "45": 0,
        "46": 0,
        "47": 0,
        "48": 0,
        "49": 0,
        "50": 0,
        "51": 0,
        "52": 0,
        "53": 0,
        "54": 0,
        "55": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0
      },
      b: {
        "0": [0, 0],
        "1": [0, 0],
        "2": [0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "466f8f1d07254a6661d72d03e1a355ce9522f7ed"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2qnd3yz3u5 = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2qnd3yz3u5();

  function createQueryOperator(pred) {
    cov_2qnd3yz3u5().f[0]++;
    cov_2qnd3yz3u5().s[0]++;
    return function (selector, value) {
      cov_2qnd3yz3u5().f[1]++;
      cov_2qnd3yz3u5().s[1]++;
      return function (obj) {
        cov_2qnd3yz3u5().f[2]++;
        // value of field must be fully resolved.
        var lhs = (cov_2qnd3yz3u5().s[2]++, resolve(obj, selector, {
          preserveMetadata: true
        }));
        cov_2qnd3yz3u5().s[3]++;
        lhs = unwrap(lhs.result, lhs.depth);
        cov_2qnd3yz3u5().s[4]++;
        return pred(lhs, value);
      };
    };
  }

  var $all$1 = (cov_2qnd3yz3u5().s[5]++, createQueryOperator($all));
  var $elemMatch$2 = (cov_2qnd3yz3u5().s[6]++, createQueryOperator($elemMatch));
  var $eq$2 = (cov_2qnd3yz3u5().s[7]++, createQueryOperator($eq));
  var $exists$1 = (cov_2qnd3yz3u5().s[8]++, createQueryOperator($exists));
  var $gt$2 = (cov_2qnd3yz3u5().s[9]++, createQueryOperator($gt));
  var $gte$2 = (cov_2qnd3yz3u5().s[10]++, createQueryOperator($gte));
  var $in$2 = (cov_2qnd3yz3u5().s[11]++, createQueryOperator($in$1));
  var $lt$2 = (cov_2qnd3yz3u5().s[12]++, createQueryOperator($lt));
  var $lte$2 = (cov_2qnd3yz3u5().s[13]++, createQueryOperator($lte));
  var $mod$2 = (cov_2qnd3yz3u5().s[14]++, createQueryOperator($mod$1));
  var $ne$2 = (cov_2qnd3yz3u5().s[15]++, createQueryOperator($ne));
  var $nin$2 = (cov_2qnd3yz3u5().s[16]++, createQueryOperator($nin));
  var $regex$1 = (cov_2qnd3yz3u5().s[17]++, createQueryOperator($regex));
  var $size$2 = (cov_2qnd3yz3u5().s[18]++, createQueryOperator($size$1));
  var $type$2 = (cov_2qnd3yz3u5().s[19]++, createQueryOperator($type));
  /**
   * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $and$1(selector, value) {
    cov_2qnd3yz3u5().f[3]++;
    cov_2qnd3yz3u5().s[20]++;
    assert(isArray(value), 'Invalid expression: $and expects value to be an Array');
    var queries = (cov_2qnd3yz3u5().s[21]++, []);
    cov_2qnd3yz3u5().s[22]++;
    each(value, function (expr) {
      cov_2qnd3yz3u5().f[4]++;
      cov_2qnd3yz3u5().s[23]++;
      return queries.push(new Query(expr));
    });
    cov_2qnd3yz3u5().s[24]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[5]++;
      cov_2qnd3yz3u5().s[25]++;

      for (var i = (cov_2qnd3yz3u5().s[26]++, 0); i < queries.length; i++) {
        cov_2qnd3yz3u5().s[27]++;

        if (!queries[i].test(obj)) {
          cov_2qnd3yz3u5().b[0][0]++;
          cov_2qnd3yz3u5().s[28]++;
          return false;
        } else {
          cov_2qnd3yz3u5().b[0][1]++;
        }
      }

      cov_2qnd3yz3u5().s[29]++;
      return true;
    };
  }
  /**
   * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $or$1(selector, value) {
    cov_2qnd3yz3u5().f[6]++;
    cov_2qnd3yz3u5().s[30]++;
    assert(isArray(value), 'Invalid expression. $or expects value to be an Array');
    var queries = (cov_2qnd3yz3u5().s[31]++, []);
    cov_2qnd3yz3u5().s[32]++;
    each(value, function (expr) {
      cov_2qnd3yz3u5().f[7]++;
      cov_2qnd3yz3u5().s[33]++;
      return queries.push(new Query(expr));
    });
    cov_2qnd3yz3u5().s[34]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[8]++;
      cov_2qnd3yz3u5().s[35]++;

      for (var i = (cov_2qnd3yz3u5().s[36]++, 0); i < queries.length; i++) {
        cov_2qnd3yz3u5().s[37]++;

        if (queries[i].test(obj)) {
          cov_2qnd3yz3u5().b[1][0]++;
          cov_2qnd3yz3u5().s[38]++;
          return true;
        } else {
          cov_2qnd3yz3u5().b[1][1]++;
        }
      }

      cov_2qnd3yz3u5().s[39]++;
      return false;
    };
  }
  /**
   * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $nor(selector, value) {
    cov_2qnd3yz3u5().f[9]++;
    cov_2qnd3yz3u5().s[40]++;
    assert(isArray(value), 'Invalid expression. $nor expects value to be an Array');
    var f = (cov_2qnd3yz3u5().s[41]++, $or$1('$or', value));
    cov_2qnd3yz3u5().s[42]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[10]++;
      cov_2qnd3yz3u5().s[43]++;
      return !f(obj);
    };
  }
  /**
   * Inverts the effect of a query expression and returns documents that do not match the query expression.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $not$1(selector, value) {
    cov_2qnd3yz3u5().f[11]++;
    var criteria = (cov_2qnd3yz3u5().s[44]++, {});
    cov_2qnd3yz3u5().s[45]++;
    criteria[selector] = normalize(value);
    var query = (cov_2qnd3yz3u5().s[46]++, new Query(criteria));
    cov_2qnd3yz3u5().s[47]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[12]++;
      cov_2qnd3yz3u5().s[48]++;
      return !query.test(obj);
    };
  }
  /**
   * Matches documents that satisfy a JavaScript expression.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $where(selector, value) {
    cov_2qnd3yz3u5().f[13]++;
    var f;
    cov_2qnd3yz3u5().s[49]++;

    if (!isFunction(value)) {
      cov_2qnd3yz3u5().b[2][0]++;
      cov_2qnd3yz3u5().s[50]++;
      f = new Function('return ' + value + ';');
    } else {
      cov_2qnd3yz3u5().b[2][1]++;
      cov_2qnd3yz3u5().s[51]++;
      f = value;
    }

    cov_2qnd3yz3u5().s[52]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[14]++;
      cov_2qnd3yz3u5().s[53]++;
      return f.call(obj) === true;
    };
  }
  /**
   * Allows the use of aggregation expressions within the query language.
   *
   * @param selector
   * @param value
   * @returns {Function}
   */

  function $expr(selector, value) {
    cov_2qnd3yz3u5().f[15]++;
    cov_2qnd3yz3u5().s[54]++;
    return function (obj) {
      cov_2qnd3yz3u5().f[16]++;
      cov_2qnd3yz3u5().s[55]++;
      return computeValue(obj, value);
    };
  }

  var queryOperators = /*#__PURE__*/Object.freeze({
    __proto__: null,
    $all: $all$1,
    $elemMatch: $elemMatch$2,
    $eq: $eq$2,
    $exists: $exists$1,
    $gt: $gt$2,
    $gte: $gte$2,
    $in: $in$2,
    $lt: $lt$2,
    $lte: $lte$2,
    $mod: $mod$2,
    $ne: $ne$2,
    $nin: $nin$2,
    $regex: $regex$1,
    $size: $size$2,
    $type: $type$2,
    $and: $and$1,
    $or: $or$1,
    $nor: $nor,
    $not: $not$1,
    $where: $where,
    $expr: $expr
  });

  function cov_227qp0eff() {
    var path = "/Users/francis/workspace/mingo/lib/operators/index.js";
    var hash = "05b5c378b4a6c7cd2c8b60a71f410602052ccd03";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/operators/index.js",
      statementMap: {
        "0": {
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 10,
            column: 27
          }
        },
        "1": {
          start: {
            line: 11,
            column: 0
          },
          end: {
            line: 11,
            column: 30
          }
        },
        "2": {
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 12,
            column: 25
          }
        },
        "3": {
          start: {
            line: 13,
            column: 0
          },
          end: {
            line: 13,
            column: 28
          }
        },
        "4": {
          start: {
            line: 14,
            column: 0
          },
          end: {
            line: 14,
            column: 30
          }
        },
        "5": {
          start: {
            line: 15,
            column: 0
          },
          end: {
            line: 15,
            column: 25
          }
        },
        "6": {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 22,
            column: 1
          }
        },
        "7": {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 7
          }
        },
        "8": {
          start: {
            line: 28,
            column: 28
          },
          end: {
            line: 28,
            column: 31
          }
        },
        "9": {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 46
          }
        },
        "10": {
          start: {
            line: 39,
            column: 25
          },
          end: {
            line: 39,
            column: 40
          }
        },
        "11": {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 73
          }
        },
        "12": {
          start: {
            line: 42,
            column: 20
          },
          end: {
            line: 42,
            column: 38
          }
        },
        "13": {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 47,
            column: 7
          }
        },
        "14": {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 76
          }
        },
        "15": {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 87
          }
        },
        "16": {
          start: {
            line: 48,
            column: 18
          },
          end: {
            line: 48,
            column: 20
          }
        },
        "17": {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        "18": {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 60,
            column: 15
          }
        },
        "19": {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 43
          }
        },
        "20": {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 59,
            column: 18
          }
        },
        "21": {
          start: {
            line: 53,
            column: 51
          },
          end: {
            line: 59,
            column: 17
          }
        },
        "22": {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 52
          }
        },
        "23": {
          start: {
            line: 56,
            column: 33
          },
          end: {
            line: 56,
            column: 57
          }
        },
        "24": {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 77
          }
        },
        "25": {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 34
          }
        },
        "26": {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 18
          }
        },
        "27": {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 69,
            column: 15
          }
        },
        "28": {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 64,
            column: 43
          }
        },
        "29": {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 68,
            column: 18
          }
        },
        "30": {
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 66,
            column: 52
          }
        },
        "31": {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 51
          }
        },
        "32": {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 18
          }
        },
        "33": {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 15
          }
        },
        "34": {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 73,
            column: 72
          }
        },
        "35": {
          start: {
            line: 73,
            column: 43
          },
          end: {
            line: 73,
            column: 71
          }
        },
        "36": {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 47
          }
        }
      },
      fnMap: {
        "0": {
          name: "enableSystemOperators",
          decl: {
            start: {
              line: 26,
              column: 16
            },
            end: {
              line: 26,
              column: 37
            }
          },
          loc: {
            start: {
              line: 26,
              column: 40
            },
            end: {
              line: 31,
              column: 1
            }
          },
          line: 26
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 27,
              column: 27
            },
            end: {
              line: 27,
              column: 28
            }
          },
          loc: {
            start: {
              line: 27,
              column: 34
            },
            end: {
              line: 30,
              column: 5
            }
          },
          line: 27
        },
        "2": {
          name: "addOperators",
          decl: {
            start: {
              line: 38,
              column: 16
            },
            end: {
              line: 38,
              column: 28
            }
          },
          loc: {
            start: {
              line: 38,
              column: 42
            },
            end: {
              line: 78,
              column: 1
            }
          },
          line: 38
        },
        "3": {
          name: "(anonymous_3)",
          decl: {
            start: {
              line: 44,
              column: 23
            },
            end: {
              line: 44,
              column: 24
            }
          },
          loc: {
            start: {
              line: 44,
              column: 34
            },
            end: {
              line: 47,
              column: 5
            }
          },
          line: 44
        },
        "4": {
          name: "(anonymous_4)",
          decl: {
            start: {
              line: 51,
              column: 31
            },
            end: {
              line: 51,
              column: 32
            }
          },
          loc: {
            start: {
              line: 51,
              column: 43
            },
            end: {
              line: 60,
              column: 13
            }
          },
          line: 51
        },
        "5": {
          name: "(anonymous_5)",
          decl: {
            start: {
              line: 53,
              column: 30
            },
            end: {
              line: 53,
              column: 31
            }
          },
          loc: {
            start: {
              line: 53,
              column: 51
            },
            end: {
              line: 59,
              column: 17
            }
          },
          line: 53
        },
        "6": {
          name: "(anonymous_6)",
          decl: {
            start: {
              line: 53,
              column: 51
            },
            end: {
              line: 53,
              column: 52
            }
          },
          loc: {
            start: {
              line: 53,
              column: 58
            },
            end: {
              line: 59,
              column: 17
            }
          },
          line: 53
        },
        "7": {
          name: "(anonymous_7)",
          decl: {
            start: {
              line: 63,
              column: 31
            },
            end: {
              line: 63,
              column: 32
            }
          },
          loc: {
            start: {
              line: 63,
              column: 43
            },
            end: {
              line: 69,
              column: 13
            }
          },
          line: 63
        },
        "8": {
          name: "(anonymous_8)",
          decl: {
            start: {
              line: 65,
              column: 30
            },
            end: {
              line: 65,
              column: 31
            }
          },
          loc: {
            start: {
              line: 65,
              column: 55
            },
            end: {
              line: 68,
              column: 17
            }
          },
          line: 65
        },
        "9": {
          name: "(anonymous_9)",
          decl: {
            start: {
              line: 72,
              column: 31
            },
            end: {
              line: 72,
              column: 32
            }
          },
          loc: {
            start: {
              line: 72,
              column: 43
            },
            end: {
              line: 74,
              column: 13
            }
          },
          line: 72
        },
        "10": {
          name: "(anonymous_10)",
          decl: {
            start: {
              line: 73,
              column: 30
            },
            end: {
              line: 73,
              column: 31
            }
          },
          loc: {
            start: {
              line: 73,
              column: 43
            },
            end: {
              line: 73,
              column: 71
            }
          },
          line: 73
        }
      },
      branchMap: {
        "0": {
          loc: {
            start: {
              line: 49,
              column: 4
            },
            end: {
              line: 75,
              column: 5
            }
          },
          type: "switch",
          locations: [{
            start: {
              line: 50,
              column: 8
            },
            end: {
              line: 61,
              column: 18
            }
          }, {
            start: {
              line: 62,
              column: 8
            },
            end: {
              line: 70,
              column: 18
            }
          }, {
            start: {
              line: 71,
              column: 8
            },
            end: {
              line: 74,
              column: 15
            }
          }],
          line: 49
        }
      },
      s: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0,
        "25": 0,
        "26": 0,
        "27": 0,
        "28": 0,
        "29": 0,
        "30": 0,
        "31": 0,
        "32": 0,
        "33": 0,
        "34": 0,
        "35": 0,
        "36": 0
      },
      f: {
        "0": 0,
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0
      },
      b: {
        "0": [0, 0, 0]
      },
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "05b5c378b4a6c7cd2c8b60a71f410602052ccd03"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_227qp0eff = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_227qp0eff();

  var OPERATORS = (cov_227qp0eff().s[0]++, {});
  cov_227qp0eff().s[1]++;
  OPERATORS[OP_EXPRESSION] = {};
  cov_227qp0eff().s[2]++;
  OPERATORS[OP_GROUP] = {};
  cov_227qp0eff().s[3]++;
  OPERATORS[OP_PIPELINE] = {};
  cov_227qp0eff().s[4]++;
  OPERATORS[OP_PROJECTION] = {};
  cov_227qp0eff().s[5]++;
  OPERATORS[OP_QUERY] = {};
  var SYSTEM_OPERATORS = (cov_227qp0eff().s[6]++, [[OP_EXPRESSION, expressionOperators], [OP_GROUP, groupOperators], [OP_PIPELINE, pipelineOperators], [OP_PROJECTION, projectionOperators], [OP_QUERY, queryOperators]]);
  /**
   * Enables the default operators of the system
   */

  function enableSystemOperators() {
    cov_227qp0eff().f[0]++;
    cov_227qp0eff().s[7]++;
    each(SYSTEM_OPERATORS, function (arr) {
      cov_227qp0eff().f[1]++;

      var _ref = (cov_227qp0eff().s[8]++, arr),
          _ref2 = _slicedToArray(_ref, 2),
          cls = _ref2[0],
          values = _ref2[1];

      cov_227qp0eff().s[9]++;
      Object.assign(OPERATORS[cls], values);
    });
  }
  /**
   * Add new operators
   *
   * @param opClass the operator class to extend
   * @param fn a function returning an object of new operators
   */

  function addOperators(opClass, fn) {
    cov_227qp0eff().f[2]++;
    var newOperators = (cov_227qp0eff().s[10]++, fn(_internal())); // ensure correct type specified

    cov_227qp0eff().s[11]++;
    assert(has(OPERATORS, opClass), "Invalid operator class ".concat(opClass));
    var operators = (cov_227qp0eff().s[12]++, OPERATORS[opClass]); // check for existing operators

    cov_227qp0eff().s[13]++;
    each(newOperators, function (_, op) {
      cov_227qp0eff().f[3]++;
      cov_227qp0eff().s[14]++;
      assert(/^\$[a-zA-Z0-9_]*$/.test(op), "Invalid operator name ".concat(op));
      cov_227qp0eff().s[15]++;
      assert(!has(operators, op), "".concat(op, " already exists for '").concat(opClass, "' operators"));
    });
    var wrapped = (cov_227qp0eff().s[16]++, {});
    cov_227qp0eff().s[17]++;

    switch (opClass) {
      case OP_QUERY:
        cov_227qp0eff().b[0][0]++;
        cov_227qp0eff().s[18]++;
        each(newOperators, function (fn, op) {
          cov_227qp0eff().f[4]++;
          cov_227qp0eff().s[19]++;
          fn = fn.bind(newOperators);
          cov_227qp0eff().s[20]++;

          wrapped[op] = function (selector, value) {
            cov_227qp0eff().f[5]++;
            cov_227qp0eff().s[21]++;
            return function (obj) {
              cov_227qp0eff().f[6]++;
              // value of field must be fully resolved.
              var lhs = (cov_227qp0eff().s[22]++, resolve(obj, selector));
              var result = (cov_227qp0eff().s[23]++, fn(selector, lhs, value));
              cov_227qp0eff().s[24]++;
              assert(isBoolean(result), "".concat(op, " must return a boolean"));
              cov_227qp0eff().s[25]++;
              return result;
            };
          };
        });
        cov_227qp0eff().s[26]++;
        break;

      case OP_PROJECTION:
        cov_227qp0eff().b[0][1]++;
        cov_227qp0eff().s[27]++;
        each(newOperators, function (fn, op) {
          cov_227qp0eff().f[7]++;
          cov_227qp0eff().s[28]++;
          fn = fn.bind(newOperators);
          cov_227qp0eff().s[29]++;

          wrapped[op] = function (obj, expr, selector) {
            cov_227qp0eff().f[8]++;
            var lhs = (cov_227qp0eff().s[30]++, resolve(obj, selector));
            cov_227qp0eff().s[31]++;
            return fn(selector, lhs, expr);
          };
        });
        cov_227qp0eff().s[32]++;
        break;

      default:
        cov_227qp0eff().b[0][2]++;
        cov_227qp0eff().s[33]++;
        each(newOperators, function (fn, op) {
          cov_227qp0eff().f[9]++;
          cov_227qp0eff().s[34]++;

          wrapped[op] = function () {
            cov_227qp0eff().f[10]++;
            cov_227qp0eff().s[35]++;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return fn.apply(newOperators, args);
          };
        });
    } // toss the operator salad :)


    cov_227qp0eff().s[36]++;
    Object.assign(OPERATORS[opClass], wrapped);
  }

  function cov_2px2jc99zz() {
    var path = "/Users/francis/workspace/mingo/lib/mixin.js";
    var hash = "ca962e72123ca511454b4186f81394f330ed7881";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/mixin.js",
      statementMap: {
        "0": {
          start: {
            line: 6,
            column: 31
          },
          end: {
            line: 24,
            column: 1
          }
        },
        "1": {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 14,
            column: 67
          }
        },
        "2": {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 59
          }
        }
      },
      fnMap: {
        "0": {
          name: "(anonymous_0)",
          decl: {
            start: {
              line: 13,
              column: 4
            },
            end: {
              line: 13,
              column: 5
            }
          },
          loc: {
            start: {
              line: 13,
              column: 32
            },
            end: {
              line: 15,
              column: 5
            }
          },
          line: 13
        },
        "1": {
          name: "(anonymous_1)",
          decl: {
            start: {
              line: 21,
              column: 4
            },
            end: {
              line: 21,
              column: 5
            }
          },
          loc: {
            start: {
              line: 21,
              column: 24
            },
            end: {
              line: 23,
              column: 5
            }
          },
          line: 21
        }
      },
      branchMap: {},
      s: {
        "0": 0,
        "1": 0,
        "2": 0
      },
      f: {
        "0": 0,
        "1": 0
      },
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "ca962e72123ca511454b4186f81394f330ed7881"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_2px2jc99zz = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_2px2jc99zz();
  /**
   * Mixin for Collection types that provide a method `toJSON() -> Array[Object]`
   */

  var CollectionMixin = (cov_2px2jc99zz().s[0]++, {
    /**
     * Runs a query and returns a cursor to the result
     * @param criteria
     * @param projection
     * @returns {Cursor}
     */
    query: function query(criteria, projection) {
      cov_2px2jc99zz().f[0]++;
      cov_2px2jc99zz().s[1]++;
      return new Query(criteria).find(this.toJSON(), projection);
    },

    /**
     * Runs the given aggregation operators on this collection
     * @params pipeline
     * @returns {Array}
     */
    aggregate: function aggregate(pipeline) {
      cov_2px2jc99zz().f[1]++;
      cov_2px2jc99zz().s[2]++;
      return new Aggregator(pipeline).run(this.toJSON());
    }
  });

  function cov_bmsv9nywi() {
    var path = "/Users/francis/workspace/mingo/lib/index.js";
    var hash = "226f93b95ac83df77403ad6a3c9482cd880b1eb5";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/lib/index.js",
      statementMap: {
        "0": {
          start: {
            line: 2,
            column: 0
          },
          end: {
            line: 2,
            column: 24
          }
        }
      },
      fnMap: {},
      branchMap: {},
      s: {
        "0": 0
      },
      f: {},
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "226f93b95ac83df77403ad6a3c9482cd880b1eb5"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_bmsv9nywi = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_bmsv9nywi();
  cov_bmsv9nywi().s[0]++;
  enableSystemOperators(); // public interface

  function cov_1abcf6ak8n() {
    var path = "/Users/francis/workspace/mingo/index.js";
    var hash = "6142f3dccbcf8c876081f6185823070f50b95b1d";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
      path: "/Users/francis/workspace/mingo/index.js",
      statementMap: {},
      fnMap: {},
      branchMap: {},
      s: {},
      f: {},
      b: {},
      _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
      hash: "6142f3dccbcf8c876081f6185823070f50b95b1d"
    };
    var coverage = global[gcv] || (global[gcv] = {});

    if (!coverage[path] || coverage[path].hash !== hash) {
      coverage[path] = coverageData;
    }

    var actualCoverage = coverage[path];

    cov_1abcf6ak8n = function () {
      return actualCoverage;
    };

    return actualCoverage;
  }

  cov_1abcf6ak8n();

  exports.Aggregator = Aggregator;
  exports.CollectionMixin = CollectionMixin;
  exports.Cursor = Cursor;
  exports.Lazy = Lazy;
  exports.OP_EXPRESSION = OP_EXPRESSION;
  exports.OP_GROUP = OP_GROUP;
  exports.OP_PIPELINE = OP_PIPELINE;
  exports.OP_PROJECTION = OP_PROJECTION;
  exports.OP_QUERY = OP_QUERY;
  exports.Query = Query;
  exports._internal = _internal;
  exports.addOperators = addOperators;
  exports.aggregate = aggregate;
  exports.find = find;
  exports.remove = remove;
  exports.setup = setup;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
